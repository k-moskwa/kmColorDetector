
kmColorDetector.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006480  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b8  00800060  00006480  00006514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000df  00800118  00800118  000065cc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000065cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006628  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006b8  00000000  00000000  00006664  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ca7  00000000  00000000  00006d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001355  00000000  00000000  0000a9c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003397  00000000  00000000  0000bd18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a88  00000000  00000000  0000f0b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015f4  00000000  00000000  00010b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000368a  00000000  00000000  0001212c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000678  00000000  00000000  000157b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
       4:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__vector_1>
       8:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <__vector_2>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 c6 25 	jmp	0x4b8c	; 0x4b8c <__vector_4>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 dd 2b 	jmp	0x57ba	; 0x57ba <__vector_9>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 31 1f 	jmp	0x3e62	; 0x3e62 <__vector_13>
      38:	0c 94 5e 1f 	jmp	0x3ebc	; 0x3ebc <__vector_14>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	a5 07       	cpc	r26, r21
      56:	aa 07       	cpc	r26, r26
      58:	af 07       	cpc	r26, r31
      5a:	b4 07       	cpc	r27, r20
      5c:	b9 07       	cpc	r27, r25
      5e:	be 07       	cpc	r27, r30
      60:	c3 07       	cpc	r28, r19
      62:	c8 07       	cpc	r28, r24
      64:	76 08       	sbc	r7, r6
      66:	7b 08       	sbc	r7, r11
      68:	80 08       	sbc	r8, r0
      6a:	85 08       	sbc	r8, r5
      6c:	8a 08       	sbc	r8, r10
      6e:	8f 08       	sbc	r8, r15
      70:	94 08       	sbc	r9, r4
      72:	99 08       	sbc	r9, r9

00000074 <__trampolines_end>:
      74:	4d 65       	ori	r20, 0x5D	; 93
      76:	61 73       	andi	r22, 0x31	; 49
      78:	75 72       	andi	r23, 0x25	; 37
      7a:	65 20       	and	r6, r5
      7c:	53 74       	andi	r21, 0x43	; 67
      7e:	61 72       	andi	r22, 0x21	; 33
      80:	74 00       	.word	0x0074	; ????

00000082 <__c.2417>:
      82:	77 68 69 74 65 00                                   white.

00000088 <__c.2421>:
      88:	62 6c 61 63 6b 00                                   black.

0000008e <__c.2424>:
      8e:	62 6c 75 65 00                                      blue.

00000093 <__c.2427>:
      93:	67 72 65 65 6e 00                                   green.

00000099 <__c.2430>:
      99:	72 65 64 00                                         red.

0000009d <__c.2433>:
      9d:	79 65 6c 6c 6f 77 00                                yellow.

000000a4 <__c.2436>:
      a4:	62 72 6f 77 6e 00                                   brown.

000000aa <__c.2439>:
      aa:	6f 72 61 6e 67 65 00                                orange.

000000b1 <__c.2448>:
      b1:	43 3a 00                                            C:.

000000b4 <__c.2451>:
      b4:	77 68 69 74 65 00                                   white.

000000ba <__c.2455>:
      ba:	62 6c 61 63 6b 00                                   black.

000000c0 <__c.2458>:
      c0:	62 6c 75 65 00                                      blue.

000000c5 <__c.2461>:
      c5:	67 72 65 65 6e 00                                   green.

000000cb <__c.2464>:
      cb:	72 65 64 00                                         red.

000000cf <__c.2467>:
      cf:	79 65 6c 6c 6f 77 00                                yellow.

000000d6 <__c.2470>:
      d6:	62 72 6f 77 6e 00                                   brown.

000000dc <__c.2473>:
      dc:	6f 72 61 6e 67 65 00                                orange.

000000e3 <_strCrLf>:
      e3:	0d 0a 00                                            ...

000000e6 <_strPrefixHex>:
      e6:	30 78 00                                            0x.

000000e9 <_strPrefixOct>:
      e9:	30 00 00                                            0..

000000ec <__ctors_end>:
      ec:	11 24       	eor	r1, r1
      ee:	1f be       	out	0x3f, r1	; 63
      f0:	cf e5       	ldi	r28, 0x5F	; 95
      f2:	d8 e0       	ldi	r29, 0x08	; 8
      f4:	de bf       	out	0x3e, r29	; 62
      f6:	cd bf       	out	0x3d, r28	; 61

000000f8 <__do_copy_data>:
      f8:	11 e0       	ldi	r17, 0x01	; 1
      fa:	a0 e6       	ldi	r26, 0x60	; 96
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	e0 e8       	ldi	r30, 0x80	; 128
     100:	f4 e6       	ldi	r31, 0x64	; 100
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x10>
     104:	05 90       	lpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 31       	cpi	r26, 0x18	; 24
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0xc>

0000010e <__do_clear_bss>:
     10e:	21 e0       	ldi	r18, 0x01	; 1
     110:	a8 e1       	ldi	r26, 0x18	; 24
     112:	b1 e0       	ldi	r27, 0x01	; 1
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a7 3f       	cpi	r26, 0xF7	; 247
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <main>
     122:	0c 94 3e 32 	jmp	0x647c	; 0x647c <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <appInit>:
void callbackSensorMeasureReady(void *userData);

void dbMeasureToSerial(void);

// Implementation
void appInit(void) {
     12a:	af 92       	push	r10
     12c:	bf 92       	push	r11
     12e:	cf 92       	push	r12
     130:	df 92       	push	r13
     132:	ef 92       	push	r14
     134:	ff 92       	push	r15
     136:	0f 93       	push	r16
     138:	1f 93       	push	r17
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
     142:	2c 97       	sbiw	r28, 0x0c	; 12
     144:	0f b6       	in	r0, 0x3f	; 63
     146:	f8 94       	cli
     148:	de bf       	out	0x3e, r29	; 62
     14a:	0f be       	out	0x3f, r0	; 63
     14c:	cd bf       	out	0x3d, r28	; 61
	// Initialize all available ports as pull-up inputs
	dbPullUpAllPorts();
     14e:	0e 94 64 06 	call	0xcc8	; 0xcc8 <dbPullUpAllPorts>
#ifndef KMCD_NO_DEBUG
	// In case basic debug enabled - initialize it
	dbInit();
     152:	0e 94 80 06 	call	0xd00	; 0xd00 <dbInit>
#endif
	// Initialize software callbacks with one of default resolution interval
	swtInit(SWT_INTERVAL_10MS);
     156:	8a e0       	ldi	r24, 0x0A	; 10
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	0e 94 e7 20 	call	0x41ce	; 0x41ce <swtInit>
	// Initialize TCS3200 Color Sensor
	tscInit();
     15e:	0e 94 37 18 	call	0x306e	; 0x306e <tscInit>
	// Initialize button routines with specific PIN as defined in config.h
	btnInit(BUTTON_PIN);
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <btnInit>
#ifndef KMCD_NO_SERIAL_DEBUG
	// In case serial debug option is enabled - 
	// Initialize debug via serial with specific baud rate
	serInit(PLYR_SERIAL_BAUD_RATE);
     168:	60 e8       	ldi	r22, 0x80	; 128
     16a:	75 e2       	ldi	r23, 0x25	; 37
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <serInit>
#endif
#if 1
//#ifndef KMCD_NO_LCD
	// In case LCD debug tools are enabled
	// Initialize LCD for debug output
	lcdInit(LCD_COLS, LCD_ROWS, LCD_5x8DOTS);
     174:	40 e0       	ldi	r20, 0x00	; 0
     176:	62 e0       	ldi	r22, 0x02	; 2
     178:	80 e1       	ldi	r24, 0x10	; 16
     17a:	0e 94 49 0a 	call	0x1492	; 0x1492 <lcdInit>
	lcdBegin();
     17e:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <lcdBegin>
	// Enable LCD back light
	lcdBacklight();
     182:	0e 94 a8 12 	call	0x2550	; 0x2550 <lcdBacklight>
	// Set cursor the the left top corner
	lcdSetCursor(0, 0);
     186:	60 e0       	ldi	r22, 0x00	; 0
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	0e 94 12 13 	call	0x2624	; 0x2624 <lcdSetCursor>
	// and write application name and version
	lcdPrint(APP_NAME " " APP_VERSION);
     18e:	8b e6       	ldi	r24, 0x6B	; 107
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 b2 13 	call	0x2764	; 0x2764 <lcdPrint>
#endif
	// Initialize settings
	settingsInit();
     196:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <settingsInit>
	// Get current black reference level of sensor from settings and set it in color tools 
	colorSetBlackReference(settingsGetBlackReference());
     19a:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <settingsGetBlackReference>
     19e:	a2 2e       	mov	r10, r18
     1a0:	b3 2e       	mov	r11, r19
     1a2:	c4 2e       	mov	r12, r20
     1a4:	d5 2e       	mov	r13, r21
     1a6:	e6 2e       	mov	r14, r22
     1a8:	f7 2e       	mov	r15, r23
     1aa:	08 2f       	mov	r16, r24
     1ac:	19 2f       	mov	r17, r25
     1ae:	2a 2d       	mov	r18, r10
     1b0:	3b 2d       	mov	r19, r11
     1b2:	4c 2d       	mov	r20, r12
     1b4:	5d 2d       	mov	r21, r13
     1b6:	6e 2d       	mov	r22, r14
     1b8:	7f 2d       	mov	r23, r15
     1ba:	80 2f       	mov	r24, r16
     1bc:	91 2f       	mov	r25, r17
     1be:	2f 83       	std	Y+7, r18	; 0x07
     1c0:	38 87       	std	Y+8, r19	; 0x08
     1c2:	49 87       	std	Y+9, r20	; 0x09
     1c4:	5a 87       	std	Y+10, r21	; 0x0a
     1c6:	6b 87       	std	Y+11, r22	; 0x0b
     1c8:	7c 87       	std	Y+12, r23	; 0x0c
     1ca:	4f 81       	ldd	r20, Y+7	; 0x07
     1cc:	58 85       	ldd	r21, Y+8	; 0x08
     1ce:	69 85       	ldd	r22, Y+9	; 0x09
     1d0:	7a 85       	ldd	r23, Y+10	; 0x0a
     1d2:	8b 85       	ldd	r24, Y+11	; 0x0b
     1d4:	9c 85       	ldd	r25, Y+12	; 0x0c
     1d6:	0e 94 4e 02 	call	0x49c	; 0x49c <colorSetBlackReference>
	// Get current white reference level of sensor from settings and set it in color tools
	colorSetWhiteReference(settingsGetWhiteReference());
     1da:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <settingsGetWhiteReference>
     1de:	a2 2e       	mov	r10, r18
     1e0:	b3 2e       	mov	r11, r19
     1e2:	c4 2e       	mov	r12, r20
     1e4:	d5 2e       	mov	r13, r21
     1e6:	e6 2e       	mov	r14, r22
     1e8:	f7 2e       	mov	r15, r23
     1ea:	08 2f       	mov	r16, r24
     1ec:	19 2f       	mov	r17, r25
     1ee:	2a 2d       	mov	r18, r10
     1f0:	3b 2d       	mov	r19, r11
     1f2:	4c 2d       	mov	r20, r12
     1f4:	5d 2d       	mov	r21, r13
     1f6:	6e 2d       	mov	r22, r14
     1f8:	7f 2d       	mov	r23, r15
     1fa:	80 2f       	mov	r24, r16
     1fc:	91 2f       	mov	r25, r17
     1fe:	29 83       	std	Y+1, r18	; 0x01
     200:	3a 83       	std	Y+2, r19	; 0x02
     202:	4b 83       	std	Y+3, r20	; 0x03
     204:	5c 83       	std	Y+4, r21	; 0x04
     206:	6d 83       	std	Y+5, r22	; 0x05
     208:	7e 83       	std	Y+6, r23	; 0x06
     20a:	49 81       	ldd	r20, Y+1	; 0x01
     20c:	5a 81       	ldd	r21, Y+2	; 0x02
     20e:	6b 81       	ldd	r22, Y+3	; 0x03
     210:	7c 81       	ldd	r23, Y+4	; 0x04
     212:	8d 81       	ldd	r24, Y+5	; 0x05
     214:	9e 81       	ldd	r25, Y+6	; 0x06
     216:	0e 94 6f 02 	call	0x4de	; 0x4de <colorSetWhiteReference>
	// Get available color models from settings and set them in colorTools for #colorFindNearest function
	colorSetModels(settingsGetColorModels(), settingsGetAvailableColorModels());
     21a:	0e 94 d6 20 	call	0x41ac	; 0x41ac <settingsGetAvailableColorModels>
     21e:	18 2f       	mov	r17, r24
     220:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <settingsGetColorModels>
     224:	61 2f       	mov	r22, r17
     226:	0e 94 90 02 	call	0x520	; 0x520 <colorSetModels>

#ifndef KMCD_NO_DEBUG
	// In case basic debug is enabled
	// Register callback routine for debug LED to blink every 0.5s,
	swtRegisterCallback(SWT_TIMER_0, SWT_USER_DATA(DEBUG_MAIN_PIN), callbackDebugLed);
     22a:	49 e6       	ldi	r20, 0x69	; 105
     22c:	51 e0       	ldi	r21, 0x01	; 1
     22e:	67 e0       	ldi	r22, 0x07	; 7
     230:	70 e0       	ldi	r23, 0x00	; 0
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	0e 94 f7 21 	call	0x43ee	; 0x43ee <swtRegisterCallback>
	// and start the software timer
	swtStart(SWT_TIMER_0, DEBUG_BLINK_INTERVAL);
     238:	64 ef       	ldi	r22, 0xF4	; 244
     23a:	71 e0       	ldi	r23, 0x01	; 1
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	0e 94 a1 22 	call	0x4542	; 0x4542 <swtStart>
#endif
	// Register callback routine for checking if button has been pressed,
	swtRegisterCallback(SWT_TIMER_1, NULL, callbackButton);
     242:	4c e8       	ldi	r20, 0x8C	; 140
     244:	51 e0       	ldi	r21, 0x01	; 1
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	70 e0       	ldi	r23, 0x00	; 0
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	0e 94 f7 21 	call	0x43ee	; 0x43ee <swtRegisterCallback>
	// and start it with period of 20ms
	swtStart(SWT_TIMER_1, BUTTON_CHECK_INTERVAL);
     250:	64 e1       	ldi	r22, 0x14	; 20
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	0e 94 a1 22 	call	0x4542	; 0x4542 <swtStart>
	// Register callback in the Color Sensor to be called when measure is finished.
	tscRegisterCallbackMeasureFinished(callbackSensorMeasureReady, NULL);
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	70 e0       	ldi	r23, 0x00	; 0
     25e:	8e ea       	ldi	r24, 0xAE	; 174
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <tscRegisterCallbackMeasureFinished>
	// Enable interrupts.
	sei();
     266:	78 94       	sei
}
     268:	00 00       	nop
     26a:	2c 96       	adiw	r28, 0x0c	; 12
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	f8 94       	cli
     270:	de bf       	out	0x3e, r29	; 62
     272:	0f be       	out	0x3f, r0	; 63
     274:	cd bf       	out	0x3d, r28	; 61
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	1f 91       	pop	r17
     27c:	0f 91       	pop	r16
     27e:	ff 90       	pop	r15
     280:	ef 90       	pop	r14
     282:	df 90       	pop	r13
     284:	cf 90       	pop	r12
     286:	bf 90       	pop	r11
     288:	af 90       	pop	r10
     28a:	08 95       	ret

0000028c <appLoop>:

void appLoop(void) {
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
	// Loop Software Interrupts
	swtLoop();
     294:	0e 94 61 21 	call	0x42c2	; 0x42c2 <swtLoop>
	// Loop Color Sensor
	tscLoop();
     298:	0e 94 12 18 	call	0x3024	; 0x3024 <tscLoop>
	// Loop Sound Player
	sndLoop();
#endif
	// Button is looped in one of Software Interrupts
	// Check if button has been pressed since last time
	if (true == btnPressed()) {
     29c:	0e 94 3b 02 	call	0x476	; 0x476 <btnPressed>
     2a0:	88 23       	and	r24, r24
     2a2:	99 f0       	breq	.+38     	; 0x2ca <appLoop+0x3e>
		// Reset button state
		btnReset();
     2a4:	0e 94 44 02 	call	0x488	; 0x488 <btnReset>
#ifndef KMCD_NO_DEBUG
		// In case basic LED debug enabled - toggle button LED
		dbToggle(DEBUG_BUTTON_PIN);
     2a8:	86 e0       	ldi	r24, 0x06	; 6
     2aa:	0e 94 9a 06 	call	0xd34	; 0xd34 <dbToggle>
#endif
#ifndef KMCD_NO_LCD
		// In case LCD debug enabled - Show information about measure start
		lcdSetCursor(0, 1);
     2ae:	61 e0       	ldi	r22, 0x01	; 1
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	0e 94 12 13 	call	0x2624	; 0x2624 <lcdSetCursor>
		lcdPrint("Measure Start");
     2b6:	8c e7       	ldi	r24, 0x7C	; 124
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 b2 13 	call	0x2764	; 0x2764 <lcdPrint>
#endif
#ifndef KMCD_NO_SERIAL_DEBUG
		// Send information about measure start to serial debug - if enabled
		serPrintLnString_P(KMCD_MEASURE_START);
     2be:	84 e7       	ldi	r24, 0x74	; 116
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <serPrintLnString_P>
#endif
		// Start measure routine for Color Sensor
		tscStartMeasure();
     2c6:	0e 94 88 18 	call	0x3110	; 0x3110 <tscStartMeasure>
	}
}
     2ca:	00 00       	nop
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <callbackDebugLed>:

// Callbacks
void callbackDebugLed(void *userData, SwtValueType *newTimerValue)  {
     2d2:	cf 93       	push	r28
     2d4:	df 93       	push	r29
     2d6:	00 d0       	rcall	.+0      	; 0x2d8 <callbackDebugLed+0x6>
     2d8:	00 d0       	rcall	.+0      	; 0x2da <callbackDebugLed+0x8>
     2da:	00 d0       	rcall	.+0      	; 0x2dc <callbackDebugLed+0xa>
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
     2e0:	9c 83       	std	Y+4, r25	; 0x04
     2e2:	8b 83       	std	Y+3, r24	; 0x03
     2e4:	7e 83       	std	Y+6, r23	; 0x06
     2e6:	6d 83       	std	Y+5, r22	; 0x05
	// Get led number from user data
	uint16_t ledNo = (uint16_t)userData;
     2e8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ea:	9c 81       	ldd	r25, Y+4	; 0x04
     2ec:	9a 83       	std	Y+2, r25	; 0x02
     2ee:	89 83       	std	Y+1, r24	; 0x01
	// Toggle led with debug functionalities
	dbToggle((uint8_t)ledNo);
     2f0:	89 81       	ldd	r24, Y+1	; 0x01
     2f2:	0e 94 9a 06 	call	0xd34	; 0xd34 <dbToggle>
	// Set new timer interval, so callback is issued for the next time
	*newTimerValue = DEBUG_BLINK_INTERVAL;
     2f6:	8d 81       	ldd	r24, Y+5	; 0x05
     2f8:	9e 81       	ldd	r25, Y+6	; 0x06
     2fa:	24 ef       	ldi	r18, 0xF4	; 244
     2fc:	31 e0       	ldi	r19, 0x01	; 1
     2fe:	fc 01       	movw	r30, r24
     300:	31 83       	std	Z+1, r19	; 0x01
     302:	20 83       	st	Z, r18
}
     304:	00 00       	nop
     306:	26 96       	adiw	r28, 0x06	; 6
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	f8 94       	cli
     30c:	de bf       	out	0x3e, r29	; 62
     30e:	0f be       	out	0x3f, r0	; 63
     310:	cd bf       	out	0x3d, r28	; 61
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	08 95       	ret

00000318 <callbackButton>:

void callbackButton(void *userData, SwtValueType *newTimerValue) {
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	00 d0       	rcall	.+0      	; 0x31e <callbackButton+0x6>
     31e:	00 d0       	rcall	.+0      	; 0x320 <callbackButton+0x8>
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	9a 83       	std	Y+2, r25	; 0x02
     326:	89 83       	std	Y+1, r24	; 0x01
     328:	7c 83       	std	Y+4, r23	; 0x04
     32a:	6b 83       	std	Y+3, r22	; 0x03
	// Process button loop
	btnLoop();
     32c:	0e 94 1e 02 	call	0x43c	; 0x43c <btnLoop>

	if (btnGetState() == false) {
     330:	0e 94 c4 01 	call	0x388	; 0x388 <btnGetState>
     334:	98 2f       	mov	r25, r24
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	89 27       	eor	r24, r25
     33a:	88 23       	and	r24, r24
     33c:	39 f0       	breq	.+14     	; 0x34c <callbackButton+0x34>
		// this if allows to press the button only once
		// restarts timer once measure is ready in callbackMeasureReady
		*newTimerValue = BUTTON_CHECK_INTERVAL;
     33e:	8b 81       	ldd	r24, Y+3	; 0x03
     340:	9c 81       	ldd	r25, Y+4	; 0x04
     342:	24 e1       	ldi	r18, 0x14	; 20
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	fc 01       	movw	r30, r24
     348:	31 83       	std	Z+1, r19	; 0x01
     34a:	20 83       	st	Z, r18
	}
}
     34c:	00 00       	nop
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	0f 90       	pop	r0
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	08 95       	ret

0000035c <callbackSensorMeasureReady>:

void callbackSensorMeasureReady(void *userData) {
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	00 d0       	rcall	.+0      	; 0x362 <callbackSensorMeasureReady+0x6>
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
     366:	9a 83       	std	Y+2, r25	; 0x02
     368:	89 83       	std	Y+1, r24	; 0x01
	// in the DFRobot Mini Player
	sndSetTrack(colorNumber + 1);
#else
#ifndef KMCD_NO_SERIAL_DEBUG
	// Send measure to serial in case serial is enabled
	dbMeasureToSerial();
     36a:	0e 94 c4 06 	call	0xd88	; 0xd88 <dbMeasureToSerial>
#endif
#endif
#ifndef KMCD_NO_LCD
	// Send measure to LCD in case LCD is enabled
	dbMeasureToLCD();
     36e:	0e 94 df 07 	call	0xfbe	; 0xfbe <dbMeasureToLCD>
#endif
	// Re-enable possibility to start measure with button again
	swtStart(SWT_TIMER_1, BUTTON_CHECK_INTERVAL);
     372:	64 e1       	ldi	r22, 0x14	; 20
     374:	70 e0       	ldi	r23, 0x00	; 0
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	0e 94 a1 22 	call	0x4542	; 0x4542 <swtStart>
}
     37c:	00 00       	nop
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	08 95       	ret

00000388 <btnGetState>:
static uint8_t _btnPin = 0;
static bool _btnPreviousState = false;
static bool _btnPressed = false;

// Implementation
bool btnGetState(void) {
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
#ifndef _TESTS_ENV
	return bit_is_clear(BUTTON_PORT_IN, _btnPin);
     390:	83 e3       	ldi	r24, 0x33	; 51
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	fc 01       	movw	r30, r24
     396:	80 81       	ld	r24, Z
     398:	88 2f       	mov	r24, r24
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
     3a0:	22 2f       	mov	r18, r18
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <btnGetState+0x22>
     3a6:	95 95       	asr	r25
     3a8:	87 95       	ror	r24
     3aa:	2a 95       	dec	r18
     3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <btnGetState+0x1e>
     3ae:	81 70       	andi	r24, 0x01	; 1
     3b0:	99 27       	eor	r25, r25
     3b2:	21 e0       	ldi	r18, 0x01	; 1
     3b4:	89 2b       	or	r24, r25
     3b6:	09 f0       	breq	.+2      	; 0x3ba <btnGetState+0x32>
     3b8:	20 e0       	ldi	r18, 0x00	; 0
     3ba:	82 2f       	mov	r24, r18
#else
	return false;
#endif
}
     3bc:	df 91       	pop	r29
     3be:	cf 91       	pop	r28
     3c0:	08 95       	ret

000003c2 <btnInit>:

void btnInit(uint8_t pin) {
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	1f 92       	push	r1
     3c8:	cd b7       	in	r28, 0x3d	; 61
     3ca:	de b7       	in	r29, 0x3e	; 62
     3cc:	89 83       	std	Y+1, r24	; 0x01
	_btnPin = pin;
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
	_btnPreviousState = false;
     3d4:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <_btnPreviousState>
	_btnPressed = false;
     3d8:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <_btnPressed>

	// set button pin as input
	BUTTON_DDR &=~ _BV(_btnPin);
     3dc:	84 e3       	ldi	r24, 0x34	; 52
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	24 e3       	ldi	r18, 0x34	; 52
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	f9 01       	movw	r30, r18
     3e6:	20 81       	ld	r18, Z
     3e8:	62 2f       	mov	r22, r18
     3ea:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
     3ee:	42 2f       	mov	r20, r18
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	21 e0       	ldi	r18, 0x01	; 1
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <btnInit+0x3a>
     3f8:	22 0f       	add	r18, r18
     3fa:	33 1f       	adc	r19, r19
     3fc:	4a 95       	dec	r20
     3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <btnInit+0x36>
     400:	20 95       	com	r18
     402:	26 23       	and	r18, r22
     404:	fc 01       	movw	r30, r24
     406:	20 83       	st	Z, r18
	// pull-up disabled for selected pins cause implemented on HW level
	//BUTTON_PORT &= ~_BV(_btnPin);
	BUTTON_PORT |= _BV(_btnPin);
     408:	85 e3       	ldi	r24, 0x35	; 53
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	25 e3       	ldi	r18, 0x35	; 53
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	f9 01       	movw	r30, r18
     412:	20 81       	ld	r18, Z
     414:	62 2f       	mov	r22, r18
     416:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
     41a:	42 2f       	mov	r20, r18
     41c:	50 e0       	ldi	r21, 0x00	; 0
     41e:	21 e0       	ldi	r18, 0x01	; 1
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	02 c0       	rjmp	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     424:	22 0f       	add	r18, r18
     426:	33 1f       	adc	r19, r19
     428:	4a 95       	dec	r20
     42a:	e2 f7       	brpl	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     42c:	26 2b       	or	r18, r22
     42e:	fc 01       	movw	r30, r24
     430:	20 83       	st	Z, r18
}
     432:	00 00       	nop
     434:	0f 90       	pop	r0
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	08 95       	ret

0000043c <btnLoop>:

void btnLoop(void) {
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	1f 92       	push	r1
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
	bool currentState = btnGetState();
     446:	0e 94 c4 01 	call	0x388	; 0x388 <btnGetState>
     44a:	89 83       	std	Y+1, r24	; 0x01
	if (currentState != _btnPreviousState) {
     44c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_btnPreviousState>
     450:	99 81       	ldd	r25, Y+1	; 0x01
     452:	98 17       	cp	r25, r24
     454:	59 f0       	breq	.+22     	; 0x46c <btnLoop+0x30>
		if (currentState == false) {
     456:	99 81       	ldd	r25, Y+1	; 0x01
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	89 27       	eor	r24, r25
     45c:	88 23       	and	r24, r24
     45e:	19 f0       	breq	.+6      	; 0x466 <btnLoop+0x2a>
			_btnPressed = true;
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_btnPressed>
		}
		_btnPreviousState = currentState;
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <_btnPreviousState>
	}
}
     46c:	00 00       	nop
     46e:	0f 90       	pop	r0
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <btnPressed>:

bool btnPressed(void) {
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
	return _btnPressed;
     47e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_btnPressed>
}
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	08 95       	ret

00000488 <btnReset>:

void btnReset(void) {
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	cd b7       	in	r28, 0x3d	; 61
     48e:	de b7       	in	r29, 0x3e	; 62
	_btnPressed = false;
     490:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <_btnPressed>
}
     494:	00 00       	nop
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	08 95       	ret

0000049c <colorSetBlackReference>:
// "private" functions
int32_t colorPow2(int32_t value);
uint8_t colorNormalizeSingle(uint16_t source, uint16_t sourceBlackLevel, uint16_t sourceWhiteLevel);

// Implementation
void colorSetBlackReference(RgbColor16_t blackLevel) {
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <colorSetBlackReference+0x6>
     4a2:	00 d0       	rcall	.+0      	; 0x4a4 <colorSetBlackReference+0x8>
     4a4:	00 d0       	rcall	.+0      	; 0x4a6 <colorSetBlackReference+0xa>
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
     4aa:	49 83       	std	Y+1, r20	; 0x01
     4ac:	5a 83       	std	Y+2, r21	; 0x02
     4ae:	6b 83       	std	Y+3, r22	; 0x03
     4b0:	7c 83       	std	Y+4, r23	; 0x04
     4b2:	8d 83       	std	Y+5, r24	; 0x05
     4b4:	9e 83       	std	Y+6, r25	; 0x06
	_blackLevel = blackLevel;
     4b6:	26 e0       	ldi	r18, 0x06	; 6
     4b8:	ce 01       	movw	r24, r28
     4ba:	01 96       	adiw	r24, 0x01	; 1
     4bc:	fc 01       	movw	r30, r24
     4be:	ab e1       	ldi	r26, 0x1B	; 27
     4c0:	b1 e0       	ldi	r27, 0x01	; 1
     4c2:	01 90       	ld	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	2a 95       	dec	r18
     4c8:	e1 f7       	brne	.-8      	; 0x4c2 <colorSetBlackReference+0x26>
}
     4ca:	00 00       	nop
     4cc:	26 96       	adiw	r28, 0x06	; 6
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	de bf       	out	0x3e, r29	; 62
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	cd bf       	out	0x3d, r28	; 61
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	08 95       	ret

000004de <colorSetWhiteReference>:

void colorSetWhiteReference(RgbColor16_t whiteLevel) {
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	00 d0       	rcall	.+0      	; 0x4e4 <colorSetWhiteReference+0x6>
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <colorSetWhiteReference+0x8>
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <colorSetWhiteReference+0xa>
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
     4ec:	49 83       	std	Y+1, r20	; 0x01
     4ee:	5a 83       	std	Y+2, r21	; 0x02
     4f0:	6b 83       	std	Y+3, r22	; 0x03
     4f2:	7c 83       	std	Y+4, r23	; 0x04
     4f4:	8d 83       	std	Y+5, r24	; 0x05
     4f6:	9e 83       	std	Y+6, r25	; 0x06
	_whiteLevel = whiteLevel;
     4f8:	26 e0       	ldi	r18, 0x06	; 6
     4fa:	ce 01       	movw	r24, r28
     4fc:	01 96       	adiw	r24, 0x01	; 1
     4fe:	fc 01       	movw	r30, r24
     500:	a1 e2       	ldi	r26, 0x21	; 33
     502:	b1 e0       	ldi	r27, 0x01	; 1
     504:	01 90       	ld	r0, Z+
     506:	0d 92       	st	X+, r0
     508:	2a 95       	dec	r18
     50a:	e1 f7       	brne	.-8      	; 0x504 <colorSetWhiteReference+0x26>
}
     50c:	00 00       	nop
     50e:	26 96       	adiw	r28, 0x06	; 6
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	de bf       	out	0x3e, r29	; 62
     516:	0f be       	out	0x3f, r0	; 63
     518:	cd bf       	out	0x3d, r28	; 61
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	08 95       	ret

00000520 <colorSetModels>:

void colorSetModels(const RgbColor8_t *colorModels, uint8_t colorModelsAvailable) {
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	00 d0       	rcall	.+0      	; 0x526 <colorSetModels+0x6>
     526:	1f 92       	push	r1
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	9a 83       	std	Y+2, r25	; 0x02
     52e:	89 83       	std	Y+1, r24	; 0x01
     530:	6b 83       	std	Y+3, r22	; 0x03
	_colorModels = colorModels;
     532:	89 81       	ldd	r24, Y+1	; 0x01
     534:	9a 81       	ldd	r25, Y+2	; 0x02
     536:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <_colorModels+0x1>
     53a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_colorModels>
	_colorModelsSizeOf = colorModelsAvailable;
     53e:	8b 81       	ldd	r24, Y+3	; 0x03
     540:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <_colorModelsSizeOf>
}
     544:	00 00       	nop
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	08 95       	ret

00000552 <colorNormalizeSingle>:

uint8_t colorNormalizeSingle(uint16_t source, uint16_t sourceBlackLevel, uint16_t sourceWhiteLevel) {
     552:	ef 92       	push	r14
     554:	ff 92       	push	r15
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
     562:	2a 97       	sbiw	r28, 0x0a	; 10
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	f8 94       	cli
     568:	de bf       	out	0x3e, r29	; 62
     56a:	0f be       	out	0x3f, r0	; 63
     56c:	cd bf       	out	0x3d, r28	; 61
     56e:	9e 83       	std	Y+6, r25	; 0x06
     570:	8d 83       	std	Y+5, r24	; 0x05
     572:	78 87       	std	Y+8, r23	; 0x08
     574:	6f 83       	std	Y+7, r22	; 0x07
     576:	5a 87       	std	Y+10, r21	; 0x0a
     578:	49 87       	std	Y+9, r20	; 0x09
	// (source - sourceBlackLevel) * COLOR_NORMAL_RESULT_RANGE
	// ------------------------------------------------------- + COLOR_NORMAL_RESULT_BLACK_LEVEL
	//          (sourceWhiteLevel - sourceBlackLevel);
	// where COLOR_NORMAL_RESULT_RANGE = COLOR_NORMAL_RESULT_WHITE_LEVEL - COLOR_NORMAL_RESULT_BLACK_LEVEL

	int32_t tmp = source;
     57a:	8d 81       	ldd	r24, Y+5	; 0x05
     57c:	9e 81       	ldd	r25, Y+6	; 0x06
     57e:	cc 01       	movw	r24, r24
     580:	a0 e0       	ldi	r26, 0x00	; 0
     582:	b0 e0       	ldi	r27, 0x00	; 0
     584:	89 83       	std	Y+1, r24	; 0x01
     586:	9a 83       	std	Y+2, r25	; 0x02
     588:	ab 83       	std	Y+3, r26	; 0x03
     58a:	bc 83       	std	Y+4, r27	; 0x04
	tmp -= sourceBlackLevel;
     58c:	8f 81       	ldd	r24, Y+7	; 0x07
     58e:	98 85       	ldd	r25, Y+8	; 0x08
     590:	cc 01       	movw	r24, r24
     592:	a0 e0       	ldi	r26, 0x00	; 0
     594:	b0 e0       	ldi	r27, 0x00	; 0
     596:	29 81       	ldd	r18, Y+1	; 0x01
     598:	3a 81       	ldd	r19, Y+2	; 0x02
     59a:	4b 81       	ldd	r20, Y+3	; 0x03
     59c:	5c 81       	ldd	r21, Y+4	; 0x04
     59e:	79 01       	movw	r14, r18
     5a0:	8a 01       	movw	r16, r20
     5a2:	e8 1a       	sub	r14, r24
     5a4:	f9 0a       	sbc	r15, r25
     5a6:	0a 0b       	sbc	r16, r26
     5a8:	1b 0b       	sbc	r17, r27
     5aa:	d8 01       	movw	r26, r16
     5ac:	c7 01       	movw	r24, r14
     5ae:	89 83       	std	Y+1, r24	; 0x01
     5b0:	9a 83       	std	Y+2, r25	; 0x02
     5b2:	ab 83       	std	Y+3, r26	; 0x03
     5b4:	bc 83       	std	Y+4, r27	; 0x04
	tmp *= COLOR_NORMAL_RESULT_RANGE;
     5b6:	29 81       	ldd	r18, Y+1	; 0x01
     5b8:	3a 81       	ldd	r19, Y+2	; 0x02
     5ba:	4b 81       	ldd	r20, Y+3	; 0x03
     5bc:	5c 81       	ldd	r21, Y+4	; 0x04
     5be:	80 ee       	ldi	r24, 0xE0	; 224
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	dc 01       	movw	r26, r24
     5c4:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <__muluhisi3>
     5c8:	dc 01       	movw	r26, r24
     5ca:	cb 01       	movw	r24, r22
     5cc:	89 83       	std	Y+1, r24	; 0x01
     5ce:	9a 83       	std	Y+2, r25	; 0x02
     5d0:	ab 83       	std	Y+3, r26	; 0x03
     5d2:	bc 83       	std	Y+4, r27	; 0x04
	tmp /= (sourceWhiteLevel - sourceBlackLevel);
     5d4:	29 85       	ldd	r18, Y+9	; 0x09
     5d6:	3a 85       	ldd	r19, Y+10	; 0x0a
     5d8:	8f 81       	ldd	r24, Y+7	; 0x07
     5da:	98 85       	ldd	r25, Y+8	; 0x08
     5dc:	89 01       	movw	r16, r18
     5de:	08 1b       	sub	r16, r24
     5e0:	19 0b       	sbc	r17, r25
     5e2:	c8 01       	movw	r24, r16
     5e4:	9c 01       	movw	r18, r24
     5e6:	40 e0       	ldi	r20, 0x00	; 0
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
     5ec:	9a 81       	ldd	r25, Y+2	; 0x02
     5ee:	ab 81       	ldd	r26, Y+3	; 0x03
     5f0:	bc 81       	ldd	r27, Y+4	; 0x04
     5f2:	bc 01       	movw	r22, r24
     5f4:	cd 01       	movw	r24, r26
     5f6:	0e 94 ff 2d 	call	0x5bfe	; 0x5bfe <__divmodsi4>
     5fa:	da 01       	movw	r26, r20
     5fc:	c9 01       	movw	r24, r18
     5fe:	89 83       	std	Y+1, r24	; 0x01
     600:	9a 83       	std	Y+2, r25	; 0x02
     602:	ab 83       	std	Y+3, r26	; 0x03
     604:	bc 83       	std	Y+4, r27	; 0x04
	tmp += COLOR_NORMAL_RESULT_BLACK_LEVEL;
     606:	89 81       	ldd	r24, Y+1	; 0x01
     608:	9a 81       	ldd	r25, Y+2	; 0x02
     60a:	ab 81       	ldd	r26, Y+3	; 0x03
     60c:	bc 81       	ldd	r27, Y+4	; 0x04
     60e:	40 96       	adiw	r24, 0x10	; 16
     610:	a1 1d       	adc	r26, r1
     612:	b1 1d       	adc	r27, r1
     614:	89 83       	std	Y+1, r24	; 0x01
     616:	9a 83       	std	Y+2, r25	; 0x02
     618:	ab 83       	std	Y+3, r26	; 0x03
     61a:	bc 83       	std	Y+4, r27	; 0x04
	tmp = tmp < 0x00 ? 0 : tmp;
     61c:	89 81       	ldd	r24, Y+1	; 0x01
     61e:	9a 81       	ldd	r25, Y+2	; 0x02
     620:	ab 81       	ldd	r26, Y+3	; 0x03
     622:	bc 81       	ldd	r27, Y+4	; 0x04
     624:	bb 23       	and	r27, r27
     626:	1c f4       	brge	.+6      	; 0x62e <colorNormalizeSingle+0xdc>
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	dc 01       	movw	r26, r24
     62e:	89 83       	std	Y+1, r24	; 0x01
     630:	9a 83       	std	Y+2, r25	; 0x02
     632:	ab 83       	std	Y+3, r26	; 0x03
     634:	bc 83       	std	Y+4, r27	; 0x04
	tmp = tmp > 0xFF ? 0xFF : tmp;
     636:	89 81       	ldd	r24, Y+1	; 0x01
     638:	9a 81       	ldd	r25, Y+2	; 0x02
     63a:	ab 81       	ldd	r26, Y+3	; 0x03
     63c:	bc 81       	ldd	r27, Y+4	; 0x04
     63e:	8f 3f       	cpi	r24, 0xFF	; 255
     640:	91 05       	cpc	r25, r1
     642:	a1 05       	cpc	r26, r1
     644:	b1 05       	cpc	r27, r1
     646:	29 f0       	breq	.+10     	; 0x652 <colorNormalizeSingle+0x100>
     648:	24 f0       	brlt	.+8      	; 0x652 <colorNormalizeSingle+0x100>
     64a:	8f ef       	ldi	r24, 0xFF	; 255
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	a0 e0       	ldi	r26, 0x00	; 0
     650:	b0 e0       	ldi	r27, 0x00	; 0
     652:	89 83       	std	Y+1, r24	; 0x01
     654:	9a 83       	std	Y+2, r25	; 0x02
     656:	ab 83       	std	Y+3, r26	; 0x03
     658:	bc 83       	std	Y+4, r27	; 0x04
	return (uint8_t)tmp;
     65a:	89 81       	ldd	r24, Y+1	; 0x01
}
     65c:	2a 96       	adiw	r28, 0x0a	; 10
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	de bf       	out	0x3e, r29	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	cd bf       	out	0x3d, r28	; 61
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	ff 90       	pop	r15
     672:	ef 90       	pop	r14
     674:	08 95       	ret

00000676 <colorPow2>:

int32_t colorPow2(int32_t value) {
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	00 d0       	rcall	.+0      	; 0x67c <colorPow2+0x6>
     67c:	00 d0       	rcall	.+0      	; 0x67e <colorPow2+0x8>
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
     682:	69 83       	std	Y+1, r22	; 0x01
     684:	7a 83       	std	Y+2, r23	; 0x02
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	9c 83       	std	Y+4, r25	; 0x04
	return value * value;
     68a:	29 81       	ldd	r18, Y+1	; 0x01
     68c:	3a 81       	ldd	r19, Y+2	; 0x02
     68e:	4b 81       	ldd	r20, Y+3	; 0x03
     690:	5c 81       	ldd	r21, Y+4	; 0x04
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	9a 81       	ldd	r25, Y+2	; 0x02
     696:	ab 81       	ldd	r26, Y+3	; 0x03
     698:	bc 81       	ldd	r27, Y+4	; 0x04
     69a:	bc 01       	movw	r22, r24
     69c:	cd 01       	movw	r24, r26
     69e:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <__mulsi3>
     6a2:	dc 01       	movw	r26, r24
     6a4:	cb 01       	movw	r24, r22
}
     6a6:	bc 01       	movw	r22, r24
     6a8:	cd 01       	movw	r24, r26
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	08 95       	ret

000006b8 <colorDifferenceErrorRGB>:

uint32_t colorDifferenceErrorRGB(RgbColor8_t sourceColor, RgbColor8_t modelColor) {
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	cd b7       	in	r28, 0x3d	; 61
     6be:	de b7       	in	r29, 0x3e	; 62
     6c0:	2a 97       	sbiw	r28, 0x0a	; 10
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	de bf       	out	0x3e, r29	; 62
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	cd bf       	out	0x3d, r28	; 61
     6cc:	6d 83       	std	Y+5, r22	; 0x05
     6ce:	7e 83       	std	Y+6, r23	; 0x06
     6d0:	8f 83       	std	Y+7, r24	; 0x07
     6d2:	28 87       	std	Y+8, r18	; 0x08
     6d4:	39 87       	std	Y+9, r19	; 0x09
     6d6:	4a 87       	std	Y+10, r20	; 0x0a
	uint32_t result = 0;
     6d8:	19 82       	std	Y+1, r1	; 0x01
     6da:	1a 82       	std	Y+2, r1	; 0x02
     6dc:	1b 82       	std	Y+3, r1	; 0x03
     6de:	1c 82       	std	Y+4, r1	; 0x04
	result += (uint32_t)(colorPow2(abs((int16_t)sourceColor.r - (int16_t)modelColor.r)));
     6e0:	8d 81       	ldd	r24, Y+5	; 0x05
     6e2:	28 2f       	mov	r18, r24
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	88 85       	ldd	r24, Y+8	; 0x08
     6e8:	88 2f       	mov	r24, r24
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	a9 01       	movw	r20, r18
     6ee:	48 1b       	sub	r20, r24
     6f0:	59 0b       	sbc	r21, r25
     6f2:	ca 01       	movw	r24, r20
     6f4:	99 23       	and	r25, r25
     6f6:	1c f4       	brge	.+6      	; 0x6fe <colorDifferenceErrorRGB+0x46>
     6f8:	91 95       	neg	r25
     6fa:	81 95       	neg	r24
     6fc:	91 09       	sbc	r25, r1
     6fe:	09 2e       	mov	r0, r25
     700:	00 0c       	add	r0, r0
     702:	aa 0b       	sbc	r26, r26
     704:	bb 0b       	sbc	r27, r27
     706:	bc 01       	movw	r22, r24
     708:	cd 01       	movw	r24, r26
     70a:	0e 94 3b 03 	call	0x676	; 0x676 <colorPow2>
     70e:	dc 01       	movw	r26, r24
     710:	cb 01       	movw	r24, r22
     712:	9c 01       	movw	r18, r24
     714:	ad 01       	movw	r20, r26
     716:	89 81       	ldd	r24, Y+1	; 0x01
     718:	9a 81       	ldd	r25, Y+2	; 0x02
     71a:	ab 81       	ldd	r26, Y+3	; 0x03
     71c:	bc 81       	ldd	r27, Y+4	; 0x04
     71e:	82 0f       	add	r24, r18
     720:	93 1f       	adc	r25, r19
     722:	a4 1f       	adc	r26, r20
     724:	b5 1f       	adc	r27, r21
     726:	89 83       	std	Y+1, r24	; 0x01
     728:	9a 83       	std	Y+2, r25	; 0x02
     72a:	ab 83       	std	Y+3, r26	; 0x03
     72c:	bc 83       	std	Y+4, r27	; 0x04
	result += (uint32_t)(colorPow2(abs((int32_t)sourceColor.g - (int32_t)modelColor.g)));
     72e:	8e 81       	ldd	r24, Y+6	; 0x06
     730:	28 2f       	mov	r18, r24
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	89 85       	ldd	r24, Y+9	; 0x09
     736:	88 2f       	mov	r24, r24
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	a9 01       	movw	r20, r18
     73c:	48 1b       	sub	r20, r24
     73e:	59 0b       	sbc	r21, r25
     740:	ca 01       	movw	r24, r20
     742:	99 23       	and	r25, r25
     744:	1c f4       	brge	.+6      	; 0x74c <colorDifferenceErrorRGB+0x94>
     746:	91 95       	neg	r25
     748:	81 95       	neg	r24
     74a:	91 09       	sbc	r25, r1
     74c:	09 2e       	mov	r0, r25
     74e:	00 0c       	add	r0, r0
     750:	aa 0b       	sbc	r26, r26
     752:	bb 0b       	sbc	r27, r27
     754:	bc 01       	movw	r22, r24
     756:	cd 01       	movw	r24, r26
     758:	0e 94 3b 03 	call	0x676	; 0x676 <colorPow2>
     75c:	dc 01       	movw	r26, r24
     75e:	cb 01       	movw	r24, r22
     760:	9c 01       	movw	r18, r24
     762:	ad 01       	movw	r20, r26
     764:	89 81       	ldd	r24, Y+1	; 0x01
     766:	9a 81       	ldd	r25, Y+2	; 0x02
     768:	ab 81       	ldd	r26, Y+3	; 0x03
     76a:	bc 81       	ldd	r27, Y+4	; 0x04
     76c:	82 0f       	add	r24, r18
     76e:	93 1f       	adc	r25, r19
     770:	a4 1f       	adc	r26, r20
     772:	b5 1f       	adc	r27, r21
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	9a 83       	std	Y+2, r25	; 0x02
     778:	ab 83       	std	Y+3, r26	; 0x03
     77a:	bc 83       	std	Y+4, r27	; 0x04
	result += (uint32_t)(colorPow2(abs((int32_t)sourceColor.b - (int32_t)modelColor.b)));
     77c:	8f 81       	ldd	r24, Y+7	; 0x07
     77e:	28 2f       	mov	r18, r24
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	8a 85       	ldd	r24, Y+10	; 0x0a
     784:	88 2f       	mov	r24, r24
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	a9 01       	movw	r20, r18
     78a:	48 1b       	sub	r20, r24
     78c:	59 0b       	sbc	r21, r25
     78e:	ca 01       	movw	r24, r20
     790:	99 23       	and	r25, r25
     792:	1c f4       	brge	.+6      	; 0x79a <colorDifferenceErrorRGB+0xe2>
     794:	91 95       	neg	r25
     796:	81 95       	neg	r24
     798:	91 09       	sbc	r25, r1
     79a:	09 2e       	mov	r0, r25
     79c:	00 0c       	add	r0, r0
     79e:	aa 0b       	sbc	r26, r26
     7a0:	bb 0b       	sbc	r27, r27
     7a2:	bc 01       	movw	r22, r24
     7a4:	cd 01       	movw	r24, r26
     7a6:	0e 94 3b 03 	call	0x676	; 0x676 <colorPow2>
     7aa:	dc 01       	movw	r26, r24
     7ac:	cb 01       	movw	r24, r22
     7ae:	9c 01       	movw	r18, r24
     7b0:	ad 01       	movw	r20, r26
     7b2:	89 81       	ldd	r24, Y+1	; 0x01
     7b4:	9a 81       	ldd	r25, Y+2	; 0x02
     7b6:	ab 81       	ldd	r26, Y+3	; 0x03
     7b8:	bc 81       	ldd	r27, Y+4	; 0x04
     7ba:	82 0f       	add	r24, r18
     7bc:	93 1f       	adc	r25, r19
     7be:	a4 1f       	adc	r26, r20
     7c0:	b5 1f       	adc	r27, r21
     7c2:	89 83       	std	Y+1, r24	; 0x01
     7c4:	9a 83       	std	Y+2, r25	; 0x02
     7c6:	ab 83       	std	Y+3, r26	; 0x03
     7c8:	bc 83       	std	Y+4, r27	; 0x04
	return result;
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	9a 81       	ldd	r25, Y+2	; 0x02
     7ce:	ab 81       	ldd	r26, Y+3	; 0x03
     7d0:	bc 81       	ldd	r27, Y+4	; 0x04
}
     7d2:	bc 01       	movw	r22, r24
     7d4:	cd 01       	movw	r24, r26
     7d6:	2a 96       	adiw	r28, 0x0a	; 10
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	cd bf       	out	0x3d, r28	; 61
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	08 95       	ret

000007e8 <colorFindNearest>:

uint8_t colorFindNearest(RgbColor8_t sourceColor) {
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
     7f0:	2d 97       	sbiw	r28, 0x0d	; 13
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	cd bf       	out	0x3d, r28	; 61
     7fc:	6b 87       	std	Y+11, r22	; 0x0b
     7fe:	7c 87       	std	Y+12, r23	; 0x0c
     800:	8d 87       	std	Y+13, r24	; 0x0d
	uint32_t minDifference = UINT32_MAX;
     802:	8f ef       	ldi	r24, 0xFF	; 255
     804:	9f ef       	ldi	r25, 0xFF	; 255
     806:	dc 01       	movw	r26, r24
     808:	89 83       	std	Y+1, r24	; 0x01
     80a:	9a 83       	std	Y+2, r25	; 0x02
     80c:	ab 83       	std	Y+3, r26	; 0x03
     80e:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t colorDifference = 0;
     810:	1f 82       	std	Y+7, r1	; 0x07
     812:	18 86       	std	Y+8, r1	; 0x08
     814:	19 86       	std	Y+9, r1	; 0x09
     816:	1a 86       	std	Y+10, r1	; 0x0a
	uint8_t result = 0;
     818:	1d 82       	std	Y+5, r1	; 0x05
	for (uint8_t i = 0; i < _colorModelsSizeOf; i++) {
     81a:	1e 82       	std	Y+6, r1	; 0x06
     81c:	39 c0       	rjmp	.+114    	; 0x890 <__stack+0x31>
		colorDifference = colorDifferenceErrorRGB(sourceColor, _colorModels[i]);
     81e:	40 91 27 01 	lds	r20, 0x0127	; 0x800127 <_colorModels>
     822:	50 91 28 01 	lds	r21, 0x0128	; 0x800128 <_colorModels+0x1>
     826:	8e 81       	ldd	r24, Y+6	; 0x06
     828:	28 2f       	mov	r18, r24
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	c9 01       	movw	r24, r18
     82e:	88 0f       	add	r24, r24
     830:	99 1f       	adc	r25, r25
     832:	82 0f       	add	r24, r18
     834:	93 1f       	adc	r25, r19
     836:	84 0f       	add	r24, r20
     838:	95 1f       	adc	r25, r21
     83a:	fc 01       	movw	r30, r24
     83c:	20 81       	ld	r18, Z
     83e:	31 81       	ldd	r19, Z+1	; 0x01
     840:	42 81       	ldd	r20, Z+2	; 0x02
     842:	8b 85       	ldd	r24, Y+11	; 0x0b
     844:	9c 85       	ldd	r25, Y+12	; 0x0c
     846:	ad 85       	ldd	r26, Y+13	; 0x0d
     848:	bc 01       	movw	r22, r24
     84a:	8a 2f       	mov	r24, r26
     84c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <colorDifferenceErrorRGB>
     850:	dc 01       	movw	r26, r24
     852:	cb 01       	movw	r24, r22
     854:	8f 83       	std	Y+7, r24	; 0x07
     856:	98 87       	std	Y+8, r25	; 0x08
     858:	a9 87       	std	Y+9, r26	; 0x09
     85a:	ba 87       	std	Y+10, r27	; 0x0a
		if (colorDifference < minDifference) {
     85c:	2f 81       	ldd	r18, Y+7	; 0x07
     85e:	38 85       	ldd	r19, Y+8	; 0x08
     860:	49 85       	ldd	r20, Y+9	; 0x09
     862:	5a 85       	ldd	r21, Y+10	; 0x0a
     864:	89 81       	ldd	r24, Y+1	; 0x01
     866:	9a 81       	ldd	r25, Y+2	; 0x02
     868:	ab 81       	ldd	r26, Y+3	; 0x03
     86a:	bc 81       	ldd	r27, Y+4	; 0x04
     86c:	28 17       	cp	r18, r24
     86e:	39 07       	cpc	r19, r25
     870:	4a 07       	cpc	r20, r26
     872:	5b 07       	cpc	r21, r27
     874:	50 f4       	brcc	.+20     	; 0x88a <__stack+0x2b>
			minDifference = colorDifference;
     876:	8f 81       	ldd	r24, Y+7	; 0x07
     878:	98 85       	ldd	r25, Y+8	; 0x08
     87a:	a9 85       	ldd	r26, Y+9	; 0x09
     87c:	ba 85       	ldd	r27, Y+10	; 0x0a
     87e:	89 83       	std	Y+1, r24	; 0x01
     880:	9a 83       	std	Y+2, r25	; 0x02
     882:	ab 83       	std	Y+3, r26	; 0x03
     884:	bc 83       	std	Y+4, r27	; 0x04
			result = i;
     886:	8e 81       	ldd	r24, Y+6	; 0x06
     888:	8d 83       	std	Y+5, r24	; 0x05

uint8_t colorFindNearest(RgbColor8_t sourceColor) {
	uint32_t minDifference = UINT32_MAX;
	uint32_t colorDifference = 0;
	uint8_t result = 0;
	for (uint8_t i = 0; i < _colorModelsSizeOf; i++) {
     88a:	8e 81       	ldd	r24, Y+6	; 0x06
     88c:	8f 5f       	subi	r24, 0xFF	; 255
     88e:	8e 83       	std	Y+6, r24	; 0x06
     890:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <_colorModelsSizeOf>
     894:	9e 81       	ldd	r25, Y+6	; 0x06
     896:	98 17       	cp	r25, r24
     898:	10 f2       	brcs	.-124    	; 0x81e <colorFindNearest+0x36>
		if (colorDifference < minDifference) {
			minDifference = colorDifference;
			result = i;
		}
	}
	return result;
     89a:	8d 81       	ldd	r24, Y+5	; 0x05
}
     89c:	2d 96       	adiw	r28, 0x0d	; 13
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <colorNormalize>:

RgbColor8_t colorNormalize(RgbColor16_t sourceColor) {
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	29 97       	sbiw	r28, 0x09	; 9
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	cd bf       	out	0x3d, r28	; 61
     8c2:	4c 83       	std	Y+4, r20	; 0x04
     8c4:	5d 83       	std	Y+5, r21	; 0x05
     8c6:	6e 83       	std	Y+6, r22	; 0x06
     8c8:	7f 83       	std	Y+7, r23	; 0x07
     8ca:	88 87       	std	Y+8, r24	; 0x08
     8cc:	99 87       	std	Y+9, r25	; 0x09
	RgbColor8_t result;
	result.r = colorNormalizeSingle(sourceColor.r, _blackLevel.r, _whiteLevel.r);
     8ce:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <_whiteLevel>
     8d2:	50 91 22 01 	lds	r21, 0x0122	; 0x800122 <_whiteLevel+0x1>
     8d6:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <_blackLevel>
     8da:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <_blackLevel+0x1>
     8de:	8c 81       	ldd	r24, Y+4	; 0x04
     8e0:	9d 81       	ldd	r25, Y+5	; 0x05
     8e2:	b9 01       	movw	r22, r18
     8e4:	0e 94 a9 02 	call	0x552	; 0x552 <colorNormalizeSingle>
     8e8:	89 83       	std	Y+1, r24	; 0x01
	result.g = colorNormalizeSingle(sourceColor.g, _blackLevel.g, _whiteLevel.g);
     8ea:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <_whiteLevel+0x2>
     8ee:	50 91 24 01 	lds	r21, 0x0124	; 0x800124 <_whiteLevel+0x3>
     8f2:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <_blackLevel+0x2>
     8f6:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <_blackLevel+0x3>
     8fa:	8e 81       	ldd	r24, Y+6	; 0x06
     8fc:	9f 81       	ldd	r25, Y+7	; 0x07
     8fe:	b9 01       	movw	r22, r18
     900:	0e 94 a9 02 	call	0x552	; 0x552 <colorNormalizeSingle>
     904:	8a 83       	std	Y+2, r24	; 0x02
	result.b = colorNormalizeSingle(sourceColor.b, _blackLevel.b, _whiteLevel.b);
     906:	40 91 25 01 	lds	r20, 0x0125	; 0x800125 <_whiteLevel+0x4>
     90a:	50 91 26 01 	lds	r21, 0x0126	; 0x800126 <_whiteLevel+0x5>
     90e:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <_blackLevel+0x4>
     912:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <_blackLevel+0x5>
     916:	88 85       	ldd	r24, Y+8	; 0x08
     918:	99 85       	ldd	r25, Y+9	; 0x09
     91a:	b9 01       	movw	r22, r18
     91c:	0e 94 a9 02 	call	0x552	; 0x552 <colorNormalizeSingle>
     920:	8b 83       	std	Y+3, r24	; 0x03
	return result;
     922:	89 81       	ldd	r24, Y+1	; 0x01
     924:	9a 81       	ldd	r25, Y+2	; 0x02
     926:	ab 81       	ldd	r26, Y+3	; 0x03
}
     928:	bc 01       	movw	r22, r24
     92a:	8a 2f       	mov	r24, r26
     92c:	29 96       	adiw	r28, 0x09	; 9
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	de bf       	out	0x3e, r29	; 62
     934:	0f be       	out	0x3f, r0	; 63
     936:	cd bf       	out	0x3d, r28	; 61
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	08 95       	ret

0000093e <colorHsvToRgb>:

RgbColor8_t colorHsvToRgb(HsvColor8_t hsv) {
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	cd b7       	in	r28, 0x3d	; 61
     944:	de b7       	in	r29, 0x3e	; 62
     946:	62 97       	sbiw	r28, 0x12	; 18
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	f8 94       	cli
     94c:	de bf       	out	0x3e, r29	; 62
     94e:	0f be       	out	0x3f, r0	; 63
     950:	cd bf       	out	0x3d, r28	; 61
     952:	68 8b       	std	Y+16, r22	; 0x10
     954:	79 8b       	std	Y+17, r23	; 0x11
     956:	8a 8b       	std	Y+18, r24	; 0x12
	RgbColor8_t rgb;
	uint8_t region, p, q, t;
	uint16_t h, s, v, remainder;

	if (hsv.s == 0) {
     958:	89 89       	ldd	r24, Y+17	; 0x11
     95a:	88 23       	and	r24, r24
     95c:	51 f4       	brne	.+20     	; 0x972 <colorHsvToRgb+0x34>
		rgb.r = hsv.v;
     95e:	8a 89       	ldd	r24, Y+18	; 0x12
     960:	8d 87       	std	Y+13, r24	; 0x0d
		rgb.g = hsv.v;
     962:	8a 89       	ldd	r24, Y+18	; 0x12
     964:	8e 87       	std	Y+14, r24	; 0x0e
		rgb.b = hsv.v;
     966:	8a 89       	ldd	r24, Y+18	; 0x12
     968:	8f 87       	std	Y+15, r24	; 0x0f
		return rgb;
     96a:	8d 85       	ldd	r24, Y+13	; 0x0d
     96c:	9e 85       	ldd	r25, Y+14	; 0x0e
     96e:	af 85       	ldd	r26, Y+15	; 0x0f
     970:	cb c0       	rjmp	.+406    	; 0xb08 <colorHsvToRgb+0x1ca>
	}

	// converting to 16 bit to prevent overflow
	h = hsv.h;
     972:	88 89       	ldd	r24, Y+16	; 0x10
     974:	88 2f       	mov	r24, r24
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	9a 83       	std	Y+2, r25	; 0x02
     97a:	89 83       	std	Y+1, r24	; 0x01
	s = hsv.s;
     97c:	89 89       	ldd	r24, Y+17	; 0x11
     97e:	88 2f       	mov	r24, r24
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	9c 83       	std	Y+4, r25	; 0x04
     984:	8b 83       	std	Y+3, r24	; 0x03
	v = hsv.v;
     986:	8a 89       	ldd	r24, Y+18	; 0x12
     988:	88 2f       	mov	r24, r24
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	9e 83       	std	Y+6, r25	; 0x06
     98e:	8d 83       	std	Y+5, r24	; 0x05

	region = h / 43;
     990:	89 81       	ldd	r24, Y+1	; 0x01
     992:	9a 81       	ldd	r25, Y+2	; 0x02
     994:	9c 01       	movw	r18, r24
     996:	a3 e8       	ldi	r26, 0x83	; 131
     998:	be eb       	ldi	r27, 0xBE	; 190
     99a:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <__umulhisi3>
     99e:	96 95       	lsr	r25
     9a0:	87 95       	ror	r24
     9a2:	92 95       	swap	r25
     9a4:	82 95       	swap	r24
     9a6:	8f 70       	andi	r24, 0x0F	; 15
     9a8:	89 27       	eor	r24, r25
     9aa:	9f 70       	andi	r25, 0x0F	; 15
     9ac:	89 27       	eor	r24, r25
     9ae:	8f 83       	std	Y+7, r24	; 0x07
	remainder = (h - (region * 43)) * 6;
     9b0:	8f 81       	ldd	r24, Y+7	; 0x07
     9b2:	88 2f       	mov	r24, r24
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	45 ed       	ldi	r20, 0xD5	; 213
     9b8:	bc 01       	movw	r22, r24
     9ba:	46 03       	mulsu	r20, r22
     9bc:	90 01       	movw	r18, r0
     9be:	47 9f       	mul	r20, r23
     9c0:	30 0d       	add	r19, r0
     9c2:	11 24       	eor	r1, r1
     9c4:	89 81       	ldd	r24, Y+1	; 0x01
     9c6:	9a 81       	ldd	r25, Y+2	; 0x02
     9c8:	28 0f       	add	r18, r24
     9ca:	39 1f       	adc	r19, r25
     9cc:	c9 01       	movw	r24, r18
     9ce:	88 0f       	add	r24, r24
     9d0:	99 1f       	adc	r25, r25
     9d2:	82 0f       	add	r24, r18
     9d4:	93 1f       	adc	r25, r19
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	99 87       	std	Y+9, r25	; 0x09
     9dc:	88 87       	std	Y+8, r24	; 0x08

	p = (v * (255 - s)) >> 8;
     9de:	2f ef       	ldi	r18, 0xFF	; 255
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	8b 81       	ldd	r24, Y+3	; 0x03
     9e4:	9c 81       	ldd	r25, Y+4	; 0x04
     9e6:	a9 01       	movw	r20, r18
     9e8:	48 1b       	sub	r20, r24
     9ea:	59 0b       	sbc	r21, r25
     9ec:	2d 81       	ldd	r18, Y+5	; 0x05
     9ee:	3e 81       	ldd	r19, Y+6	; 0x06
     9f0:	42 9f       	mul	r20, r18
     9f2:	c0 01       	movw	r24, r0
     9f4:	43 9f       	mul	r20, r19
     9f6:	90 0d       	add	r25, r0
     9f8:	52 9f       	mul	r21, r18
     9fa:	90 0d       	add	r25, r0
     9fc:	11 24       	eor	r1, r1
     9fe:	89 2f       	mov	r24, r25
     a00:	99 27       	eor	r25, r25
     a02:	8a 87       	std	Y+10, r24	; 0x0a
	q = (v * (255 - ((s * remainder) >> 8))) >> 8;
     a04:	4b 81       	ldd	r20, Y+3	; 0x03
     a06:	5c 81       	ldd	r21, Y+4	; 0x04
     a08:	28 85       	ldd	r18, Y+8	; 0x08
     a0a:	39 85       	ldd	r19, Y+9	; 0x09
     a0c:	42 9f       	mul	r20, r18
     a0e:	c0 01       	movw	r24, r0
     a10:	43 9f       	mul	r20, r19
     a12:	90 0d       	add	r25, r0
     a14:	52 9f       	mul	r21, r18
     a16:	90 0d       	add	r25, r0
     a18:	11 24       	eor	r1, r1
     a1a:	89 2f       	mov	r24, r25
     a1c:	99 27       	eor	r25, r25
     a1e:	2f ef       	ldi	r18, 0xFF	; 255
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	a9 01       	movw	r20, r18
     a24:	48 1b       	sub	r20, r24
     a26:	59 0b       	sbc	r21, r25
     a28:	2d 81       	ldd	r18, Y+5	; 0x05
     a2a:	3e 81       	ldd	r19, Y+6	; 0x06
     a2c:	42 9f       	mul	r20, r18
     a2e:	c0 01       	movw	r24, r0
     a30:	43 9f       	mul	r20, r19
     a32:	90 0d       	add	r25, r0
     a34:	52 9f       	mul	r21, r18
     a36:	90 0d       	add	r25, r0
     a38:	11 24       	eor	r1, r1
     a3a:	89 2f       	mov	r24, r25
     a3c:	99 27       	eor	r25, r25
     a3e:	8b 87       	std	Y+11, r24	; 0x0b
	t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
     a40:	2f ef       	ldi	r18, 0xFF	; 255
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	88 85       	ldd	r24, Y+8	; 0x08
     a46:	99 85       	ldd	r25, Y+9	; 0x09
     a48:	a9 01       	movw	r20, r18
     a4a:	48 1b       	sub	r20, r24
     a4c:	59 0b       	sbc	r21, r25
     a4e:	2b 81       	ldd	r18, Y+3	; 0x03
     a50:	3c 81       	ldd	r19, Y+4	; 0x04
     a52:	42 9f       	mul	r20, r18
     a54:	c0 01       	movw	r24, r0
     a56:	43 9f       	mul	r20, r19
     a58:	90 0d       	add	r25, r0
     a5a:	52 9f       	mul	r21, r18
     a5c:	90 0d       	add	r25, r0
     a5e:	11 24       	eor	r1, r1
     a60:	89 2f       	mov	r24, r25
     a62:	99 27       	eor	r25, r25
     a64:	2f ef       	ldi	r18, 0xFF	; 255
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	a9 01       	movw	r20, r18
     a6a:	48 1b       	sub	r20, r24
     a6c:	59 0b       	sbc	r21, r25
     a6e:	2d 81       	ldd	r18, Y+5	; 0x05
     a70:	3e 81       	ldd	r19, Y+6	; 0x06
     a72:	42 9f       	mul	r20, r18
     a74:	c0 01       	movw	r24, r0
     a76:	43 9f       	mul	r20, r19
     a78:	90 0d       	add	r25, r0
     a7a:	52 9f       	mul	r21, r18
     a7c:	90 0d       	add	r25, r0
     a7e:	11 24       	eor	r1, r1
     a80:	89 2f       	mov	r24, r25
     a82:	99 27       	eor	r25, r25
     a84:	8c 87       	std	Y+12, r24	; 0x0c

	switch (region) {
     a86:	8f 81       	ldd	r24, Y+7	; 0x07
     a88:	88 2f       	mov	r24, r24
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	82 30       	cpi	r24, 0x02	; 2
     a8e:	91 05       	cpc	r25, r1
     a90:	e1 f0       	breq	.+56     	; 0xaca <colorHsvToRgb+0x18c>
     a92:	83 30       	cpi	r24, 0x03	; 3
     a94:	91 05       	cpc	r25, r1
     a96:	2c f4       	brge	.+10     	; 0xaa2 <colorHsvToRgb+0x164>
     a98:	00 97       	sbiw	r24, 0x00	; 0
     a9a:	49 f0       	breq	.+18     	; 0xaae <colorHsvToRgb+0x170>
     a9c:	01 97       	sbiw	r24, 0x01	; 1
     a9e:	71 f0       	breq	.+28     	; 0xabc <colorHsvToRgb+0x17e>
     aa0:	29 c0       	rjmp	.+82     	; 0xaf4 <colorHsvToRgb+0x1b6>
     aa2:	83 30       	cpi	r24, 0x03	; 3
     aa4:	91 05       	cpc	r25, r1
     aa6:	c1 f0       	breq	.+48     	; 0xad8 <colorHsvToRgb+0x19a>
     aa8:	04 97       	sbiw	r24, 0x04	; 4
     aaa:	e9 f0       	breq	.+58     	; 0xae6 <colorHsvToRgb+0x1a8>
     aac:	23 c0       	rjmp	.+70     	; 0xaf4 <colorHsvToRgb+0x1b6>
		case 0: {
			rgb.r = v;
     aae:	8d 81       	ldd	r24, Y+5	; 0x05
     ab0:	8d 87       	std	Y+13, r24	; 0x0d
			rgb.g = t;
     ab2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ab4:	8e 87       	std	Y+14, r24	; 0x0e
			rgb.b = p;
     ab6:	8a 85       	ldd	r24, Y+10	; 0x0a
     ab8:	8f 87       	std	Y+15, r24	; 0x0f
			break;
     aba:	23 c0       	rjmp	.+70     	; 0xb02 <colorHsvToRgb+0x1c4>
		}
		case 1: {
			rgb.r = q;
     abc:	8b 85       	ldd	r24, Y+11	; 0x0b
     abe:	8d 87       	std	Y+13, r24	; 0x0d
			rgb.g = v;
     ac0:	8d 81       	ldd	r24, Y+5	; 0x05
     ac2:	8e 87       	std	Y+14, r24	; 0x0e
			rgb.b = p;
     ac4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ac6:	8f 87       	std	Y+15, r24	; 0x0f
			break;
     ac8:	1c c0       	rjmp	.+56     	; 0xb02 <colorHsvToRgb+0x1c4>
		}
		case 2: {
			rgb.r = p;
     aca:	8a 85       	ldd	r24, Y+10	; 0x0a
     acc:	8d 87       	std	Y+13, r24	; 0x0d
			rgb.g = v;
     ace:	8d 81       	ldd	r24, Y+5	; 0x05
     ad0:	8e 87       	std	Y+14, r24	; 0x0e
			rgb.b = t;
     ad2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ad4:	8f 87       	std	Y+15, r24	; 0x0f
			break;
     ad6:	15 c0       	rjmp	.+42     	; 0xb02 <colorHsvToRgb+0x1c4>
		}
		case 3: {
			rgb.r = p;
     ad8:	8a 85       	ldd	r24, Y+10	; 0x0a
     ada:	8d 87       	std	Y+13, r24	; 0x0d
			rgb.g = q;
     adc:	8b 85       	ldd	r24, Y+11	; 0x0b
     ade:	8e 87       	std	Y+14, r24	; 0x0e
			rgb.b = v;
     ae0:	8d 81       	ldd	r24, Y+5	; 0x05
     ae2:	8f 87       	std	Y+15, r24	; 0x0f
			break;
     ae4:	0e c0       	rjmp	.+28     	; 0xb02 <colorHsvToRgb+0x1c4>
		}
		case 4: {
			rgb.r = t;
     ae6:	8c 85       	ldd	r24, Y+12	; 0x0c
     ae8:	8d 87       	std	Y+13, r24	; 0x0d
			rgb.g = p;
     aea:	8a 85       	ldd	r24, Y+10	; 0x0a
     aec:	8e 87       	std	Y+14, r24	; 0x0e
			rgb.b = v;
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	8f 87       	std	Y+15, r24	; 0x0f
			break;
     af2:	07 c0       	rjmp	.+14     	; 0xb02 <colorHsvToRgb+0x1c4>
		}
		default: {
			rgb.r = v;
     af4:	8d 81       	ldd	r24, Y+5	; 0x05
     af6:	8d 87       	std	Y+13, r24	; 0x0d
			rgb.g = p;
     af8:	8a 85       	ldd	r24, Y+10	; 0x0a
     afa:	8e 87       	std	Y+14, r24	; 0x0e
			rgb.b = q;
     afc:	8b 85       	ldd	r24, Y+11	; 0x0b
     afe:	8f 87       	std	Y+15, r24	; 0x0f
			break;
     b00:	00 00       	nop
		}
	}
	return rgb;
     b02:	8d 85       	ldd	r24, Y+13	; 0x0d
     b04:	9e 85       	ldd	r25, Y+14	; 0x0e
     b06:	af 85       	ldd	r26, Y+15	; 0x0f
}
     b08:	bc 01       	movw	r22, r24
     b0a:	8a 2f       	mov	r24, r26
     b0c:	62 96       	adiw	r28, 0x12	; 18
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	f8 94       	cli
     b12:	de bf       	out	0x3e, r29	; 62
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	cd bf       	out	0x3d, r28	; 61
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	08 95       	ret

00000b1e <colorRgbToHsv>:

HsvColor8_t colorRgbToHsv(RgbColor8_t rgb) {
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	28 97       	sbiw	r28, 0x08	; 8
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	6e 83       	std	Y+6, r22	; 0x06
     b34:	7f 83       	std	Y+7, r23	; 0x07
     b36:	88 87       	std	Y+8, r24	; 0x08
	HsvColor8_t hsv;
	uint8_t rgbMin, rgbMax;

	rgbMin = rgb.r < rgb.g ? (rgb.r < rgb.b ? rgb.r : rgb.b) : (rgb.g < rgb.b ? rgb.g : rgb.b);
     b38:	9e 81       	ldd	r25, Y+6	; 0x06
     b3a:	8f 81       	ldd	r24, Y+7	; 0x07
     b3c:	98 17       	cp	r25, r24
     b3e:	30 f4       	brcc	.+12     	; 0xb4c <colorRgbToHsv+0x2e>
     b40:	88 85       	ldd	r24, Y+8	; 0x08
     b42:	9e 81       	ldd	r25, Y+6	; 0x06
     b44:	98 17       	cp	r25, r24
     b46:	38 f4       	brcc	.+14     	; 0xb56 <colorRgbToHsv+0x38>
     b48:	89 2f       	mov	r24, r25
     b4a:	05 c0       	rjmp	.+10     	; 0xb56 <colorRgbToHsv+0x38>
     b4c:	88 85       	ldd	r24, Y+8	; 0x08
     b4e:	9f 81       	ldd	r25, Y+7	; 0x07
     b50:	98 17       	cp	r25, r24
     b52:	08 f4       	brcc	.+2      	; 0xb56 <colorRgbToHsv+0x38>
     b54:	89 2f       	mov	r24, r25
     b56:	89 83       	std	Y+1, r24	; 0x01
	rgbMax = rgb.r > rgb.g ? (rgb.r > rgb.b ? rgb.r : rgb.b) : (rgb.g > rgb.b ? rgb.g : rgb.b);
     b58:	9e 81       	ldd	r25, Y+6	; 0x06
     b5a:	8f 81       	ldd	r24, Y+7	; 0x07
     b5c:	89 17       	cp	r24, r25
     b5e:	30 f4       	brcc	.+12     	; 0xb6c <colorRgbToHsv+0x4e>
     b60:	88 85       	ldd	r24, Y+8	; 0x08
     b62:	9e 81       	ldd	r25, Y+6	; 0x06
     b64:	89 17       	cp	r24, r25
     b66:	38 f4       	brcc	.+14     	; 0xb76 <colorRgbToHsv+0x58>
     b68:	89 2f       	mov	r24, r25
     b6a:	05 c0       	rjmp	.+10     	; 0xb76 <colorRgbToHsv+0x58>
     b6c:	88 85       	ldd	r24, Y+8	; 0x08
     b6e:	9f 81       	ldd	r25, Y+7	; 0x07
     b70:	89 17       	cp	r24, r25
     b72:	08 f4       	brcc	.+2      	; 0xb76 <colorRgbToHsv+0x58>
     b74:	89 2f       	mov	r24, r25
     b76:	8a 83       	std	Y+2, r24	; 0x02

	hsv.v = rgbMax;
     b78:	8a 81       	ldd	r24, Y+2	; 0x02
     b7a:	8d 83       	std	Y+5, r24	; 0x05
	if (hsv.v == 0) {
     b7c:	8d 81       	ldd	r24, Y+5	; 0x05
     b7e:	88 23       	and	r24, r24
     b80:	31 f4       	brne	.+12     	; 0xb8e <colorRgbToHsv+0x70>
		hsv.h = 0;
     b82:	1b 82       	std	Y+3, r1	; 0x03
		hsv.s = 0;
     b84:	1c 82       	std	Y+4, r1	; 0x04
		return hsv;
     b86:	8b 81       	ldd	r24, Y+3	; 0x03
     b88:	9c 81       	ldd	r25, Y+4	; 0x04
     b8a:	ad 81       	ldd	r26, Y+5	; 0x05
     b8c:	92 c0       	rjmp	.+292    	; 0xcb2 <colorRgbToHsv+0x194>
	}

	hsv.s = 255 * ((long)(rgbMax - rgbMin)) / hsv.v;
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	28 2f       	mov	r18, r24
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	88 2f       	mov	r24, r24
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a9 01       	movw	r20, r18
     b9c:	48 1b       	sub	r20, r24
     b9e:	59 0b       	sbc	r21, r25
     ba0:	ca 01       	movw	r24, r20
     ba2:	9c 01       	movw	r18, r24
     ba4:	99 0f       	add	r25, r25
     ba6:	44 0b       	sbc	r20, r20
     ba8:	55 0b       	sbc	r21, r21
     baa:	8f ef       	ldi	r24, 0xFF	; 255
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	dc 01       	movw	r26, r24
     bb0:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <__muluhisi3>
     bb4:	dc 01       	movw	r26, r24
     bb6:	cb 01       	movw	r24, r22
     bb8:	2d 81       	ldd	r18, Y+5	; 0x05
     bba:	22 2f       	mov	r18, r18
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e0       	ldi	r20, 0x00	; 0
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	bc 01       	movw	r22, r24
     bc4:	cd 01       	movw	r24, r26
     bc6:	0e 94 ff 2d 	call	0x5bfe	; 0x5bfe <__divmodsi4>
     bca:	da 01       	movw	r26, r20
     bcc:	c9 01       	movw	r24, r18
     bce:	8c 83       	std	Y+4, r24	; 0x04
	if (hsv.s == 0) {
     bd0:	8c 81       	ldd	r24, Y+4	; 0x04
     bd2:	88 23       	and	r24, r24
     bd4:	29 f4       	brne	.+10     	; 0xbe0 <colorRgbToHsv+0xc2>
		hsv.h = 0;
     bd6:	1b 82       	std	Y+3, r1	; 0x03
		return hsv;
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	ad 81       	ldd	r26, Y+5	; 0x05
     bde:	69 c0       	rjmp	.+210    	; 0xcb2 <colorRgbToHsv+0x194>
	}

	if (rgbMax == rgb.r) {
     be0:	9e 81       	ldd	r25, Y+6	; 0x06
     be2:	8a 81       	ldd	r24, Y+2	; 0x02
     be4:	98 17       	cp	r25, r24
     be6:	f9 f4       	brne	.+62     	; 0xc26 <colorRgbToHsv+0x108>
		hsv.h = 0 + 43 * (rgb.g - rgb.b) / (rgbMax - rgbMin);
     be8:	8f 81       	ldd	r24, Y+7	; 0x07
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	88 85       	ldd	r24, Y+8	; 0x08
     bf0:	88 2f       	mov	r24, r24
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a9 01       	movw	r20, r18
     bf6:	48 1b       	sub	r20, r24
     bf8:	59 0b       	sbc	r21, r25
     bfa:	ca 01       	movw	r24, r20
     bfc:	2b e2       	ldi	r18, 0x2B	; 43
     bfe:	28 9f       	mul	r18, r24
     c00:	a0 01       	movw	r20, r0
     c02:	29 9f       	mul	r18, r25
     c04:	50 0d       	add	r21, r0
     c06:	11 24       	eor	r1, r1
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	28 1b       	sub	r18, r24
     c16:	39 0b       	sbc	r19, r25
     c18:	ca 01       	movw	r24, r20
     c1a:	b9 01       	movw	r22, r18
     c1c:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <__divmodhi4>
     c20:	cb 01       	movw	r24, r22
     c22:	8b 83       	std	Y+3, r24	; 0x03
     c24:	43 c0       	rjmp	.+134    	; 0xcac <colorRgbToHsv+0x18e>
		} else if (rgbMax == rgb.g) {
     c26:	9f 81       	ldd	r25, Y+7	; 0x07
     c28:	8a 81       	ldd	r24, Y+2	; 0x02
     c2a:	98 17       	cp	r25, r24
     c2c:	01 f5       	brne	.+64     	; 0xc6e <colorRgbToHsv+0x150>
		hsv.h = 85 + 43 * (rgb.b - rgb.r) / (rgbMax - rgbMin);
     c2e:	88 85       	ldd	r24, Y+8	; 0x08
     c30:	28 2f       	mov	r18, r24
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	8e 81       	ldd	r24, Y+6	; 0x06
     c36:	88 2f       	mov	r24, r24
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	a9 01       	movw	r20, r18
     c3c:	48 1b       	sub	r20, r24
     c3e:	59 0b       	sbc	r21, r25
     c40:	ca 01       	movw	r24, r20
     c42:	2b e2       	ldi	r18, 0x2B	; 43
     c44:	28 9f       	mul	r18, r24
     c46:	a0 01       	movw	r20, r0
     c48:	29 9f       	mul	r18, r25
     c4a:	50 0d       	add	r21, r0
     c4c:	11 24       	eor	r1, r1
     c4e:	8a 81       	ldd	r24, Y+2	; 0x02
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	88 2f       	mov	r24, r24
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	28 1b       	sub	r18, r24
     c5c:	39 0b       	sbc	r19, r25
     c5e:	ca 01       	movw	r24, r20
     c60:	b9 01       	movw	r22, r18
     c62:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <__divmodhi4>
     c66:	cb 01       	movw	r24, r22
     c68:	8b 5a       	subi	r24, 0xAB	; 171
     c6a:	8b 83       	std	Y+3, r24	; 0x03
     c6c:	1f c0       	rjmp	.+62     	; 0xcac <colorRgbToHsv+0x18e>
		} else {
		hsv.h = 171 + 43 * (rgb.r - rgb.g) / (rgbMax - rgbMin);
     c6e:	8e 81       	ldd	r24, Y+6	; 0x06
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	8f 81       	ldd	r24, Y+7	; 0x07
     c76:	88 2f       	mov	r24, r24
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	a9 01       	movw	r20, r18
     c7c:	48 1b       	sub	r20, r24
     c7e:	59 0b       	sbc	r21, r25
     c80:	ca 01       	movw	r24, r20
     c82:	2b e2       	ldi	r18, 0x2B	; 43
     c84:	28 9f       	mul	r18, r24
     c86:	a0 01       	movw	r20, r0
     c88:	29 9f       	mul	r18, r25
     c8a:	50 0d       	add	r21, r0
     c8c:	11 24       	eor	r1, r1
     c8e:	8a 81       	ldd	r24, Y+2	; 0x02
     c90:	28 2f       	mov	r18, r24
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	88 2f       	mov	r24, r24
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	28 1b       	sub	r18, r24
     c9c:	39 0b       	sbc	r19, r25
     c9e:	ca 01       	movw	r24, r20
     ca0:	b9 01       	movw	r22, r18
     ca2:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <__divmodhi4>
     ca6:	cb 01       	movw	r24, r22
     ca8:	85 55       	subi	r24, 0x55	; 85
     caa:	8b 83       	std	Y+3, r24	; 0x03
	}

	return hsv;
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	9c 81       	ldd	r25, Y+4	; 0x04
     cb0:	ad 81       	ldd	r26, Y+5	; 0x05
     cb2:	bc 01       	movw	r22, r24
     cb4:	8a 2f       	mov	r24, r26
     cb6:	28 96       	adiw	r28, 0x08	; 8
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	f8 94       	cli
     cbc:	de bf       	out	0x3e, r29	; 62
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	cd bf       	out	0x3d, r28	; 61
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	08 95       	ret

00000cc8 <dbPullUpAllPorts>:

#ifndef KMCD_NO_LCD
#include "LiquidCrystal.h"
#endif

void dbPullUpAllPorts(void) {
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
    // PULL UP all ports
#ifdef PORTA
    PORTA = 0xFF;
     cd0:	8b e3       	ldi	r24, 0x3B	; 59
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	2f ef       	ldi	r18, 0xFF	; 255
     cd6:	fc 01       	movw	r30, r24
     cd8:	20 83       	st	Z, r18
#endif
#ifdef PORTB
    PORTB = 0xFF;
     cda:	88 e3       	ldi	r24, 0x38	; 56
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	2f ef       	ldi	r18, 0xFF	; 255
     ce0:	fc 01       	movw	r30, r24
     ce2:	20 83       	st	Z, r18
#endif
#ifdef PORTC
    PORTC = 0xFF;
     ce4:	85 e3       	ldi	r24, 0x35	; 53
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	2f ef       	ldi	r18, 0xFF	; 255
     cea:	fc 01       	movw	r30, r24
     cec:	20 83       	st	Z, r18
#endif
#ifdef PORTD
    PORTD = 0xFF;
     cee:	82 e3       	ldi	r24, 0x32	; 50
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	2f ef       	ldi	r18, 0xFF	; 255
     cf4:	fc 01       	movw	r30, r24
     cf6:	20 83       	st	Z, r18
#endif
}
     cf8:	00 00       	nop
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	08 95       	ret

00000d00 <dbInit>:

void dbInit(void) {
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
#endif
#ifdef DEBUG_PIN_5
    DEBUG_DDR |= _BV(DEBUG_PIN_5);
#endif
#ifdef DEBUG_PIN_6
    DEBUG_DDR |= _BV(DEBUG_PIN_6);
     d08:	84 e3       	ldi	r24, 0x34	; 52
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	24 e3       	ldi	r18, 0x34	; 52
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	f9 01       	movw	r30, r18
     d12:	20 81       	ld	r18, Z
     d14:	20 64       	ori	r18, 0x40	; 64
     d16:	fc 01       	movw	r30, r24
     d18:	20 83       	st	Z, r18
#endif
#ifdef DEBUG_PIN_7
    DEBUG_DDR |= _BV(DEBUG_PIN_7);
     d1a:	84 e3       	ldi	r24, 0x34	; 52
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	24 e3       	ldi	r18, 0x34	; 52
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	f9 01       	movw	r30, r18
     d24:	20 81       	ld	r18, Z
     d26:	20 68       	ori	r18, 0x80	; 128
     d28:	fc 01       	movw	r30, r24
     d2a:	20 83       	st	Z, r18
#endif
#endif
}
     d2c:	00 00       	nop
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	08 95       	ret

00000d34 <dbToggle>:

void dbToggle(uint8_t pin) {
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	1f 92       	push	r1
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	89 83       	std	Y+1, r24	; 0x01
#ifndef KMCD_NO_DEBUG
    switch(pin) {
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	88 2f       	mov	r24, r24
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	86 30       	cpi	r24, 0x06	; 6
     d48:	91 05       	cpc	r25, r1
     d4a:	19 f0       	breq	.+6      	; 0xd52 <dbToggle+0x1e>
     d4c:	07 97       	sbiw	r24, 0x07	; 7
     d4e:	61 f0       	breq	.+24     	; 0xd68 <dbToggle+0x34>
            break;
        }
#endif
    }
#endif
}
     d50:	16 c0       	rjmp	.+44     	; 0xd7e <dbToggle+0x4a>
            break;
        }
#endif
#ifdef DEBUG_PIN_6
        case 6: {
            DEBUG_PORT ^= _BV(DEBUG_PIN_6);
     d52:	85 e3       	ldi	r24, 0x35	; 53
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	25 e3       	ldi	r18, 0x35	; 53
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	f9 01       	movw	r30, r18
     d5c:	30 81       	ld	r19, Z
     d5e:	20 e4       	ldi	r18, 0x40	; 64
     d60:	23 27       	eor	r18, r19
     d62:	fc 01       	movw	r30, r24
     d64:	20 83       	st	Z, r18
            break;
     d66:	0b c0       	rjmp	.+22     	; 0xd7e <dbToggle+0x4a>
        }
#endif
#ifdef DEBUG_PIN_7
        case 7: {
            DEBUG_PORT ^= _BV(DEBUG_PIN_7);
     d68:	85 e3       	ldi	r24, 0x35	; 53
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	25 e3       	ldi	r18, 0x35	; 53
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	f9 01       	movw	r30, r18
     d72:	30 81       	ld	r19, Z
     d74:	20 e8       	ldi	r18, 0x80	; 128
     d76:	23 27       	eor	r18, r19
     d78:	fc 01       	movw	r30, r24
     d7a:	20 83       	st	Z, r18
            break;
     d7c:	00 00       	nop
        }
#endif
    }
#endif
}
     d7e:	00 00       	nop
     d80:	0f 90       	pop	r0
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	08 95       	ret

00000d88 <dbMeasureToSerial>:

void dbMeasureToSerial(void)  {
     d88:	af 92       	push	r10
     d8a:	bf 92       	push	r11
     d8c:	cf 92       	push	r12
     d8e:	df 92       	push	r13
     d90:	ef 92       	push	r14
     d92:	ff 92       	push	r15
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	e5 97       	sbiw	r28, 0x35	; 53
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
#ifndef KMCD_NO_SERIAL_DEBUG
    RgbColor16_t colorOrg = tscGetColor();
     dac:	0e 94 a1 18 	call	0x3142	; 0x3142 <tscGetColor>
     db0:	a2 2e       	mov	r10, r18
     db2:	b3 2e       	mov	r11, r19
     db4:	c4 2e       	mov	r12, r20
     db6:	d5 2e       	mov	r13, r21
     db8:	e6 2e       	mov	r14, r22
     dba:	f7 2e       	mov	r15, r23
     dbc:	08 2f       	mov	r16, r24
     dbe:	19 2f       	mov	r17, r25
     dc0:	2a 2d       	mov	r18, r10
     dc2:	3b 2d       	mov	r19, r11
     dc4:	4c 2d       	mov	r20, r12
     dc6:	5d 2d       	mov	r21, r13
     dc8:	6e 2d       	mov	r22, r14
     dca:	7f 2d       	mov	r23, r15
     dcc:	80 2f       	mov	r24, r16
     dce:	91 2f       	mov	r25, r17
     dd0:	2a 83       	std	Y+2, r18	; 0x02
     dd2:	3b 83       	std	Y+3, r19	; 0x03
     dd4:	4c 83       	std	Y+4, r20	; 0x04
     dd6:	5d 83       	std	Y+5, r21	; 0x05
     dd8:	6e 83       	std	Y+6, r22	; 0x06
     dda:	7f 83       	std	Y+7, r23	; 0x07
    RgbColor8_t colorNorm = colorNormalize(colorOrg);
     ddc:	4a 81       	ldd	r20, Y+2	; 0x02
     dde:	5b 81       	ldd	r21, Y+3	; 0x03
     de0:	6c 81       	ldd	r22, Y+4	; 0x04
     de2:	7d 81       	ldd	r23, Y+5	; 0x05
     de4:	8e 81       	ldd	r24, Y+6	; 0x06
     de6:	9f 81       	ldd	r25, Y+7	; 0x07
     de8:	0e 94 57 04 	call	0x8ae	; 0x8ae <colorNormalize>
     dec:	a8 2f       	mov	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	88 87       	std	Y+8, r24	; 0x08
     df2:	99 87       	std	Y+9, r25	; 0x09
     df4:	aa 87       	std	Y+10, r26	; 0x0a
    HsvColor8_t colorHsv = colorRgbToHsv(colorNorm);
     df6:	88 85       	ldd	r24, Y+8	; 0x08
     df8:	99 85       	ldd	r25, Y+9	; 0x09
     dfa:	aa 85       	ldd	r26, Y+10	; 0x0a
     dfc:	bc 01       	movw	r22, r24
     dfe:	8a 2f       	mov	r24, r26
     e00:	0e 94 8f 05 	call	0xb1e	; 0xb1e <colorRgbToHsv>
     e04:	a8 2f       	mov	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	8b 87       	std	Y+11, r24	; 0x0b
     e0a:	9c 87       	std	Y+12, r25	; 0x0c
     e0c:	ad 87       	std	Y+13, r26	; 0x0d
    uint8_t colorNumber = colorFindNearest(colorNorm);
     e0e:	88 85       	ldd	r24, Y+8	; 0x08
     e10:	99 85       	ldd	r25, Y+9	; 0x09
     e12:	aa 85       	ldd	r26, Y+10	; 0x0a
     e14:	bc 01       	movw	r22, r24
     e16:	8a 2f       	mov	r24, r26
     e18:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <colorFindNearest>
     e1c:	89 83       	std	Y+1, r24	; 0x01
    char tmpBuffer[40];
    sprintf(tmpBuffer, "colorOrg R:%X, G:%X, B:%X; ", colorOrg.r, colorOrg.g, colorOrg.b);
     e1e:	4e 81       	ldd	r20, Y+6	; 0x06
     e20:	5f 81       	ldd	r21, Y+7	; 0x07
     e22:	2c 81       	ldd	r18, Y+4	; 0x04
     e24:	3d 81       	ldd	r19, Y+5	; 0x05
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	9b 81       	ldd	r25, Y+3	; 0x03
     e2a:	65 2f       	mov	r22, r21
     e2c:	6f 93       	push	r22
     e2e:	4f 93       	push	r20
     e30:	43 2f       	mov	r20, r19
     e32:	4f 93       	push	r20
     e34:	2f 93       	push	r18
     e36:	29 2f       	mov	r18, r25
     e38:	2f 93       	push	r18
     e3a:	8f 93       	push	r24
     e3c:	8a e8       	ldi	r24, 0x8A	; 138
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	89 2f       	mov	r24, r25
     e42:	8f 93       	push	r24
     e44:	8a e8       	ldi	r24, 0x8A	; 138
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	8f 93       	push	r24
     e4a:	ce 01       	movw	r24, r28
     e4c:	0e 96       	adiw	r24, 0x0e	; 14
     e4e:	29 2f       	mov	r18, r25
     e50:	2f 93       	push	r18
     e52:	8f 93       	push	r24
     e54:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <sprintf>
     e58:	8d b7       	in	r24, 0x3d	; 61
     e5a:	9e b7       	in	r25, 0x3e	; 62
     e5c:	0a 96       	adiw	r24, 0x0a	; 10
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
    serPrintString(tmpBuffer);
     e68:	ce 01       	movw	r24, r28
     e6a:	0e 96       	adiw	r24, 0x0e	; 14
     e6c:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <serPrintString>
    sprintf(tmpBuffer, "colorNorm R:%X, G:%X, B:%X; ", colorNorm.r, colorNorm.g, colorNorm.b);
     e70:	8a 85       	ldd	r24, Y+10	; 0x0a
     e72:	48 2f       	mov	r20, r24
     e74:	50 e0       	ldi	r21, 0x00	; 0
     e76:	89 85       	ldd	r24, Y+9	; 0x09
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	88 85       	ldd	r24, Y+8	; 0x08
     e7e:	88 2f       	mov	r24, r24
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	65 2f       	mov	r22, r21
     e84:	6f 93       	push	r22
     e86:	4f 93       	push	r20
     e88:	43 2f       	mov	r20, r19
     e8a:	4f 93       	push	r20
     e8c:	2f 93       	push	r18
     e8e:	29 2f       	mov	r18, r25
     e90:	2f 93       	push	r18
     e92:	8f 93       	push	r24
     e94:	86 ea       	ldi	r24, 0xA6	; 166
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	89 2f       	mov	r24, r25
     e9a:	8f 93       	push	r24
     e9c:	86 ea       	ldi	r24, 0xA6	; 166
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	8f 93       	push	r24
     ea2:	ce 01       	movw	r24, r28
     ea4:	0e 96       	adiw	r24, 0x0e	; 14
     ea6:	29 2f       	mov	r18, r25
     ea8:	2f 93       	push	r18
     eaa:	8f 93       	push	r24
     eac:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <sprintf>
     eb0:	ed b7       	in	r30, 0x3d	; 61
     eb2:	fe b7       	in	r31, 0x3e	; 62
     eb4:	3a 96       	adiw	r30, 0x0a	; 10
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
    serPrintString(tmpBuffer);
     ec0:	ce 01       	movw	r24, r28
     ec2:	0e 96       	adiw	r24, 0x0e	; 14
     ec4:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <serPrintString>
    sprintf(tmpBuffer, "colorHSV H:%X, S:%X, V:%X; ", colorHsv.s, colorHsv.h, colorHsv.v);
     ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eca:	48 2f       	mov	r20, r24
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	8b 85       	ldd	r24, Y+11	; 0x0b
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	8c 85       	ldd	r24, Y+12	; 0x0c
     ed6:	88 2f       	mov	r24, r24
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	65 2f       	mov	r22, r21
     edc:	6f 93       	push	r22
     ede:	4f 93       	push	r20
     ee0:	43 2f       	mov	r20, r19
     ee2:	4f 93       	push	r20
     ee4:	2f 93       	push	r18
     ee6:	29 2f       	mov	r18, r25
     ee8:	2f 93       	push	r18
     eea:	8f 93       	push	r24
     eec:	83 ec       	ldi	r24, 0xC3	; 195
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	89 2f       	mov	r24, r25
     ef2:	8f 93       	push	r24
     ef4:	83 ec       	ldi	r24, 0xC3	; 195
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	8f 93       	push	r24
     efa:	ce 01       	movw	r24, r28
     efc:	0e 96       	adiw	r24, 0x0e	; 14
     efe:	29 2f       	mov	r18, r25
     f00:	2f 93       	push	r18
     f02:	8f 93       	push	r24
     f04:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <sprintf>
     f08:	8d b7       	in	r24, 0x3d	; 61
     f0a:	9e b7       	in	r25, 0x3e	; 62
     f0c:	0a 96       	adiw	r24, 0x0a	; 10
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
    serPrintString(tmpBuffer);
     f18:	ce 01       	movw	r24, r28
     f1a:	0e 96       	adiw	r24, 0x0e	; 14
     f1c:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <serPrintString>

    switch (colorNumber) {
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	88 2f       	mov	r24, r24
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	09 2e       	mov	r0, r25
     f28:	00 0c       	add	r0, r0
     f2a:	aa 0b       	sbc	r26, r26
     f2c:	bb 0b       	sbc	r27, r27
     f2e:	40 e0       	ldi	r20, 0x00	; 0
     f30:	50 e0       	ldi	r21, 0x00	; 0
     f32:	27 e0       	ldi	r18, 0x07	; 7
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	84 1b       	sub	r24, r20
     f38:	95 0b       	sbc	r25, r21
     f3a:	28 17       	cp	r18, r24
     f3c:	39 07       	cpc	r19, r25
     f3e:	68 f1       	brcs	.+90     	; 0xf9a <dbMeasureToSerial+0x212>
     f40:	86 5d       	subi	r24, 0xD6	; 214
     f42:	9f 4f       	sbci	r25, 0xFF	; 255
     f44:	fc 01       	movw	r30, r24
     f46:	0c 94 1e 2e 	jmp	0x5c3c	; 0x5c3c <__tablejump2__>
        case 0 : {
            serPrintLnString_P(KMCD_COLOR_WHITE);
     f4a:	82 e8       	ldi	r24, 0x82	; 130
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <serPrintLnString_P>
            break;
     f52:	23 c0       	rjmp	.+70     	; 0xf9a <dbMeasureToSerial+0x212>
        }
        case 1 : {
            serPrintLnString_P(KMCD_COLOR_BLACK);
     f54:	88 e8       	ldi	r24, 0x88	; 136
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <serPrintLnString_P>
            break;
     f5c:	1e c0       	rjmp	.+60     	; 0xf9a <dbMeasureToSerial+0x212>
        }
        case 2 : {
            serPrintLnString_P(KMCD_COLOR_BLUE);
     f5e:	8e e8       	ldi	r24, 0x8E	; 142
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <serPrintLnString_P>
            break;
     f66:	19 c0       	rjmp	.+50     	; 0xf9a <dbMeasureToSerial+0x212>
        }
        case 3 : {
            serPrintLnString_P(KMCD_COLOR_GREEN);
     f68:	83 e9       	ldi	r24, 0x93	; 147
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <serPrintLnString_P>
            break;
     f70:	14 c0       	rjmp	.+40     	; 0xf9a <dbMeasureToSerial+0x212>
        }
        case 4 : {
            serPrintLnString_P(KMCD_COLOR_RED);
     f72:	89 e9       	ldi	r24, 0x99	; 153
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <serPrintLnString_P>
            break;
     f7a:	0f c0       	rjmp	.+30     	; 0xf9a <dbMeasureToSerial+0x212>
        }
        case 5 : {
            serPrintLnString_P(KMCD_COLOR_YELLOW);
     f7c:	8d e9       	ldi	r24, 0x9D	; 157
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <serPrintLnString_P>
            break;
     f84:	0a c0       	rjmp	.+20     	; 0xf9a <dbMeasureToSerial+0x212>
        }
        case 6 : {
            serPrintLnString_P(KMCD_COLOR_BROWN);
     f86:	84 ea       	ldi	r24, 0xA4	; 164
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <serPrintLnString_P>
            break;
     f8e:	05 c0       	rjmp	.+10     	; 0xf9a <dbMeasureToSerial+0x212>
        }
        case 7 : {
            serPrintLnString_P(KMCD_COLOR_ORANGE);
     f90:	8a ea       	ldi	r24, 0xAA	; 170
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <serPrintLnString_P>
            break;
     f98:	00 00       	nop
        }
    }
#endif
}
     f9a:	00 00       	nop
     f9c:	e5 96       	adiw	r28, 0x35	; 53
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	1f 91       	pop	r17
     fae:	0f 91       	pop	r16
     fb0:	ff 90       	pop	r15
     fb2:	ef 90       	pop	r14
     fb4:	df 90       	pop	r13
     fb6:	cf 90       	pop	r12
     fb8:	bf 90       	pop	r11
     fba:	af 90       	pop	r10
     fbc:	08 95       	ret

00000fbe <dbMeasureToLCD>:

void dbMeasureToLCD(void)  {
     fbe:	af 92       	push	r10
     fc0:	bf 92       	push	r11
     fc2:	cf 92       	push	r12
     fc4:	df 92       	push	r13
     fc6:	ef 92       	push	r14
     fc8:	ff 92       	push	r15
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	e2 97       	sbiw	r28, 0x32	; 50
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
#ifndef KMCD_NO_LCD
    RgbColor16_t colorOrg = tscGetColor();
     fe2:	0e 94 a1 18 	call	0x3142	; 0x3142 <tscGetColor>
     fe6:	a2 2e       	mov	r10, r18
     fe8:	b3 2e       	mov	r11, r19
     fea:	c4 2e       	mov	r12, r20
     fec:	d5 2e       	mov	r13, r21
     fee:	e6 2e       	mov	r14, r22
     ff0:	f7 2e       	mov	r15, r23
     ff2:	08 2f       	mov	r16, r24
     ff4:	19 2f       	mov	r17, r25
     ff6:	2a 2d       	mov	r18, r10
     ff8:	3b 2d       	mov	r19, r11
     ffa:	4c 2d       	mov	r20, r12
     ffc:	5d 2d       	mov	r21, r13
     ffe:	6e 2d       	mov	r22, r14
    1000:	7f 2d       	mov	r23, r15
    1002:	80 2f       	mov	r24, r16
    1004:	91 2f       	mov	r25, r17
    1006:	2a 83       	std	Y+2, r18	; 0x02
    1008:	3b 83       	std	Y+3, r19	; 0x03
    100a:	4c 83       	std	Y+4, r20	; 0x04
    100c:	5d 83       	std	Y+5, r21	; 0x05
    100e:	6e 83       	std	Y+6, r22	; 0x06
    1010:	7f 83       	std	Y+7, r23	; 0x07
    RgbColor8_t colorNorm = colorNormalize(colorOrg);
    1012:	4a 81       	ldd	r20, Y+2	; 0x02
    1014:	5b 81       	ldd	r21, Y+3	; 0x03
    1016:	6c 81       	ldd	r22, Y+4	; 0x04
    1018:	7d 81       	ldd	r23, Y+5	; 0x05
    101a:	8e 81       	ldd	r24, Y+6	; 0x06
    101c:	9f 81       	ldd	r25, Y+7	; 0x07
    101e:	0e 94 57 04 	call	0x8ae	; 0x8ae <colorNormalize>
    1022:	a8 2f       	mov	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	88 87       	std	Y+8, r24	; 0x08
    1028:	99 87       	std	Y+9, r25	; 0x09
    102a:	aa 87       	std	Y+10, r26	; 0x0a
    uint8_t colorNumber = colorFindNearest(colorNorm);
    102c:	88 85       	ldd	r24, Y+8	; 0x08
    102e:	99 85       	ldd	r25, Y+9	; 0x09
    1030:	aa 85       	ldd	r26, Y+10	; 0x0a
    1032:	bc 01       	movw	r22, r24
    1034:	8a 2f       	mov	r24, r26
    1036:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <colorFindNearest>
    103a:	89 83       	std	Y+1, r24	; 0x01
    char tmpBuffer[40];
    sprintf(tmpBuffer, "R:%X, G:%X, B:%X; ", colorNorm.r, colorNorm.g, colorNorm.b);
    103c:	8a 85       	ldd	r24, Y+10	; 0x0a
    103e:	48 2f       	mov	r20, r24
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	89 85       	ldd	r24, Y+9	; 0x09
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	88 85       	ldd	r24, Y+8	; 0x08
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	65 2f       	mov	r22, r21
    1050:	6f 93       	push	r22
    1052:	4f 93       	push	r20
    1054:	43 2f       	mov	r20, r19
    1056:	4f 93       	push	r20
    1058:	2f 93       	push	r18
    105a:	29 2f       	mov	r18, r25
    105c:	2f 93       	push	r18
    105e:	8f 93       	push	r24
    1060:	8f ed       	ldi	r24, 0xDF	; 223
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	89 2f       	mov	r24, r25
    1066:	8f 93       	push	r24
    1068:	8f ed       	ldi	r24, 0xDF	; 223
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	8f 93       	push	r24
    106e:	ce 01       	movw	r24, r28
    1070:	0b 96       	adiw	r24, 0x0b	; 11
    1072:	29 2f       	mov	r18, r25
    1074:	2f 93       	push	r18
    1076:	8f 93       	push	r24
    1078:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <sprintf>
    107c:	8d b7       	in	r24, 0x3d	; 61
    107e:	9e b7       	in	r25, 0x3e	; 62
    1080:	0a 96       	adiw	r24, 0x0a	; 10
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    serPrintString(tmpBuffer);
    108c:	ce 01       	movw	r24, r28
    108e:	0b 96       	adiw	r24, 0x0b	; 11
    1090:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <serPrintString>

    lcdSetCursor(0, 0);
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	0e 94 12 13 	call	0x2624	; 0x2624 <lcdSetCursor>
    lcdPrint(tmpBuffer);
    109c:	ce 01       	movw	r24, r28
    109e:	0b 96       	adiw	r24, 0x0b	; 11
    10a0:	0e 94 b2 13 	call	0x2764	; 0x2764 <lcdPrint>
    lcdSetCursor(0, 1);
    10a4:	61 e0       	ldi	r22, 0x01	; 1
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	0e 94 12 13 	call	0x2624	; 0x2624 <lcdSetCursor>
    lcdPrint_P(PSTR("C:"));
    10ac:	81 eb       	ldi	r24, 0xB1	; 177
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <lcdPrint_P>
    lcdWrite('0' + colorNumber);
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	80 5d       	subi	r24, 0xD0	; 208
    10b8:	0e 94 1e 14 	call	0x283c	; 0x283c <lcdWrite>
    lcdWrite(' ');
    10bc:	80 e2       	ldi	r24, 0x20	; 32
    10be:	0e 94 1e 14 	call	0x283c	; 0x283c <lcdWrite>
    switch (colorNumber) {
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	09 2e       	mov	r0, r25
    10ca:	00 0c       	add	r0, r0
    10cc:	aa 0b       	sbc	r26, r26
    10ce:	bb 0b       	sbc	r27, r27
    10d0:	40 e0       	ldi	r20, 0x00	; 0
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	27 e0       	ldi	r18, 0x07	; 7
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	84 1b       	sub	r24, r20
    10da:	95 0b       	sbc	r25, r21
    10dc:	28 17       	cp	r18, r24
    10de:	39 07       	cpc	r19, r25
    10e0:	68 f1       	brcs	.+90     	; 0x113c <dbMeasureToLCD+0x17e>
    10e2:	8e 5c       	subi	r24, 0xCE	; 206
    10e4:	9f 4f       	sbci	r25, 0xFF	; 255
    10e6:	fc 01       	movw	r30, r24
    10e8:	0c 94 1e 2e 	jmp	0x5c3c	; 0x5c3c <__tablejump2__>
        case 0 : {
            lcdPrint_P(KMCD_COLOR_WHITE);
    10ec:	84 eb       	ldi	r24, 0xB4	; 180
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <lcdPrint_P>
            break;
    10f4:	23 c0       	rjmp	.+70     	; 0x113c <dbMeasureToLCD+0x17e>
        }
        case 1 : {
            lcdPrint_P(KMCD_COLOR_BLACK);
    10f6:	8a eb       	ldi	r24, 0xBA	; 186
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <lcdPrint_P>
            break;
    10fe:	1e c0       	rjmp	.+60     	; 0x113c <dbMeasureToLCD+0x17e>
        }
        case 2 : {
            lcdPrint_P(KMCD_COLOR_BLUE);
    1100:	80 ec       	ldi	r24, 0xC0	; 192
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <lcdPrint_P>
            break;
    1108:	19 c0       	rjmp	.+50     	; 0x113c <dbMeasureToLCD+0x17e>
        }
        case 3 : {
            lcdPrint_P(KMCD_COLOR_GREEN);
    110a:	85 ec       	ldi	r24, 0xC5	; 197
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <lcdPrint_P>
            break;
    1112:	14 c0       	rjmp	.+40     	; 0x113c <dbMeasureToLCD+0x17e>
        }
        case 4 : {
            lcdPrint_P(KMCD_COLOR_RED);
    1114:	8b ec       	ldi	r24, 0xCB	; 203
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <lcdPrint_P>
            break;
    111c:	0f c0       	rjmp	.+30     	; 0x113c <dbMeasureToLCD+0x17e>
        }
        case 5 : {
            lcdPrint_P(KMCD_COLOR_YELLOW);
    111e:	8f ec       	ldi	r24, 0xCF	; 207
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <lcdPrint_P>
            break;
    1126:	0a c0       	rjmp	.+20     	; 0x113c <dbMeasureToLCD+0x17e>
        }
        case 6 : {
            lcdPrint_P(KMCD_COLOR_BROWN);
    1128:	86 ed       	ldi	r24, 0xD6	; 214
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <lcdPrint_P>
            break;
    1130:	05 c0       	rjmp	.+10     	; 0x113c <dbMeasureToLCD+0x17e>
        }
        case 7 : {
            lcdPrint_P(KMCD_COLOR_ORANGE);
    1132:	8c ed       	ldi	r24, 0xDC	; 220
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <lcdPrint_P>
            break;
    113a:	00 00       	nop
        }
    }
    lcdFillSpacesToEndOfTheLine();
    113c:	0e 94 8f 13 	call	0x271e	; 0x271e <lcdFillSpacesToEndOfTheLine>
#endif
    1140:	00 00       	nop
    1142:	e2 96       	adiw	r28, 0x32	; 50
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	de bf       	out	0x3e, r29	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	cd bf       	out	0x3d, r28	; 61
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
    1152:	1f 91       	pop	r17
    1154:	0f 91       	pop	r16
    1156:	ff 90       	pop	r15
    1158:	ef 90       	pop	r14
    115a:	df 90       	pop	r13
    115c:	cf 90       	pop	r12
    115e:	bf 90       	pop	r11
    1160:	af 90       	pop	r10
    1162:	08 95       	ret

00001164 <extIntRegisterCallback>:
ExtIntCallback *_extIntCallback0 = NULL;
ExtIntCallback *_extIntCallback1 = NULL;
void *_extIntUserData0 = NULL;
void *_extIntUserData1 = NULL;

void extIntRegisterCallback(ExtIntType type, ExtIntSense sense, bool pullup, ExtIntCallback *callback, void *userData) {
    1164:	0f 93       	push	r16
    1166:	1f 93       	push	r17
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	27 97       	sbiw	r28, 0x07	; 7
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	6a 83       	std	Y+2, r22	; 0x02
    1180:	4b 83       	std	Y+3, r20	; 0x03
    1182:	3d 83       	std	Y+5, r19	; 0x05
    1184:	2c 83       	std	Y+4, r18	; 0x04
    1186:	1f 83       	std	Y+7, r17	; 0x07
    1188:	0e 83       	std	Y+6, r16	; 0x06
	switch (type) {
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	88 2f       	mov	r24, r24
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	21 f0       	breq	.+8      	; 0x119c <extIntRegisterCallback+0x38>
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	09 f4       	brne	.+2      	; 0x119a <extIntRegisterCallback+0x36>
    1198:	6a c0       	rjmp	.+212    	; 0x126e <extIntRegisterCallback+0x10a>
			break;

		}
		// no default
	}
}
    119a:	d2 c0       	rjmp	.+420    	; 0x1340 <extIntRegisterCallback+0x1dc>
void *_extIntUserData1 = NULL;

void extIntRegisterCallback(ExtIntType type, ExtIntSense sense, bool pullup, ExtIntCallback *callback, void *userData) {
	switch (type) {
		case EXT_INT_0 : {
			_extIntCallback0 = callback;
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	9d 81       	ldd	r25, Y+5	; 0x05
    11a0:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <_extIntCallback0+0x1>
    11a4:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <_extIntCallback0>
			// Set pin as input (Using for interrupt INT0)
			EXT_INT_DDR &= ~_BV(EXT_INT_PIN_0);
    11a8:	81 e3       	ldi	r24, 0x31	; 49
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	21 e3       	ldi	r18, 0x31	; 49
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	f9 01       	movw	r30, r18
    11b2:	20 81       	ld	r18, Z
    11b4:	2b 7f       	andi	r18, 0xFB	; 251
    11b6:	fc 01       	movw	r30, r24
    11b8:	20 83       	st	Z, r18
			// Enable PD2 pull-up resistor
			if (pullup == true) {
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	88 23       	and	r24, r24
    11be:	51 f0       	breq	.+20     	; 0x11d4 <extIntRegisterCallback+0x70>
				EXT_INT_PORT |= _BV(EXT_INT_PIN_0);
    11c0:	82 e3       	ldi	r24, 0x32	; 50
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	22 e3       	ldi	r18, 0x32	; 50
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	f9 01       	movw	r30, r18
    11ca:	20 81       	ld	r18, Z
    11cc:	24 60       	ori	r18, 0x04	; 4
    11ce:	fc 01       	movw	r30, r24
    11d0:	20 83       	st	Z, r18
    11d2:	09 c0       	rjmp	.+18     	; 0x11e6 <extIntRegisterCallback+0x82>
				} else {
				EXT_INT_PORT &= ~_BV(EXT_INT_PIN_0);
    11d4:	82 e3       	ldi	r24, 0x32	; 50
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	22 e3       	ldi	r18, 0x32	; 50
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	f9 01       	movw	r30, r18
    11de:	20 81       	ld	r18, Z
    11e0:	2b 7f       	andi	r18, 0xFB	; 251
    11e2:	fc 01       	movw	r30, r24
    11e4:	20 83       	st	Z, r18
			}
			MCUCR &= ~(EXT_INT_CONF_0_ALL_BITS);
    11e6:	85 e5       	ldi	r24, 0x55	; 85
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	25 e5       	ldi	r18, 0x55	; 85
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	f9 01       	movw	r30, r18
    11f0:	20 81       	ld	r18, Z
    11f2:	2c 7f       	andi	r18, 0xFC	; 252
    11f4:	fc 01       	movw	r30, r24
    11f6:	20 83       	st	Z, r18
			switch (sense) {
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	88 2f       	mov	r24, r24
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	82 30       	cpi	r24, 0x02	; 2
    1200:	91 05       	cpc	r25, r1
    1202:	79 f0       	breq	.+30     	; 0x1222 <extIntRegisterCallback+0xbe>
    1204:	83 30       	cpi	r24, 0x03	; 3
    1206:	91 05       	cpc	r25, r1
    1208:	b1 f0       	breq	.+44     	; 0x1236 <extIntRegisterCallback+0xd2>
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	f1 f4       	brne	.+60     	; 0x124a <extIntRegisterCallback+0xe6>
				case EXT_INT_LOGICAL_CHANGE : {
					MCUCR |= EXT_INT_CONF_0_LOGICAL_CHANGE;
    120e:	85 e5       	ldi	r24, 0x55	; 85
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	25 e5       	ldi	r18, 0x55	; 85
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	f9 01       	movw	r30, r18
    1218:	20 81       	ld	r18, Z
    121a:	21 60       	ori	r18, 0x01	; 1
    121c:	fc 01       	movw	r30, r24
    121e:	20 83       	st	Z, r18
					break;
    1220:	1c c0       	rjmp	.+56     	; 0x125a <extIntRegisterCallback+0xf6>
				}
				case EXT_INT_FALLING_EDGE : {
					MCUCR |= EXT_INT_CONF_0_FALLING_EDGE;
    1222:	85 e5       	ldi	r24, 0x55	; 85
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	25 e5       	ldi	r18, 0x55	; 85
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	f9 01       	movw	r30, r18
    122c:	20 81       	ld	r18, Z
    122e:	22 60       	ori	r18, 0x02	; 2
    1230:	fc 01       	movw	r30, r24
    1232:	20 83       	st	Z, r18
					break;
    1234:	12 c0       	rjmp	.+36     	; 0x125a <extIntRegisterCallback+0xf6>
				}
				case EXT_INT_RISING_EDGE : {
					MCUCR |= EXT_INT_CONF_0_RISING_EDGE;
    1236:	85 e5       	ldi	r24, 0x55	; 85
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	25 e5       	ldi	r18, 0x55	; 85
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	f9 01       	movw	r30, r18
    1240:	20 81       	ld	r18, Z
    1242:	23 60       	ori	r18, 0x03	; 3
    1244:	fc 01       	movw	r30, r24
    1246:	20 83       	st	Z, r18
					break;
    1248:	08 c0       	rjmp	.+16     	; 0x125a <extIntRegisterCallback+0xf6>
				}
				// Low Level
				default : {
					MCUCR |= EXT_INT_CONF_0_LOW_LEVEL;
    124a:	85 e5       	ldi	r24, 0x55	; 85
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	25 e5       	ldi	r18, 0x55	; 85
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	f9 01       	movw	r30, r18
    1254:	20 81       	ld	r18, Z
    1256:	fc 01       	movw	r30, r24
    1258:	20 83       	st	Z, r18
				}
			}
			GICR |= _BV(INT0);
    125a:	8b e5       	ldi	r24, 0x5B	; 91
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	2b e5       	ldi	r18, 0x5B	; 91
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	f9 01       	movw	r30, r18
    1264:	20 81       	ld	r18, Z
    1266:	20 64       	ori	r18, 0x40	; 64
    1268:	fc 01       	movw	r30, r24
    126a:	20 83       	st	Z, r18
			break;
    126c:	69 c0       	rjmp	.+210    	; 0x1340 <extIntRegisterCallback+0x1dc>
		}
		case EXT_INT_1 : {
			_extIntCallback1 = callback;
    126e:	8c 81       	ldd	r24, Y+4	; 0x04
    1270:	9d 81       	ldd	r25, Y+5	; 0x05
    1272:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <_extIntCallback1+0x1>
    1276:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <_extIntCallback1>
			// Set pin as input (Using for interrupt INT0)
			EXT_INT_DDR &= ~_BV(EXT_INT_PIN_1);
    127a:	81 e3       	ldi	r24, 0x31	; 49
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	21 e3       	ldi	r18, 0x31	; 49
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	f9 01       	movw	r30, r18
    1284:	20 81       	ld	r18, Z
    1286:	27 7f       	andi	r18, 0xF7	; 247
    1288:	fc 01       	movw	r30, r24
    128a:	20 83       	st	Z, r18
			// Enable PD2 pull-up resistor
			if (pullup == true) {
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	88 23       	and	r24, r24
    1290:	51 f0       	breq	.+20     	; 0x12a6 <extIntRegisterCallback+0x142>
				EXT_INT_PORT |= _BV(EXT_INT_PIN_1);
    1292:	82 e3       	ldi	r24, 0x32	; 50
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	22 e3       	ldi	r18, 0x32	; 50
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	f9 01       	movw	r30, r18
    129c:	20 81       	ld	r18, Z
    129e:	28 60       	ori	r18, 0x08	; 8
    12a0:	fc 01       	movw	r30, r24
    12a2:	20 83       	st	Z, r18
    12a4:	09 c0       	rjmp	.+18     	; 0x12b8 <extIntRegisterCallback+0x154>
				} else {
				EXT_INT_PORT &= ~_BV(EXT_INT_PIN_1);
    12a6:	82 e3       	ldi	r24, 0x32	; 50
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	22 e3       	ldi	r18, 0x32	; 50
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	f9 01       	movw	r30, r18
    12b0:	20 81       	ld	r18, Z
    12b2:	27 7f       	andi	r18, 0xF7	; 247
    12b4:	fc 01       	movw	r30, r24
    12b6:	20 83       	st	Z, r18
			}
			MCUCR &= ~(EXT_INT_CONF_1_ALL_BITS);
    12b8:	85 e5       	ldi	r24, 0x55	; 85
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	25 e5       	ldi	r18, 0x55	; 85
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	f9 01       	movw	r30, r18
    12c2:	20 81       	ld	r18, Z
    12c4:	23 7f       	andi	r18, 0xF3	; 243
    12c6:	fc 01       	movw	r30, r24
    12c8:	20 83       	st	Z, r18
			switch (sense) {
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	88 2f       	mov	r24, r24
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	82 30       	cpi	r24, 0x02	; 2
    12d2:	91 05       	cpc	r25, r1
    12d4:	79 f0       	breq	.+30     	; 0x12f4 <extIntRegisterCallback+0x190>
    12d6:	83 30       	cpi	r24, 0x03	; 3
    12d8:	91 05       	cpc	r25, r1
    12da:	b1 f0       	breq	.+44     	; 0x1308 <extIntRegisterCallback+0x1a4>
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	f1 f4       	brne	.+60     	; 0x131c <extIntRegisterCallback+0x1b8>
				case EXT_INT_LOGICAL_CHANGE : {
					MCUCR |= EXT_INT_CONF_1_LOGICAL_CHANGE;
    12e0:	85 e5       	ldi	r24, 0x55	; 85
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	25 e5       	ldi	r18, 0x55	; 85
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	f9 01       	movw	r30, r18
    12ea:	20 81       	ld	r18, Z
    12ec:	24 60       	ori	r18, 0x04	; 4
    12ee:	fc 01       	movw	r30, r24
    12f0:	20 83       	st	Z, r18
					break;
    12f2:	1c c0       	rjmp	.+56     	; 0x132c <extIntRegisterCallback+0x1c8>
				}
				case EXT_INT_FALLING_EDGE : {
					MCUCR |= EXT_INT_CONF_1_FALLING_EDGE;
    12f4:	85 e5       	ldi	r24, 0x55	; 85
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	25 e5       	ldi	r18, 0x55	; 85
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	f9 01       	movw	r30, r18
    12fe:	20 81       	ld	r18, Z
    1300:	28 60       	ori	r18, 0x08	; 8
    1302:	fc 01       	movw	r30, r24
    1304:	20 83       	st	Z, r18
					break;
    1306:	12 c0       	rjmp	.+36     	; 0x132c <extIntRegisterCallback+0x1c8>
				}
				case EXT_INT_RISING_EDGE : {
					MCUCR |= EXT_INT_CONF_1_RISING_EDGE;
    1308:	85 e5       	ldi	r24, 0x55	; 85
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	25 e5       	ldi	r18, 0x55	; 85
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	f9 01       	movw	r30, r18
    1312:	20 81       	ld	r18, Z
    1314:	2c 60       	ori	r18, 0x0C	; 12
    1316:	fc 01       	movw	r30, r24
    1318:	20 83       	st	Z, r18
					break;
    131a:	08 c0       	rjmp	.+16     	; 0x132c <extIntRegisterCallback+0x1c8>
				}
				// Low Level
				default : {
					MCUCR |= EXT_INT_CONF_1_LOW_LEVEL;
    131c:	85 e5       	ldi	r24, 0x55	; 85
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	25 e5       	ldi	r18, 0x55	; 85
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	f9 01       	movw	r30, r18
    1326:	20 81       	ld	r18, Z
    1328:	fc 01       	movw	r30, r24
    132a:	20 83       	st	Z, r18
				}
			}
			GICR |= _BV(INT0);
    132c:	8b e5       	ldi	r24, 0x5B	; 91
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	2b e5       	ldi	r18, 0x5B	; 91
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	f9 01       	movw	r30, r18
    1336:	20 81       	ld	r18, Z
    1338:	20 64       	ori	r18, 0x40	; 64
    133a:	fc 01       	movw	r30, r24
    133c:	20 83       	st	Z, r18
			break;
    133e:	00 00       	nop

		}
		// no default
	}
}
    1340:	00 00       	nop
    1342:	27 96       	adiw	r28, 0x07	; 7
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	1f 91       	pop	r17
    1354:	0f 91       	pop	r16
    1356:	08 95       	ret

00001358 <extIntDisable>:

void extIntDisable(ExtIntType type) {
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	1f 92       	push	r1
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	89 83       	std	Y+1, r24	; 0x01
	switch (type) {
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	88 2f       	mov	r24, r24
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	19 f0       	breq	.+6      	; 0x1374 <extIntDisable+0x1c>
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	59 f0       	breq	.+22     	; 0x1388 <extIntDisable+0x30>
			GICR &= ~_BV(INT1);
			break;
		}
		// no default
	}
}
    1372:	14 c0       	rjmp	.+40     	; 0x139c <extIntDisable+0x44>
}

void extIntDisable(ExtIntType type) {
	switch (type) {
		case EXT_INT_0 : {
			GICR &= ~_BV(INT0);
    1374:	8b e5       	ldi	r24, 0x5B	; 91
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	2b e5       	ldi	r18, 0x5B	; 91
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	f9 01       	movw	r30, r18
    137e:	20 81       	ld	r18, Z
    1380:	2f 7b       	andi	r18, 0xBF	; 191
    1382:	fc 01       	movw	r30, r24
    1384:	20 83       	st	Z, r18
			break;
    1386:	0a c0       	rjmp	.+20     	; 0x139c <extIntDisable+0x44>
		}
		case EXT_INT_1 : {
			GICR &= ~_BV(INT1);
    1388:	8b e5       	ldi	r24, 0x5B	; 91
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	2b e5       	ldi	r18, 0x5B	; 91
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	f9 01       	movw	r30, r18
    1392:	20 81       	ld	r18, Z
    1394:	2f 77       	andi	r18, 0x7F	; 127
    1396:	fc 01       	movw	r30, r24
    1398:	20 83       	st	Z, r18
			break;
    139a:	00 00       	nop
		}
		// no default
	}
}
    139c:	00 00       	nop
    139e:	0f 90       	pop	r0
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	08 95       	ret

000013a6 <__vector_1>:

ISR(INT0_vect) {
    13a6:	1f 92       	push	r1
    13a8:	0f 92       	push	r0
    13aa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    13ae:	0f 92       	push	r0
    13b0:	11 24       	eor	r1, r1
    13b2:	2f 93       	push	r18
    13b4:	3f 93       	push	r19
    13b6:	4f 93       	push	r20
    13b8:	5f 93       	push	r21
    13ba:	6f 93       	push	r22
    13bc:	7f 93       	push	r23
    13be:	8f 93       	push	r24
    13c0:	9f 93       	push	r25
    13c2:	af 93       	push	r26
    13c4:	bf 93       	push	r27
    13c6:	ef 93       	push	r30
    13c8:	ff 93       	push	r31
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
	if (_extIntCallback0 != NULL) {
    13d2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <_extIntCallback0>
    13d6:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <_extIntCallback0+0x1>
    13da:	89 2b       	or	r24, r25
    13dc:	51 f0       	breq	.+20     	; 0x13f2 <__vector_1+0x4c>
		_extIntCallback0(_extIntUserData0);
    13de:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <_extIntCallback0>
    13e2:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <_extIntCallback0+0x1>
    13e6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <_extIntUserData0>
    13ea:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <_extIntUserData0+0x1>
    13ee:	f9 01       	movw	r30, r18
    13f0:	09 95       	icall
	}
}
    13f2:	00 00       	nop
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	ff 91       	pop	r31
    13fa:	ef 91       	pop	r30
    13fc:	bf 91       	pop	r27
    13fe:	af 91       	pop	r26
    1400:	9f 91       	pop	r25
    1402:	8f 91       	pop	r24
    1404:	7f 91       	pop	r23
    1406:	6f 91       	pop	r22
    1408:	5f 91       	pop	r21
    140a:	4f 91       	pop	r20
    140c:	3f 91       	pop	r19
    140e:	2f 91       	pop	r18
    1410:	0f 90       	pop	r0
    1412:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1416:	0f 90       	pop	r0
    1418:	1f 90       	pop	r1
    141a:	18 95       	reti

0000141c <__vector_2>:

ISR(INT1_vect) {
    141c:	1f 92       	push	r1
    141e:	0f 92       	push	r0
    1420:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1424:	0f 92       	push	r0
    1426:	11 24       	eor	r1, r1
    1428:	2f 93       	push	r18
    142a:	3f 93       	push	r19
    142c:	4f 93       	push	r20
    142e:	5f 93       	push	r21
    1430:	6f 93       	push	r22
    1432:	7f 93       	push	r23
    1434:	8f 93       	push	r24
    1436:	9f 93       	push	r25
    1438:	af 93       	push	r26
    143a:	bf 93       	push	r27
    143c:	ef 93       	push	r30
    143e:	ff 93       	push	r31
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
	if (_extIntCallback1 != NULL) {
    1448:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <_extIntCallback1>
    144c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <_extIntCallback1+0x1>
    1450:	89 2b       	or	r24, r25
    1452:	51 f0       	breq	.+20     	; 0x1468 <__vector_2+0x4c>
		_extIntCallback1(_extIntUserData1);
    1454:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <_extIntCallback1>
    1458:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <_extIntCallback1+0x1>
    145c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <_extIntUserData1>
    1460:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <_extIntUserData1+0x1>
    1464:	f9 01       	movw	r30, r18
    1466:	09 95       	icall
	}
}
    1468:	00 00       	nop
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	ff 91       	pop	r31
    1470:	ef 91       	pop	r30
    1472:	bf 91       	pop	r27
    1474:	af 91       	pop	r26
    1476:	9f 91       	pop	r25
    1478:	8f 91       	pop	r24
    147a:	7f 91       	pop	r23
    147c:	6f 91       	pop	r22
    147e:	5f 91       	pop	r21
    1480:	4f 91       	pop	r20
    1482:	3f 91       	pop	r19
    1484:	2f 91       	pop	r18
    1486:	0f 90       	pop	r0
    1488:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    148c:	0f 90       	pop	r0
    148e:	1f 90       	pop	r1
    1490:	18 95       	reti

00001492 <lcdInit>:
 * It combines the value with the current backlight state before sending it
 * @param data - data value to be sent to the LCD port cobined with current backlight state
 */
void lcdPortWrite(uint8_t data);

void lcdInit(uint8_t lcdCols, uint8_t lcdRows, uint8_t charSize) {
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	00 d0       	rcall	.+0      	; 0x1498 <lcdInit+0x6>
    1498:	1f 92       	push	r1
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	89 83       	std	Y+1, r24	; 0x01
    14a0:	6a 83       	std	Y+2, r22	; 0x02
    14a2:	4b 83       	std	Y+3, r20	; 0x03
    _cols = lcdCols;
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <_cols>
    _rows = lcdRows;
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <_rows>
    _charSize = charSize;
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <_charSize>
    _backlightVal = LCD_BACKLIGHT;
    14b6:	80 e8       	ldi	r24, 0x80	; 128
    14b8:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <_backlightVal>
    // init rest of variables;
    _displayFunction = 0;
    14bc:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <_displayFunction>
    _displayControl = 0;
    14c0:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <_displayControl>
    _displayMode = 0;
    14c4:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <_displayMode>
}
    14c8:	00 00       	nop
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	08 95       	ret

000014d6 <lcdBegin>:

void lcdBegin(void) {
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	ce 58       	subi	r28, 0x8E	; 142
    14e4:	d1 09       	sbc	r29, r1
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    // Use all pins of port (from config.h) and reset them to 0
    LCD_DDR = 0xFF;
    14f0:	8a e3       	ldi	r24, 0x3A	; 58
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	2f ef       	ldi	r18, 0xFF	; 255
    14f6:	fc 01       	movw	r30, r24
    14f8:	20 83       	st	Z, r18
    LCD_PORT = 0x00;
    14fa:	8b e3       	ldi	r24, 0x3B	; 59
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	fc 01       	movw	r30, r24
    1500:	10 82       	st	Z, r1
    _displayFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    1502:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <_displayFunction>

    if (_rows > 1) {
    1506:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <_rows>
    150a:	82 30       	cpi	r24, 0x02	; 2
    150c:	28 f0       	brcs	.+10     	; 0x1518 <lcdBegin+0x42>
        _displayFunction |= LCD_2LINE;
    150e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <_displayFunction>
    1512:	88 60       	ori	r24, 0x08	; 8
    1514:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_displayFunction>
    }

    // for some 1 line displays you can select a 10 pixel high font
    if ((_charSize != 0) && (_rows == 1)) {
    1518:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <_charSize>
    151c:	88 23       	and	r24, r24
    151e:	49 f0       	breq	.+18     	; 0x1532 <lcdBegin+0x5c>
    1520:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <_rows>
    1524:	81 30       	cpi	r24, 0x01	; 1
    1526:	29 f4       	brne	.+10     	; 0x1532 <lcdBegin+0x5c>
        _displayFunction |= LCD_5x10DOTS;
    1528:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <_displayFunction>
    152c:	84 60       	ori	r24, 0x04	; 4
    152e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_displayFunction>
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	a8 e4       	ldi	r26, 0x48	; 72
    1538:	b2 e4       	ldi	r27, 0x42	; 66
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	9a 83       	std	Y+2, r25	; 0x02
    153e:	ab 83       	std	Y+3, r26	; 0x03
    1540:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1542:	8e 01       	movw	r16, r28
    1544:	0b 57       	subi	r16, 0x7B	; 123
    1546:	1f 4f       	sbci	r17, 0xFF	; 255
    1548:	2d ec       	ldi	r18, 0xCD	; 205
    154a:	3c ec       	ldi	r19, 0xCC	; 204
    154c:	4c e2       	ldi	r20, 0x2C	; 44
    154e:	55 e4       	ldi	r21, 0x45	; 69
    1550:	69 81       	ldd	r22, Y+1	; 0x01
    1552:	7a 81       	ldd	r23, Y+2	; 0x02
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	f8 01       	movw	r30, r16
    1562:	80 83       	st	Z, r24
    1564:	91 83       	std	Z+1, r25	; 0x01
    1566:	a2 83       	std	Z+2, r26	; 0x02
    1568:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    156a:	ce 01       	movw	r24, r28
    156c:	8b 57       	subi	r24, 0x7B	; 123
    156e:	9f 4f       	sbci	r25, 0xFF	; 255
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e8       	ldi	r20, 0x80	; 128
    1576:	5f e3       	ldi	r21, 0x3F	; 63
    1578:	fc 01       	movw	r30, r24
    157a:	60 81       	ld	r22, Z
    157c:	71 81       	ldd	r23, Z+1	; 0x01
    157e:	82 81       	ldd	r24, Z+2	; 0x02
    1580:	93 81       	ldd	r25, Z+3	; 0x03
    1582:	0e 94 18 2c 	call	0x5830	; 0x5830 <__cmpsf2>
    1586:	88 23       	and	r24, r24
    1588:	4c f4       	brge	.+18     	; 0x159c <lcdBegin+0xc6>
		__ticks = 1;
    158a:	ce 01       	movw	r24, r28
    158c:	87 57       	subi	r24, 0x77	; 119
    158e:	9f 4f       	sbci	r25, 0xFF	; 255
    1590:	21 e0       	ldi	r18, 0x01	; 1
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	fc 01       	movw	r30, r24
    1596:	31 83       	std	Z+1, r19	; 0x01
    1598:	20 83       	st	Z, r18
    159a:	69 c0       	rjmp	.+210    	; 0x166e <lcdBegin+0x198>
	else if (__tmp > 65535)
    159c:	ce 01       	movw	r24, r28
    159e:	8b 57       	subi	r24, 0x7B	; 123
    15a0:	9f 4f       	sbci	r25, 0xFF	; 255
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	3f ef       	ldi	r19, 0xFF	; 255
    15a6:	4f e7       	ldi	r20, 0x7F	; 127
    15a8:	57 e4       	ldi	r21, 0x47	; 71
    15aa:	fc 01       	movw	r30, r24
    15ac:	60 81       	ld	r22, Z
    15ae:	71 81       	ldd	r23, Z+1	; 0x01
    15b0:	82 81       	ldd	r24, Z+2	; 0x02
    15b2:	93 81       	ldd	r25, Z+3	; 0x03
    15b4:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    15b8:	18 16       	cp	r1, r24
    15ba:	0c f0       	brlt	.+2      	; 0x15be <lcdBegin+0xe8>
    15bc:	46 c0       	rjmp	.+140    	; 0x164a <lcdBegin+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	40 e2       	ldi	r20, 0x20	; 32
    15c4:	51 e4       	ldi	r21, 0x41	; 65
    15c6:	69 81       	ldd	r22, Y+1	; 0x01
    15c8:	7a 81       	ldd	r23, Y+2	; 0x02
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	9c 81       	ldd	r25, Y+4	; 0x04
    15ce:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	8e 01       	movw	r16, r28
    15d8:	07 57       	subi	r16, 0x77	; 119
    15da:	1f 4f       	sbci	r17, 0xFF	; 255
    15dc:	bc 01       	movw	r22, r24
    15de:	cd 01       	movw	r24, r26
    15e0:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	f8 01       	movw	r30, r16
    15ea:	91 83       	std	Z+1, r25	; 0x01
    15ec:	80 83       	st	Z, r24
    15ee:	24 c0       	rjmp	.+72     	; 0x1638 <lcdBegin+0x162>
    15f0:	ce 01       	movw	r24, r28
    15f2:	85 57       	subi	r24, 0x75	; 117
    15f4:	9f 4f       	sbci	r25, 0xFF	; 255
    15f6:	24 e1       	ldi	r18, 0x14	; 20
    15f8:	31 e0       	ldi	r19, 0x01	; 1
    15fa:	fc 01       	movw	r30, r24
    15fc:	31 83       	std	Z+1, r19	; 0x01
    15fe:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1600:	ce 01       	movw	r24, r28
    1602:	85 57       	subi	r24, 0x75	; 117
    1604:	9f 4f       	sbci	r25, 0xFF	; 255
    1606:	fc 01       	movw	r30, r24
    1608:	80 81       	ld	r24, Z
    160a:	91 81       	ldd	r25, Z+1	; 0x01
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <lcdBegin+0x136>
    1610:	9e 01       	movw	r18, r28
    1612:	25 57       	subi	r18, 0x75	; 117
    1614:	3f 4f       	sbci	r19, 0xFF	; 255
    1616:	f9 01       	movw	r30, r18
    1618:	91 83       	std	Z+1, r25	; 0x01
    161a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    161c:	ce 01       	movw	r24, r28
    161e:	87 57       	subi	r24, 0x77	; 119
    1620:	9f 4f       	sbci	r25, 0xFF	; 255
    1622:	9e 01       	movw	r18, r28
    1624:	27 57       	subi	r18, 0x77	; 119
    1626:	3f 4f       	sbci	r19, 0xFF	; 255
    1628:	f9 01       	movw	r30, r18
    162a:	20 81       	ld	r18, Z
    162c:	31 81       	ldd	r19, Z+1	; 0x01
    162e:	21 50       	subi	r18, 0x01	; 1
    1630:	31 09       	sbc	r19, r1
    1632:	fc 01       	movw	r30, r24
    1634:	31 83       	std	Z+1, r19	; 0x01
    1636:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1638:	ce 01       	movw	r24, r28
    163a:	87 57       	subi	r24, 0x77	; 119
    163c:	9f 4f       	sbci	r25, 0xFF	; 255
    163e:	fc 01       	movw	r30, r24
    1640:	80 81       	ld	r24, Z
    1642:	91 81       	ldd	r25, Z+1	; 0x01
    1644:	89 2b       	or	r24, r25
    1646:	a1 f6       	brne	.-88     	; 0x15f0 <lcdBegin+0x11a>
    1648:	2c c0       	rjmp	.+88     	; 0x16a2 <lcdBegin+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    164a:	8e 01       	movw	r16, r28
    164c:	07 57       	subi	r16, 0x77	; 119
    164e:	1f 4f       	sbci	r17, 0xFF	; 255
    1650:	ce 01       	movw	r24, r28
    1652:	8b 57       	subi	r24, 0x7B	; 123
    1654:	9f 4f       	sbci	r25, 0xFF	; 255
    1656:	fc 01       	movw	r30, r24
    1658:	60 81       	ld	r22, Z
    165a:	71 81       	ldd	r23, Z+1	; 0x01
    165c:	82 81       	ldd	r24, Z+2	; 0x02
    165e:	93 81       	ldd	r25, Z+3	; 0x03
    1660:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	f8 01       	movw	r30, r16
    166a:	91 83       	std	Z+1, r25	; 0x01
    166c:	80 83       	st	Z, r24
    166e:	ce 01       	movw	r24, r28
    1670:	83 57       	subi	r24, 0x73	; 115
    1672:	9f 4f       	sbci	r25, 0xFF	; 255
    1674:	9e 01       	movw	r18, r28
    1676:	27 57       	subi	r18, 0x77	; 119
    1678:	3f 4f       	sbci	r19, 0xFF	; 255
    167a:	f9 01       	movw	r30, r18
    167c:	20 81       	ld	r18, Z
    167e:	31 81       	ldd	r19, Z+1	; 0x01
    1680:	fc 01       	movw	r30, r24
    1682:	31 83       	std	Z+1, r19	; 0x01
    1684:	20 83       	st	Z, r18
    1686:	ce 01       	movw	r24, r28
    1688:	83 57       	subi	r24, 0x73	; 115
    168a:	9f 4f       	sbci	r25, 0xFF	; 255
    168c:	fc 01       	movw	r30, r24
    168e:	80 81       	ld	r24, Z
    1690:	91 81       	ldd	r25, Z+1	; 0x01
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <lcdBegin+0x1bc>
    1696:	9e 01       	movw	r18, r28
    1698:	23 57       	subi	r18, 0x73	; 115
    169a:	3f 4f       	sbci	r19, 0xFF	; 255
    169c:	f9 01       	movw	r30, r18
    169e:	91 83       	std	Z+1, r25	; 0x01
    16a0:	80 83       	st	Z, r24
    // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
    // according to data sheet, we need at least 40ms after power rises above 2.7V
    // before sending commands. MCU can turn on way buffer 4.5V so we'll wait 50
    _delay_ms(50);
    // Now we pull both RS and R/W low to begin commands
    _backlightVal = LCD_NOBACKLIGHT;
    16a2:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <_backlightVal>
    lcdPortWrite(0);    // reset expander and turn back light off
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <lcdPortWrite>
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	aa e7       	ldi	r26, 0x7A	; 122
    16b2:	b4 e4       	ldi	r27, 0x44	; 68
    16b4:	8d 83       	std	Y+5, r24	; 0x05
    16b6:	9e 83       	std	Y+6, r25	; 0x06
    16b8:	af 83       	std	Y+7, r26	; 0x07
    16ba:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    16bc:	8e 01       	movw	r16, r28
    16be:	07 59       	subi	r16, 0x97	; 151
    16c0:	1f 4f       	sbci	r17, 0xFF	; 255
    16c2:	2a ef       	ldi	r18, 0xFA	; 250
    16c4:	3d ee       	ldi	r19, 0xED	; 237
    16c6:	4b e6       	ldi	r20, 0x6B	; 107
    16c8:	50 e4       	ldi	r21, 0x40	; 64
    16ca:	6d 81       	ldd	r22, Y+5	; 0x05
    16cc:	7e 81       	ldd	r23, Y+6	; 0x06
    16ce:	8f 81       	ldd	r24, Y+7	; 0x07
    16d0:	98 85       	ldd	r25, Y+8	; 0x08
    16d2:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	f8 01       	movw	r30, r16
    16dc:	80 83       	st	Z, r24
    16de:	91 83       	std	Z+1, r25	; 0x01
    16e0:	a2 83       	std	Z+2, r26	; 0x02
    16e2:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    16e4:	8e 01       	movw	r16, r28
    16e6:	03 59       	subi	r16, 0x93	; 147
    16e8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ea:	2c e7       	ldi	r18, 0x7C	; 124
    16ec:	32 ef       	ldi	r19, 0xF2	; 242
    16ee:	40 e3       	ldi	r20, 0x30	; 48
    16f0:	50 e4       	ldi	r21, 0x40	; 64
    16f2:	6d 81       	ldd	r22, Y+5	; 0x05
    16f4:	7e 81       	ldd	r23, Y+6	; 0x06
    16f6:	8f 81       	ldd	r24, Y+7	; 0x07
    16f8:	98 85       	ldd	r25, Y+8	; 0x08
    16fa:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	f8 01       	movw	r30, r16
    1704:	80 83       	st	Z, r24
    1706:	91 83       	std	Z+1, r25	; 0x01
    1708:	a2 83       	std	Z+2, r26	; 0x02
    170a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    170c:	ce 01       	movw	r24, r28
    170e:	87 59       	subi	r24, 0x97	; 151
    1710:	9f 4f       	sbci	r25, 0xFF	; 255
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e8       	ldi	r20, 0x80	; 128
    1718:	5f e3       	ldi	r21, 0x3F	; 63
    171a:	fc 01       	movw	r30, r24
    171c:	60 81       	ld	r22, Z
    171e:	71 81       	ldd	r23, Z+1	; 0x01
    1720:	82 81       	ldd	r24, Z+2	; 0x02
    1722:	93 81       	ldd	r25, Z+3	; 0x03
    1724:	0e 94 18 2c 	call	0x5830	; 0x5830 <__cmpsf2>
    1728:	88 23       	and	r24, r24
    172a:	3c f4       	brge	.+14     	; 0x173a <lcdBegin+0x264>
		__ticks = 1;
    172c:	ce 01       	movw	r24, r28
    172e:	8f 58       	subi	r24, 0x8F	; 143
    1730:	9f 4f       	sbci	r25, 0xFF	; 255
    1732:	21 e0       	ldi	r18, 0x01	; 1
    1734:	fc 01       	movw	r30, r24
    1736:	20 83       	st	Z, r18
    1738:	2c c1       	rjmp	.+600    	; 0x1992 <lcdBegin+0x4bc>
	else if (__tmp2 > 65535)
    173a:	ce 01       	movw	r24, r28
    173c:	83 59       	subi	r24, 0x93	; 147
    173e:	9f 4f       	sbci	r25, 0xFF	; 255
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	3f ef       	ldi	r19, 0xFF	; 255
    1744:	4f e7       	ldi	r20, 0x7F	; 127
    1746:	57 e4       	ldi	r21, 0x47	; 71
    1748:	fc 01       	movw	r30, r24
    174a:	60 81       	ld	r22, Z
    174c:	71 81       	ldd	r23, Z+1	; 0x01
    174e:	82 81       	ldd	r24, Z+2	; 0x02
    1750:	93 81       	ldd	r25, Z+3	; 0x03
    1752:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    1756:	18 16       	cp	r1, r24
    1758:	0c f0       	brlt	.+2      	; 0x175c <lcdBegin+0x286>
    175a:	cd c0       	rjmp	.+410    	; 0x18f6 <lcdBegin+0x420>
	{
		_delay_ms(__us / 1000.0);
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	4a e7       	ldi	r20, 0x7A	; 122
    1762:	54 e4       	ldi	r21, 0x44	; 68
    1764:	6d 81       	ldd	r22, Y+5	; 0x05
    1766:	7e 81       	ldd	r23, Y+6	; 0x06
    1768:	8f 81       	ldd	r24, Y+7	; 0x07
    176a:	98 85       	ldd	r25, Y+8	; 0x08
    176c:	0e 94 1d 2c 	call	0x583a	; 0x583a <__divsf3>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	9e 01       	movw	r18, r28
    1776:	2e 58       	subi	r18, 0x8E	; 142
    1778:	3f 4f       	sbci	r19, 0xFF	; 255
    177a:	f9 01       	movw	r30, r18
    177c:	80 83       	st	Z, r24
    177e:	91 83       	std	Z+1, r25	; 0x01
    1780:	a2 83       	std	Z+2, r26	; 0x02
    1782:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1784:	8e 01       	movw	r16, r28
    1786:	0a 58       	subi	r16, 0x8A	; 138
    1788:	1f 4f       	sbci	r17, 0xFF	; 255
    178a:	ce 01       	movw	r24, r28
    178c:	8e 58       	subi	r24, 0x8E	; 142
    178e:	9f 4f       	sbci	r25, 0xFF	; 255
    1790:	2d ec       	ldi	r18, 0xCD	; 205
    1792:	3c ec       	ldi	r19, 0xCC	; 204
    1794:	4c e2       	ldi	r20, 0x2C	; 44
    1796:	55 e4       	ldi	r21, 0x45	; 69
    1798:	fc 01       	movw	r30, r24
    179a:	60 81       	ld	r22, Z
    179c:	71 81       	ldd	r23, Z+1	; 0x01
    179e:	82 81       	ldd	r24, Z+2	; 0x02
    17a0:	93 81       	ldd	r25, Z+3	; 0x03
    17a2:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	f8 01       	movw	r30, r16
    17ac:	80 83       	st	Z, r24
    17ae:	91 83       	std	Z+1, r25	; 0x01
    17b0:	a2 83       	std	Z+2, r26	; 0x02
    17b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17b4:	ce 01       	movw	r24, r28
    17b6:	8a 58       	subi	r24, 0x8A	; 138
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e8       	ldi	r20, 0x80	; 128
    17c0:	5f e3       	ldi	r21, 0x3F	; 63
    17c2:	fc 01       	movw	r30, r24
    17c4:	60 81       	ld	r22, Z
    17c6:	71 81       	ldd	r23, Z+1	; 0x01
    17c8:	82 81       	ldd	r24, Z+2	; 0x02
    17ca:	93 81       	ldd	r25, Z+3	; 0x03
    17cc:	0e 94 18 2c 	call	0x5830	; 0x5830 <__cmpsf2>
    17d0:	88 23       	and	r24, r24
    17d2:	4c f4       	brge	.+18     	; 0x17e6 <lcdBegin+0x310>
		__ticks = 1;
    17d4:	ce 01       	movw	r24, r28
    17d6:	86 58       	subi	r24, 0x86	; 134
    17d8:	9f 4f       	sbci	r25, 0xFF	; 255
    17da:	21 e0       	ldi	r18, 0x01	; 1
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	fc 01       	movw	r30, r24
    17e0:	31 83       	std	Z+1, r19	; 0x01
    17e2:	20 83       	st	Z, r18
    17e4:	6d c0       	rjmp	.+218    	; 0x18c0 <lcdBegin+0x3ea>
	else if (__tmp > 65535)
    17e6:	ce 01       	movw	r24, r28
    17e8:	8a 58       	subi	r24, 0x8A	; 138
    17ea:	9f 4f       	sbci	r25, 0xFF	; 255
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	3f ef       	ldi	r19, 0xFF	; 255
    17f0:	4f e7       	ldi	r20, 0x7F	; 127
    17f2:	57 e4       	ldi	r21, 0x47	; 71
    17f4:	fc 01       	movw	r30, r24
    17f6:	60 81       	ld	r22, Z
    17f8:	71 81       	ldd	r23, Z+1	; 0x01
    17fa:	82 81       	ldd	r24, Z+2	; 0x02
    17fc:	93 81       	ldd	r25, Z+3	; 0x03
    17fe:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    1802:	18 16       	cp	r1, r24
    1804:	0c f0       	brlt	.+2      	; 0x1808 <lcdBegin+0x332>
    1806:	4a c0       	rjmp	.+148    	; 0x189c <lcdBegin+0x3c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1808:	ce 01       	movw	r24, r28
    180a:	8e 58       	subi	r24, 0x8E	; 142
    180c:	9f 4f       	sbci	r25, 0xFF	; 255
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e2       	ldi	r20, 0x20	; 32
    1814:	51 e4       	ldi	r21, 0x41	; 65
    1816:	fc 01       	movw	r30, r24
    1818:	60 81       	ld	r22, Z
    181a:	71 81       	ldd	r23, Z+1	; 0x01
    181c:	82 81       	ldd	r24, Z+2	; 0x02
    181e:	93 81       	ldd	r25, Z+3	; 0x03
    1820:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	8e 01       	movw	r16, r28
    182a:	06 58       	subi	r16, 0x86	; 134
    182c:	1f 4f       	sbci	r17, 0xFF	; 255
    182e:	bc 01       	movw	r22, r24
    1830:	cd 01       	movw	r24, r26
    1832:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	f8 01       	movw	r30, r16
    183c:	91 83       	std	Z+1, r25	; 0x01
    183e:	80 83       	st	Z, r24
    1840:	24 c0       	rjmp	.+72     	; 0x188a <lcdBegin+0x3b4>
    1842:	ce 01       	movw	r24, r28
    1844:	84 58       	subi	r24, 0x84	; 132
    1846:	9f 4f       	sbci	r25, 0xFF	; 255
    1848:	24 e1       	ldi	r18, 0x14	; 20
    184a:	31 e0       	ldi	r19, 0x01	; 1
    184c:	fc 01       	movw	r30, r24
    184e:	31 83       	std	Z+1, r19	; 0x01
    1850:	20 83       	st	Z, r18
    1852:	ce 01       	movw	r24, r28
    1854:	84 58       	subi	r24, 0x84	; 132
    1856:	9f 4f       	sbci	r25, 0xFF	; 255
    1858:	fc 01       	movw	r30, r24
    185a:	80 81       	ld	r24, Z
    185c:	91 81       	ldd	r25, Z+1	; 0x01
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	f1 f7       	brne	.-4      	; 0x185e <lcdBegin+0x388>
    1862:	9e 01       	movw	r18, r28
    1864:	24 58       	subi	r18, 0x84	; 132
    1866:	3f 4f       	sbci	r19, 0xFF	; 255
    1868:	f9 01       	movw	r30, r18
    186a:	91 83       	std	Z+1, r25	; 0x01
    186c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186e:	ce 01       	movw	r24, r28
    1870:	86 58       	subi	r24, 0x86	; 134
    1872:	9f 4f       	sbci	r25, 0xFF	; 255
    1874:	9e 01       	movw	r18, r28
    1876:	26 58       	subi	r18, 0x86	; 134
    1878:	3f 4f       	sbci	r19, 0xFF	; 255
    187a:	f9 01       	movw	r30, r18
    187c:	20 81       	ld	r18, Z
    187e:	31 81       	ldd	r19, Z+1	; 0x01
    1880:	21 50       	subi	r18, 0x01	; 1
    1882:	31 09       	sbc	r19, r1
    1884:	fc 01       	movw	r30, r24
    1886:	31 83       	std	Z+1, r19	; 0x01
    1888:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188a:	ce 01       	movw	r24, r28
    188c:	86 58       	subi	r24, 0x86	; 134
    188e:	9f 4f       	sbci	r25, 0xFF	; 255
    1890:	fc 01       	movw	r30, r24
    1892:	80 81       	ld	r24, Z
    1894:	91 81       	ldd	r25, Z+1	; 0x01
    1896:	89 2b       	or	r24, r25
    1898:	a1 f6       	brne	.-88     	; 0x1842 <lcdBegin+0x36c>
    189a:	7b c0       	rjmp	.+246    	; 0x1992 <lcdBegin+0x4bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189c:	8e 01       	movw	r16, r28
    189e:	06 58       	subi	r16, 0x86	; 134
    18a0:	1f 4f       	sbci	r17, 0xFF	; 255
    18a2:	ce 01       	movw	r24, r28
    18a4:	8a 58       	subi	r24, 0x8A	; 138
    18a6:	9f 4f       	sbci	r25, 0xFF	; 255
    18a8:	fc 01       	movw	r30, r24
    18aa:	60 81       	ld	r22, Z
    18ac:	71 81       	ldd	r23, Z+1	; 0x01
    18ae:	82 81       	ldd	r24, Z+2	; 0x02
    18b0:	93 81       	ldd	r25, Z+3	; 0x03
    18b2:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	f8 01       	movw	r30, r16
    18bc:	91 83       	std	Z+1, r25	; 0x01
    18be:	80 83       	st	Z, r24
    18c0:	ce 01       	movw	r24, r28
    18c2:	82 58       	subi	r24, 0x82	; 130
    18c4:	9f 4f       	sbci	r25, 0xFF	; 255
    18c6:	9e 01       	movw	r18, r28
    18c8:	26 58       	subi	r18, 0x86	; 134
    18ca:	3f 4f       	sbci	r19, 0xFF	; 255
    18cc:	f9 01       	movw	r30, r18
    18ce:	20 81       	ld	r18, Z
    18d0:	31 81       	ldd	r19, Z+1	; 0x01
    18d2:	fc 01       	movw	r30, r24
    18d4:	31 83       	std	Z+1, r19	; 0x01
    18d6:	20 83       	st	Z, r18
    18d8:	ce 01       	movw	r24, r28
    18da:	82 58       	subi	r24, 0x82	; 130
    18dc:	9f 4f       	sbci	r25, 0xFF	; 255
    18de:	fc 01       	movw	r30, r24
    18e0:	80 81       	ld	r24, Z
    18e2:	91 81       	ldd	r25, Z+1	; 0x01
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <lcdBegin+0x40e>
    18e8:	9e 01       	movw	r18, r28
    18ea:	22 58       	subi	r18, 0x82	; 130
    18ec:	3f 4f       	sbci	r19, 0xFF	; 255
    18ee:	f9 01       	movw	r30, r18
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	80 83       	st	Z, r24
    18f4:	4e c0       	rjmp	.+156    	; 0x1992 <lcdBegin+0x4bc>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    18f6:	ce 01       	movw	r24, r28
    18f8:	87 59       	subi	r24, 0x97	; 151
    18fa:	9f 4f       	sbci	r25, 0xFF	; 255
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	4f e7       	ldi	r20, 0x7F	; 127
    1902:	53 e4       	ldi	r21, 0x43	; 67
    1904:	fc 01       	movw	r30, r24
    1906:	60 81       	ld	r22, Z
    1908:	71 81       	ldd	r23, Z+1	; 0x01
    190a:	82 81       	ldd	r24, Z+2	; 0x02
    190c:	93 81       	ldd	r25, Z+3	; 0x03
    190e:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    1912:	18 16       	cp	r1, r24
    1914:	6c f5       	brge	.+90     	; 0x1970 <lcdBegin+0x49a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1916:	8e 01       	movw	r16, r28
    1918:	00 58       	subi	r16, 0x80	; 128
    191a:	1f 4f       	sbci	r17, 0xFF	; 255
    191c:	ce 01       	movw	r24, r28
    191e:	83 59       	subi	r24, 0x93	; 147
    1920:	9f 4f       	sbci	r25, 0xFF	; 255
    1922:	fc 01       	movw	r30, r24
    1924:	60 81       	ld	r22, Z
    1926:	71 81       	ldd	r23, Z+1	; 0x01
    1928:	82 81       	ldd	r24, Z+2	; 0x02
    192a:	93 81       	ldd	r25, Z+3	; 0x03
    192c:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	f8 01       	movw	r30, r16
    1936:	91 83       	std	Z+1, r25	; 0x01
    1938:	80 83       	st	Z, r24
    193a:	ce 01       	movw	r24, r28
    193c:	8e 57       	subi	r24, 0x7E	; 126
    193e:	9f 4f       	sbci	r25, 0xFF	; 255
    1940:	9e 01       	movw	r18, r28
    1942:	20 58       	subi	r18, 0x80	; 128
    1944:	3f 4f       	sbci	r19, 0xFF	; 255
    1946:	f9 01       	movw	r30, r18
    1948:	20 81       	ld	r18, Z
    194a:	31 81       	ldd	r19, Z+1	; 0x01
    194c:	fc 01       	movw	r30, r24
    194e:	31 83       	std	Z+1, r19	; 0x01
    1950:	20 83       	st	Z, r18
    1952:	ce 01       	movw	r24, r28
    1954:	8e 57       	subi	r24, 0x7E	; 126
    1956:	9f 4f       	sbci	r25, 0xFF	; 255
    1958:	fc 01       	movw	r30, r24
    195a:	80 81       	ld	r24, Z
    195c:	91 81       	ldd	r25, Z+1	; 0x01
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <lcdBegin+0x488>
    1962:	9e 01       	movw	r18, r28
    1964:	2e 57       	subi	r18, 0x7E	; 126
    1966:	3f 4f       	sbci	r19, 0xFF	; 255
    1968:	f9 01       	movw	r30, r18
    196a:	91 83       	std	Z+1, r25	; 0x01
    196c:	80 83       	st	Z, r24
    196e:	28 c0       	rjmp	.+80     	; 0x19c0 <lcdBegin+0x4ea>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1970:	8e 01       	movw	r16, r28
    1972:	0f 58       	subi	r16, 0x8F	; 143
    1974:	1f 4f       	sbci	r17, 0xFF	; 255
    1976:	ce 01       	movw	r24, r28
    1978:	87 59       	subi	r24, 0x97	; 151
    197a:	9f 4f       	sbci	r25, 0xFF	; 255
    197c:	fc 01       	movw	r30, r24
    197e:	60 81       	ld	r22, Z
    1980:	71 81       	ldd	r23, Z+1	; 0x01
    1982:	82 81       	ldd	r24, Z+2	; 0x02
    1984:	93 81       	ldd	r25, Z+3	; 0x03
    1986:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	f8 01       	movw	r30, r16
    1990:	80 83       	st	Z, r24
    1992:	ce 01       	movw	r24, r28
    1994:	8c 57       	subi	r24, 0x7C	; 124
    1996:	9f 4f       	sbci	r25, 0xFF	; 255
    1998:	9e 01       	movw	r18, r28
    199a:	2f 58       	subi	r18, 0x8F	; 143
    199c:	3f 4f       	sbci	r19, 0xFF	; 255
    199e:	f9 01       	movw	r30, r18
    19a0:	20 81       	ld	r18, Z
    19a2:	fc 01       	movw	r30, r24
    19a4:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19a6:	ce 01       	movw	r24, r28
    19a8:	8c 57       	subi	r24, 0x7C	; 124
    19aa:	9f 4f       	sbci	r25, 0xFF	; 255
    19ac:	fc 01       	movw	r30, r24
    19ae:	80 81       	ld	r24, Z
    19b0:	28 2f       	mov	r18, r24
    19b2:	2a 95       	dec	r18
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <lcdBegin+0x4dc>
    19b6:	ce 01       	movw	r24, r28
    19b8:	8c 57       	subi	r24, 0x7C	; 124
    19ba:	9f 4f       	sbci	r25, 0xFF	; 255
    19bc:	fc 01       	movw	r30, r24
    19be:	20 83       	st	Z, r18

    //put the LCD into 4 bit mode
    // this is according to the Hitachi HD44780 data sheet
    // figure 24, pg 46
    // we start in 8bit mode, try to set 4 bit mode
    lcdWrite4bits(0x03 << 4);
    19c0:	80 e3       	ldi	r24, 0x30	; 48
    19c2:	0e 94 59 14 	call	0x28b2	; 0x28b2 <lcdWrite4bits>
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	90 e4       	ldi	r25, 0x40	; 64
    19ca:	a3 e8       	ldi	r26, 0x83	; 131
    19cc:	b5 e4       	ldi	r27, 0x45	; 69
    19ce:	89 87       	std	Y+9, r24	; 0x09
    19d0:	9a 87       	std	Y+10, r25	; 0x0a
    19d2:	ab 87       	std	Y+11, r26	; 0x0b
    19d4:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    19d6:	8e 01       	movw	r16, r28
    19d8:	03 5b       	subi	r16, 0xB3	; 179
    19da:	1f 4f       	sbci	r17, 0xFF	; 255
    19dc:	2a ef       	ldi	r18, 0xFA	; 250
    19de:	3d ee       	ldi	r19, 0xED	; 237
    19e0:	4b e6       	ldi	r20, 0x6B	; 107
    19e2:	50 e4       	ldi	r21, 0x40	; 64
    19e4:	69 85       	ldd	r22, Y+9	; 0x09
    19e6:	7a 85       	ldd	r23, Y+10	; 0x0a
    19e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    19ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    19ec:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	f8 01       	movw	r30, r16
    19f6:	80 83       	st	Z, r24
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	a2 83       	std	Z+2, r26	; 0x02
    19fc:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    19fe:	8e 01       	movw	r16, r28
    1a00:	0f 5a       	subi	r16, 0xAF	; 175
    1a02:	1f 4f       	sbci	r17, 0xFF	; 255
    1a04:	2c e7       	ldi	r18, 0x7C	; 124
    1a06:	32 ef       	ldi	r19, 0xF2	; 242
    1a08:	40 e3       	ldi	r20, 0x30	; 48
    1a0a:	50 e4       	ldi	r21, 0x40	; 64
    1a0c:	69 85       	ldd	r22, Y+9	; 0x09
    1a0e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a10:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a12:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a14:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	f8 01       	movw	r30, r16
    1a1e:	80 83       	st	Z, r24
    1a20:	91 83       	std	Z+1, r25	; 0x01
    1a22:	a2 83       	std	Z+2, r26	; 0x02
    1a24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a26:	ce 01       	movw	r24, r28
    1a28:	83 5b       	subi	r24, 0xB3	; 179
    1a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	40 e8       	ldi	r20, 0x80	; 128
    1a32:	5f e3       	ldi	r21, 0x3F	; 63
    1a34:	fc 01       	movw	r30, r24
    1a36:	60 81       	ld	r22, Z
    1a38:	71 81       	ldd	r23, Z+1	; 0x01
    1a3a:	82 81       	ldd	r24, Z+2	; 0x02
    1a3c:	93 81       	ldd	r25, Z+3	; 0x03
    1a3e:	0e 94 18 2c 	call	0x5830	; 0x5830 <__cmpsf2>
    1a42:	88 23       	and	r24, r24
    1a44:	3c f4       	brge	.+14     	; 0x1a54 <lcdBegin+0x57e>
		__ticks = 1;
    1a46:	ce 01       	movw	r24, r28
    1a48:	8b 5a       	subi	r24, 0xAB	; 171
    1a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4c:	21 e0       	ldi	r18, 0x01	; 1
    1a4e:	fc 01       	movw	r30, r24
    1a50:	20 83       	st	Z, r18
    1a52:	2c c1       	rjmp	.+600    	; 0x1cac <lcdBegin+0x7d6>
	else if (__tmp2 > 65535)
    1a54:	ce 01       	movw	r24, r28
    1a56:	8f 5a       	subi	r24, 0xAF	; 175
    1a58:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	3f ef       	ldi	r19, 0xFF	; 255
    1a5e:	4f e7       	ldi	r20, 0x7F	; 127
    1a60:	57 e4       	ldi	r21, 0x47	; 71
    1a62:	fc 01       	movw	r30, r24
    1a64:	60 81       	ld	r22, Z
    1a66:	71 81       	ldd	r23, Z+1	; 0x01
    1a68:	82 81       	ldd	r24, Z+2	; 0x02
    1a6a:	93 81       	ldd	r25, Z+3	; 0x03
    1a6c:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    1a70:	18 16       	cp	r1, r24
    1a72:	0c f0       	brlt	.+2      	; 0x1a76 <lcdBegin+0x5a0>
    1a74:	cd c0       	rjmp	.+410    	; 0x1c10 <lcdBegin+0x73a>
	{
		_delay_ms(__us / 1000.0);
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	4a e7       	ldi	r20, 0x7A	; 122
    1a7c:	54 e4       	ldi	r21, 0x44	; 68
    1a7e:	69 85       	ldd	r22, Y+9	; 0x09
    1a80:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a82:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a84:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a86:	0e 94 1d 2c 	call	0x583a	; 0x583a <__divsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	9e 01       	movw	r18, r28
    1a90:	2a 5a       	subi	r18, 0xAA	; 170
    1a92:	3f 4f       	sbci	r19, 0xFF	; 255
    1a94:	f9 01       	movw	r30, r18
    1a96:	80 83       	st	Z, r24
    1a98:	91 83       	std	Z+1, r25	; 0x01
    1a9a:	a2 83       	std	Z+2, r26	; 0x02
    1a9c:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a9e:	8e 01       	movw	r16, r28
    1aa0:	06 5a       	subi	r16, 0xA6	; 166
    1aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	8a 5a       	subi	r24, 0xAA	; 170
    1aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aaa:	2d ec       	ldi	r18, 0xCD	; 205
    1aac:	3c ec       	ldi	r19, 0xCC	; 204
    1aae:	4c e2       	ldi	r20, 0x2C	; 44
    1ab0:	55 e4       	ldi	r21, 0x45	; 69
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	60 81       	ld	r22, Z
    1ab6:	71 81       	ldd	r23, Z+1	; 0x01
    1ab8:	82 81       	ldd	r24, Z+2	; 0x02
    1aba:	93 81       	ldd	r25, Z+3	; 0x03
    1abc:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	f8 01       	movw	r30, r16
    1ac6:	80 83       	st	Z, r24
    1ac8:	91 83       	std	Z+1, r25	; 0x01
    1aca:	a2 83       	std	Z+2, r26	; 0x02
    1acc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ace:	ce 01       	movw	r24, r28
    1ad0:	86 5a       	subi	r24, 0xA6	; 166
    1ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e8       	ldi	r20, 0x80	; 128
    1ada:	5f e3       	ldi	r21, 0x3F	; 63
    1adc:	fc 01       	movw	r30, r24
    1ade:	60 81       	ld	r22, Z
    1ae0:	71 81       	ldd	r23, Z+1	; 0x01
    1ae2:	82 81       	ldd	r24, Z+2	; 0x02
    1ae4:	93 81       	ldd	r25, Z+3	; 0x03
    1ae6:	0e 94 18 2c 	call	0x5830	; 0x5830 <__cmpsf2>
    1aea:	88 23       	and	r24, r24
    1aec:	4c f4       	brge	.+18     	; 0x1b00 <lcdBegin+0x62a>
		__ticks = 1;
    1aee:	ce 01       	movw	r24, r28
    1af0:	82 5a       	subi	r24, 0xA2	; 162
    1af2:	9f 4f       	sbci	r25, 0xFF	; 255
    1af4:	21 e0       	ldi	r18, 0x01	; 1
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	fc 01       	movw	r30, r24
    1afa:	31 83       	std	Z+1, r19	; 0x01
    1afc:	20 83       	st	Z, r18
    1afe:	6d c0       	rjmp	.+218    	; 0x1bda <lcdBegin+0x704>
	else if (__tmp > 65535)
    1b00:	ce 01       	movw	r24, r28
    1b02:	86 5a       	subi	r24, 0xA6	; 166
    1b04:	9f 4f       	sbci	r25, 0xFF	; 255
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	3f ef       	ldi	r19, 0xFF	; 255
    1b0a:	4f e7       	ldi	r20, 0x7F	; 127
    1b0c:	57 e4       	ldi	r21, 0x47	; 71
    1b0e:	fc 01       	movw	r30, r24
    1b10:	60 81       	ld	r22, Z
    1b12:	71 81       	ldd	r23, Z+1	; 0x01
    1b14:	82 81       	ldd	r24, Z+2	; 0x02
    1b16:	93 81       	ldd	r25, Z+3	; 0x03
    1b18:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    1b1c:	18 16       	cp	r1, r24
    1b1e:	0c f0       	brlt	.+2      	; 0x1b22 <lcdBegin+0x64c>
    1b20:	4a c0       	rjmp	.+148    	; 0x1bb6 <lcdBegin+0x6e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b22:	ce 01       	movw	r24, r28
    1b24:	8a 5a       	subi	r24, 0xAA	; 170
    1b26:	9f 4f       	sbci	r25, 0xFF	; 255
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e2       	ldi	r20, 0x20	; 32
    1b2e:	51 e4       	ldi	r21, 0x41	; 65
    1b30:	fc 01       	movw	r30, r24
    1b32:	60 81       	ld	r22, Z
    1b34:	71 81       	ldd	r23, Z+1	; 0x01
    1b36:	82 81       	ldd	r24, Z+2	; 0x02
    1b38:	93 81       	ldd	r25, Z+3	; 0x03
    1b3a:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	8e 01       	movw	r16, r28
    1b44:	02 5a       	subi	r16, 0xA2	; 162
    1b46:	1f 4f       	sbci	r17, 0xFF	; 255
    1b48:	bc 01       	movw	r22, r24
    1b4a:	cd 01       	movw	r24, r26
    1b4c:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	f8 01       	movw	r30, r16
    1b56:	91 83       	std	Z+1, r25	; 0x01
    1b58:	80 83       	st	Z, r24
    1b5a:	24 c0       	rjmp	.+72     	; 0x1ba4 <lcdBegin+0x6ce>
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	80 5a       	subi	r24, 0xA0	; 160
    1b60:	9f 4f       	sbci	r25, 0xFF	; 255
    1b62:	24 e1       	ldi	r18, 0x14	; 20
    1b64:	31 e0       	ldi	r19, 0x01	; 1
    1b66:	fc 01       	movw	r30, r24
    1b68:	31 83       	std	Z+1, r19	; 0x01
    1b6a:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	80 5a       	subi	r24, 0xA0	; 160
    1b70:	9f 4f       	sbci	r25, 0xFF	; 255
    1b72:	fc 01       	movw	r30, r24
    1b74:	80 81       	ld	r24, Z
    1b76:	91 81       	ldd	r25, Z+1	; 0x01
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	f1 f7       	brne	.-4      	; 0x1b78 <lcdBegin+0x6a2>
    1b7c:	9e 01       	movw	r18, r28
    1b7e:	20 5a       	subi	r18, 0xA0	; 160
    1b80:	3f 4f       	sbci	r19, 0xFF	; 255
    1b82:	f9 01       	movw	r30, r18
    1b84:	91 83       	std	Z+1, r25	; 0x01
    1b86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b88:	ce 01       	movw	r24, r28
    1b8a:	82 5a       	subi	r24, 0xA2	; 162
    1b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8e:	9e 01       	movw	r18, r28
    1b90:	22 5a       	subi	r18, 0xA2	; 162
    1b92:	3f 4f       	sbci	r19, 0xFF	; 255
    1b94:	f9 01       	movw	r30, r18
    1b96:	20 81       	ld	r18, Z
    1b98:	31 81       	ldd	r19, Z+1	; 0x01
    1b9a:	21 50       	subi	r18, 0x01	; 1
    1b9c:	31 09       	sbc	r19, r1
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	31 83       	std	Z+1, r19	; 0x01
    1ba2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba4:	ce 01       	movw	r24, r28
    1ba6:	82 5a       	subi	r24, 0xA2	; 162
    1ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    1baa:	fc 01       	movw	r30, r24
    1bac:	80 81       	ld	r24, Z
    1bae:	91 81       	ldd	r25, Z+1	; 0x01
    1bb0:	89 2b       	or	r24, r25
    1bb2:	a1 f6       	brne	.-88     	; 0x1b5c <lcdBegin+0x686>
    1bb4:	7b c0       	rjmp	.+246    	; 0x1cac <lcdBegin+0x7d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb6:	8e 01       	movw	r16, r28
    1bb8:	02 5a       	subi	r16, 0xA2	; 162
    1bba:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	86 5a       	subi	r24, 0xA6	; 166
    1bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	60 81       	ld	r22, Z
    1bc6:	71 81       	ldd	r23, Z+1	; 0x01
    1bc8:	82 81       	ldd	r24, Z+2	; 0x02
    1bca:	93 81       	ldd	r25, Z+3	; 0x03
    1bcc:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	91 83       	std	Z+1, r25	; 0x01
    1bd8:	80 83       	st	Z, r24
    1bda:	ce 01       	movw	r24, r28
    1bdc:	8e 59       	subi	r24, 0x9E	; 158
    1bde:	9f 4f       	sbci	r25, 0xFF	; 255
    1be0:	9e 01       	movw	r18, r28
    1be2:	22 5a       	subi	r18, 0xA2	; 162
    1be4:	3f 4f       	sbci	r19, 0xFF	; 255
    1be6:	f9 01       	movw	r30, r18
    1be8:	20 81       	ld	r18, Z
    1bea:	31 81       	ldd	r19, Z+1	; 0x01
    1bec:	fc 01       	movw	r30, r24
    1bee:	31 83       	std	Z+1, r19	; 0x01
    1bf0:	20 83       	st	Z, r18
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	8e 59       	subi	r24, 0x9E	; 158
    1bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	80 81       	ld	r24, Z
    1bfc:	91 81       	ldd	r25, Z+1	; 0x01
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <lcdBegin+0x728>
    1c02:	9e 01       	movw	r18, r28
    1c04:	2e 59       	subi	r18, 0x9E	; 158
    1c06:	3f 4f       	sbci	r19, 0xFF	; 255
    1c08:	f9 01       	movw	r30, r18
    1c0a:	91 83       	std	Z+1, r25	; 0x01
    1c0c:	80 83       	st	Z, r24
    1c0e:	4e c0       	rjmp	.+156    	; 0x1cac <lcdBegin+0x7d6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1c10:	ce 01       	movw	r24, r28
    1c12:	83 5b       	subi	r24, 0xB3	; 179
    1c14:	9f 4f       	sbci	r25, 0xFF	; 255
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	4f e7       	ldi	r20, 0x7F	; 127
    1c1c:	53 e4       	ldi	r21, 0x43	; 67
    1c1e:	fc 01       	movw	r30, r24
    1c20:	60 81       	ld	r22, Z
    1c22:	71 81       	ldd	r23, Z+1	; 0x01
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	93 81       	ldd	r25, Z+3	; 0x03
    1c28:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    1c2c:	18 16       	cp	r1, r24
    1c2e:	6c f5       	brge	.+90     	; 0x1c8a <lcdBegin+0x7b4>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1c30:	8e 01       	movw	r16, r28
    1c32:	0c 59       	subi	r16, 0x9C	; 156
    1c34:	1f 4f       	sbci	r17, 0xFF	; 255
    1c36:	ce 01       	movw	r24, r28
    1c38:	8f 5a       	subi	r24, 0xAF	; 175
    1c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	60 81       	ld	r22, Z
    1c40:	71 81       	ldd	r23, Z+1	; 0x01
    1c42:	82 81       	ldd	r24, Z+2	; 0x02
    1c44:	93 81       	ldd	r25, Z+3	; 0x03
    1c46:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	f8 01       	movw	r30, r16
    1c50:	91 83       	std	Z+1, r25	; 0x01
    1c52:	80 83       	st	Z, r24
    1c54:	ce 01       	movw	r24, r28
    1c56:	8a 59       	subi	r24, 0x9A	; 154
    1c58:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5a:	9e 01       	movw	r18, r28
    1c5c:	2c 59       	subi	r18, 0x9C	; 156
    1c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c60:	f9 01       	movw	r30, r18
    1c62:	20 81       	ld	r18, Z
    1c64:	31 81       	ldd	r19, Z+1	; 0x01
    1c66:	fc 01       	movw	r30, r24
    1c68:	31 83       	std	Z+1, r19	; 0x01
    1c6a:	20 83       	st	Z, r18
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	8a 59       	subi	r24, 0x9A	; 154
    1c70:	9f 4f       	sbci	r25, 0xFF	; 255
    1c72:	fc 01       	movw	r30, r24
    1c74:	80 81       	ld	r24, Z
    1c76:	91 81       	ldd	r25, Z+1	; 0x01
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <lcdBegin+0x7a2>
    1c7c:	9e 01       	movw	r18, r28
    1c7e:	2a 59       	subi	r18, 0x9A	; 154
    1c80:	3f 4f       	sbci	r19, 0xFF	; 255
    1c82:	f9 01       	movw	r30, r18
    1c84:	91 83       	std	Z+1, r25	; 0x01
    1c86:	80 83       	st	Z, r24
    1c88:	28 c0       	rjmp	.+80     	; 0x1cda <lcdBegin+0x804>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c8a:	8e 01       	movw	r16, r28
    1c8c:	0b 5a       	subi	r16, 0xAB	; 171
    1c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c90:	ce 01       	movw	r24, r28
    1c92:	83 5b       	subi	r24, 0xB3	; 179
    1c94:	9f 4f       	sbci	r25, 0xFF	; 255
    1c96:	fc 01       	movw	r30, r24
    1c98:	60 81       	ld	r22, Z
    1c9a:	71 81       	ldd	r23, Z+1	; 0x01
    1c9c:	82 81       	ldd	r24, Z+2	; 0x02
    1c9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ca0:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	f8 01       	movw	r30, r16
    1caa:	80 83       	st	Z, r24
    1cac:	ce 01       	movw	r24, r28
    1cae:	88 59       	subi	r24, 0x98	; 152
    1cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb2:	9e 01       	movw	r18, r28
    1cb4:	2b 5a       	subi	r18, 0xAB	; 171
    1cb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb8:	f9 01       	movw	r30, r18
    1cba:	20 81       	ld	r18, Z
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	88 59       	subi	r24, 0x98	; 152
    1cc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	80 81       	ld	r24, Z
    1cca:	28 2f       	mov	r18, r24
    1ccc:	2a 95       	dec	r18
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <lcdBegin+0x7f6>
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	88 59       	subi	r24, 0x98	; 152
    1cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	20 83       	st	Z, r18
    _delay_us(4200); // wait min 4.1ms
    // second try
    lcdWrite4bits(0x03 << 4);
    1cda:	80 e3       	ldi	r24, 0x30	; 48
    1cdc:	0e 94 59 14 	call	0x28b2	; 0x28b2 <lcdWrite4bits>
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	a8 ec       	ldi	r26, 0xC8	; 200
    1ce6:	b2 e4       	ldi	r27, 0x42	; 66
    1ce8:	8d 87       	std	Y+13, r24	; 0x0d
    1cea:	9e 87       	std	Y+14, r25	; 0x0e
    1cec:	af 87       	std	Y+15, r26	; 0x0f
    1cee:	b8 8b       	std	Y+16, r27	; 0x10
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1cf0:	2a ef       	ldi	r18, 0xFA	; 250
    1cf2:	3d ee       	ldi	r19, 0xED	; 237
    1cf4:	4b e6       	ldi	r20, 0x6B	; 107
    1cf6:	50 e4       	ldi	r21, 0x40	; 64
    1cf8:	6d 85       	ldd	r22, Y+13	; 0x0d
    1cfa:	7e 85       	ldd	r23, Y+14	; 0x0e
    1cfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cfe:	98 89       	ldd	r25, Y+16	; 0x10
    1d00:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	89 ab       	std	Y+49, r24	; 0x31
    1d0a:	9a ab       	std	Y+50, r25	; 0x32
    1d0c:	ab ab       	std	Y+51, r26	; 0x33
    1d0e:	bc ab       	std	Y+52, r27	; 0x34
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1d10:	2c e7       	ldi	r18, 0x7C	; 124
    1d12:	32 ef       	ldi	r19, 0xF2	; 242
    1d14:	40 e3       	ldi	r20, 0x30	; 48
    1d16:	50 e4       	ldi	r21, 0x40	; 64
    1d18:	6d 85       	ldd	r22, Y+13	; 0x0d
    1d1a:	7e 85       	ldd	r23, Y+14	; 0x0e
    1d1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d1e:	98 89       	ldd	r25, Y+16	; 0x10
    1d20:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	8d ab       	std	Y+53, r24	; 0x35
    1d2a:	9e ab       	std	Y+54, r25	; 0x36
    1d2c:	af ab       	std	Y+55, r26	; 0x37
    1d2e:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e8       	ldi	r20, 0x80	; 128
    1d36:	5f e3       	ldi	r21, 0x3F	; 63
    1d38:	69 a9       	ldd	r22, Y+49	; 0x31
    1d3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d40:	0e 94 18 2c 	call	0x5830	; 0x5830 <__cmpsf2>
    1d44:	88 23       	and	r24, r24
    1d46:	1c f4       	brge	.+6      	; 0x1d4e <lcdBegin+0x878>
		__ticks = 1;
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	89 af       	std	Y+57, r24	; 0x39
    1d4c:	09 c1       	rjmp	.+530    	; 0x1f60 <lcdBegin+0xa8a>
	else if (__tmp2 > 65535)
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	3f ef       	ldi	r19, 0xFF	; 255
    1d52:	4f e7       	ldi	r20, 0x7F	; 127
    1d54:	57 e4       	ldi	r21, 0x47	; 71
    1d56:	6d a9       	ldd	r22, Y+53	; 0x35
    1d58:	7e a9       	ldd	r23, Y+54	; 0x36
    1d5a:	8f a9       	ldd	r24, Y+55	; 0x37
    1d5c:	98 ad       	ldd	r25, Y+56	; 0x38
    1d5e:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    1d62:	18 16       	cp	r1, r24
    1d64:	0c f0       	brlt	.+2      	; 0x1d68 <lcdBegin+0x892>
    1d66:	be c0       	rjmp	.+380    	; 0x1ee4 <lcdBegin+0xa0e>
	{
		_delay_ms(__us / 1000.0);
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	4a e7       	ldi	r20, 0x7A	; 122
    1d6e:	54 e4       	ldi	r21, 0x44	; 68
    1d70:	6d 85       	ldd	r22, Y+13	; 0x0d
    1d72:	7e 85       	ldd	r23, Y+14	; 0x0e
    1d74:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d76:	98 89       	ldd	r25, Y+16	; 0x10
    1d78:	0e 94 1d 2c 	call	0x583a	; 0x583a <__divsf3>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	8a af       	std	Y+58, r24	; 0x3a
    1d82:	9b af       	std	Y+59, r25	; 0x3b
    1d84:	ac af       	std	Y+60, r26	; 0x3c
    1d86:	bd af       	std	Y+61, r27	; 0x3d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d88:	8e 01       	movw	r16, r28
    1d8a:	02 5c       	subi	r16, 0xC2	; 194
    1d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8e:	2d ec       	ldi	r18, 0xCD	; 205
    1d90:	3c ec       	ldi	r19, 0xCC	; 204
    1d92:	4c e2       	ldi	r20, 0x2C	; 44
    1d94:	55 e4       	ldi	r21, 0x45	; 69
    1d96:	6a ad       	ldd	r22, Y+58	; 0x3a
    1d98:	7b ad       	ldd	r23, Y+59	; 0x3b
    1d9a:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d9c:	9d ad       	ldd	r25, Y+61	; 0x3d
    1d9e:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	f8 01       	movw	r30, r16
    1da8:	80 83       	st	Z, r24
    1daa:	91 83       	std	Z+1, r25	; 0x01
    1dac:	a2 83       	std	Z+2, r26	; 0x02
    1dae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1db0:	ce 01       	movw	r24, r28
    1db2:	ce 96       	adiw	r24, 0x3e	; 62
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e8       	ldi	r20, 0x80	; 128
    1dba:	5f e3       	ldi	r21, 0x3F	; 63
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	60 81       	ld	r22, Z
    1dc0:	71 81       	ldd	r23, Z+1	; 0x01
    1dc2:	82 81       	ldd	r24, Z+2	; 0x02
    1dc4:	93 81       	ldd	r25, Z+3	; 0x03
    1dc6:	0e 94 18 2c 	call	0x5830	; 0x5830 <__cmpsf2>
    1dca:	88 23       	and	r24, r24
    1dcc:	4c f4       	brge	.+18     	; 0x1de0 <lcdBegin+0x90a>
		__ticks = 1;
    1dce:	ce 01       	movw	r24, r28
    1dd0:	8e 5b       	subi	r24, 0xBE	; 190
    1dd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd4:	21 e0       	ldi	r18, 0x01	; 1
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	fc 01       	movw	r30, r24
    1dda:	31 83       	std	Z+1, r19	; 0x01
    1ddc:	20 83       	st	Z, r18
    1dde:	67 c0       	rjmp	.+206    	; 0x1eae <lcdBegin+0x9d8>
	else if (__tmp > 65535)
    1de0:	ce 01       	movw	r24, r28
    1de2:	ce 96       	adiw	r24, 0x3e	; 62
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	3f ef       	ldi	r19, 0xFF	; 255
    1de8:	4f e7       	ldi	r20, 0x7F	; 127
    1dea:	57 e4       	ldi	r21, 0x47	; 71
    1dec:	fc 01       	movw	r30, r24
    1dee:	60 81       	ld	r22, Z
    1df0:	71 81       	ldd	r23, Z+1	; 0x01
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	93 81       	ldd	r25, Z+3	; 0x03
    1df6:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    1dfa:	18 16       	cp	r1, r24
    1dfc:	0c f0       	brlt	.+2      	; 0x1e00 <lcdBegin+0x92a>
    1dfe:	46 c0       	rjmp	.+140    	; 0x1e8c <lcdBegin+0x9b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e2       	ldi	r20, 0x20	; 32
    1e06:	51 e4       	ldi	r21, 0x41	; 65
    1e08:	6a ad       	ldd	r22, Y+58	; 0x3a
    1e0a:	7b ad       	ldd	r23, Y+59	; 0x3b
    1e0c:	8c ad       	ldd	r24, Y+60	; 0x3c
    1e0e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1e10:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	8e 01       	movw	r16, r28
    1e1a:	0e 5b       	subi	r16, 0xBE	; 190
    1e1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1e:	bc 01       	movw	r22, r24
    1e20:	cd 01       	movw	r24, r26
    1e22:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	f8 01       	movw	r30, r16
    1e2c:	91 83       	std	Z+1, r25	; 0x01
    1e2e:	80 83       	st	Z, r24
    1e30:	24 c0       	rjmp	.+72     	; 0x1e7a <lcdBegin+0x9a4>
    1e32:	ce 01       	movw	r24, r28
    1e34:	8c 5b       	subi	r24, 0xBC	; 188
    1e36:	9f 4f       	sbci	r25, 0xFF	; 255
    1e38:	24 e1       	ldi	r18, 0x14	; 20
    1e3a:	31 e0       	ldi	r19, 0x01	; 1
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	31 83       	std	Z+1, r19	; 0x01
    1e40:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e42:	ce 01       	movw	r24, r28
    1e44:	8c 5b       	subi	r24, 0xBC	; 188
    1e46:	9f 4f       	sbci	r25, 0xFF	; 255
    1e48:	fc 01       	movw	r30, r24
    1e4a:	80 81       	ld	r24, Z
    1e4c:	91 81       	ldd	r25, Z+1	; 0x01
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <lcdBegin+0x978>
    1e52:	9e 01       	movw	r18, r28
    1e54:	2c 5b       	subi	r18, 0xBC	; 188
    1e56:	3f 4f       	sbci	r19, 0xFF	; 255
    1e58:	f9 01       	movw	r30, r18
    1e5a:	91 83       	std	Z+1, r25	; 0x01
    1e5c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5e:	ce 01       	movw	r24, r28
    1e60:	8e 5b       	subi	r24, 0xBE	; 190
    1e62:	9f 4f       	sbci	r25, 0xFF	; 255
    1e64:	9e 01       	movw	r18, r28
    1e66:	2e 5b       	subi	r18, 0xBE	; 190
    1e68:	3f 4f       	sbci	r19, 0xFF	; 255
    1e6a:	f9 01       	movw	r30, r18
    1e6c:	20 81       	ld	r18, Z
    1e6e:	31 81       	ldd	r19, Z+1	; 0x01
    1e70:	21 50       	subi	r18, 0x01	; 1
    1e72:	31 09       	sbc	r19, r1
    1e74:	fc 01       	movw	r30, r24
    1e76:	31 83       	std	Z+1, r19	; 0x01
    1e78:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7a:	ce 01       	movw	r24, r28
    1e7c:	8e 5b       	subi	r24, 0xBE	; 190
    1e7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e80:	fc 01       	movw	r30, r24
    1e82:	80 81       	ld	r24, Z
    1e84:	91 81       	ldd	r25, Z+1	; 0x01
    1e86:	89 2b       	or	r24, r25
    1e88:	a1 f6       	brne	.-88     	; 0x1e32 <lcdBegin+0x95c>
    1e8a:	6a c0       	rjmp	.+212    	; 0x1f60 <lcdBegin+0xa8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8c:	8e 01       	movw	r16, r28
    1e8e:	0e 5b       	subi	r16, 0xBE	; 190
    1e90:	1f 4f       	sbci	r17, 0xFF	; 255
    1e92:	ce 01       	movw	r24, r28
    1e94:	ce 96       	adiw	r24, 0x3e	; 62
    1e96:	fc 01       	movw	r30, r24
    1e98:	60 81       	ld	r22, Z
    1e9a:	71 81       	ldd	r23, Z+1	; 0x01
    1e9c:	82 81       	ldd	r24, Z+2	; 0x02
    1e9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ea0:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	f8 01       	movw	r30, r16
    1eaa:	91 83       	std	Z+1, r25	; 0x01
    1eac:	80 83       	st	Z, r24
    1eae:	ce 01       	movw	r24, r28
    1eb0:	8a 5b       	subi	r24, 0xBA	; 186
    1eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb4:	9e 01       	movw	r18, r28
    1eb6:	2e 5b       	subi	r18, 0xBE	; 190
    1eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eba:	f9 01       	movw	r30, r18
    1ebc:	20 81       	ld	r18, Z
    1ebe:	31 81       	ldd	r19, Z+1	; 0x01
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	31 83       	std	Z+1, r19	; 0x01
    1ec4:	20 83       	st	Z, r18
    1ec6:	ce 01       	movw	r24, r28
    1ec8:	8a 5b       	subi	r24, 0xBA	; 186
    1eca:	9f 4f       	sbci	r25, 0xFF	; 255
    1ecc:	fc 01       	movw	r30, r24
    1ece:	80 81       	ld	r24, Z
    1ed0:	91 81       	ldd	r25, Z+1	; 0x01
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	f1 f7       	brne	.-4      	; 0x1ed2 <lcdBegin+0x9fc>
    1ed6:	9e 01       	movw	r18, r28
    1ed8:	2a 5b       	subi	r18, 0xBA	; 186
    1eda:	3f 4f       	sbci	r19, 0xFF	; 255
    1edc:	f9 01       	movw	r30, r18
    1ede:	91 83       	std	Z+1, r25	; 0x01
    1ee0:	80 83       	st	Z, r24
    1ee2:	3e c0       	rjmp	.+124    	; 0x1f60 <lcdBegin+0xa8a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	4f e7       	ldi	r20, 0x7F	; 127
    1eea:	53 e4       	ldi	r21, 0x43	; 67
    1eec:	69 a9       	ldd	r22, Y+49	; 0x31
    1eee:	7a a9       	ldd	r23, Y+50	; 0x32
    1ef0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ef2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ef4:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    1ef8:	18 16       	cp	r1, r24
    1efa:	4c f5       	brge	.+82     	; 0x1f4e <lcdBegin+0xa78>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1efc:	8e 01       	movw	r16, r28
    1efe:	08 5b       	subi	r16, 0xB8	; 184
    1f00:	1f 4f       	sbci	r17, 0xFF	; 255
    1f02:	6d a9       	ldd	r22, Y+53	; 0x35
    1f04:	7e a9       	ldd	r23, Y+54	; 0x36
    1f06:	8f a9       	ldd	r24, Y+55	; 0x37
    1f08:	98 ad       	ldd	r25, Y+56	; 0x38
    1f0a:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	f8 01       	movw	r30, r16
    1f14:	91 83       	std	Z+1, r25	; 0x01
    1f16:	80 83       	st	Z, r24
    1f18:	ce 01       	movw	r24, r28
    1f1a:	86 5b       	subi	r24, 0xB6	; 182
    1f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f1e:	9e 01       	movw	r18, r28
    1f20:	28 5b       	subi	r18, 0xB8	; 184
    1f22:	3f 4f       	sbci	r19, 0xFF	; 255
    1f24:	f9 01       	movw	r30, r18
    1f26:	20 81       	ld	r18, Z
    1f28:	31 81       	ldd	r19, Z+1	; 0x01
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	31 83       	std	Z+1, r19	; 0x01
    1f2e:	20 83       	st	Z, r18
    1f30:	ce 01       	movw	r24, r28
    1f32:	86 5b       	subi	r24, 0xB6	; 182
    1f34:	9f 4f       	sbci	r25, 0xFF	; 255
    1f36:	fc 01       	movw	r30, r24
    1f38:	80 81       	ld	r24, Z
    1f3a:	91 81       	ldd	r25, Z+1	; 0x01
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	f1 f7       	brne	.-4      	; 0x1f3c <lcdBegin+0xa66>
    1f40:	9e 01       	movw	r18, r28
    1f42:	26 5b       	subi	r18, 0xB6	; 182
    1f44:	3f 4f       	sbci	r19, 0xFF	; 255
    1f46:	f9 01       	movw	r30, r18
    1f48:	91 83       	std	Z+1, r25	; 0x01
    1f4a:	80 83       	st	Z, r24
    1f4c:	1c c0       	rjmp	.+56     	; 0x1f86 <lcdBegin+0xab0>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f50:	7a a9       	ldd	r23, Y+50	; 0x32
    1f52:	8b a9       	ldd	r24, Y+51	; 0x33
    1f54:	9c a9       	ldd	r25, Y+52	; 0x34
    1f56:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	89 af       	std	Y+57, r24	; 0x39
    1f60:	ce 01       	movw	r24, r28
    1f62:	84 5b       	subi	r24, 0xB4	; 180
    1f64:	9f 4f       	sbci	r25, 0xFF	; 255
    1f66:	29 ad       	ldd	r18, Y+57	; 0x39
    1f68:	fc 01       	movw	r30, r24
    1f6a:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	84 5b       	subi	r24, 0xB4	; 180
    1f70:	9f 4f       	sbci	r25, 0xFF	; 255
    1f72:	fc 01       	movw	r30, r24
    1f74:	80 81       	ld	r24, Z
    1f76:	28 2f       	mov	r18, r24
    1f78:	2a 95       	dec	r18
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <lcdBegin+0xaa2>
    1f7c:	ce 01       	movw	r24, r28
    1f7e:	84 5b       	subi	r24, 0xB4	; 180
    1f80:	9f 4f       	sbci	r25, 0xFF	; 255
    1f82:	fc 01       	movw	r30, r24
    1f84:	20 83       	st	Z, r18
    _delay_us(100);
    // third go!
    lcdWrite4bits(0x03 << 4);
    1f86:	80 e3       	ldi	r24, 0x30	; 48
    1f88:	0e 94 59 14 	call	0x28b2	; 0x28b2 <lcdWrite4bits>
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	a8 ec       	ldi	r26, 0xC8	; 200
    1f92:	b2 e4       	ldi	r27, 0x42	; 66
    1f94:	89 8b       	std	Y+17, r24	; 0x11
    1f96:	9a 8b       	std	Y+18, r25	; 0x12
    1f98:	ab 8b       	std	Y+19, r26	; 0x13
    1f9a:	bc 8b       	std	Y+20, r27	; 0x14
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1f9c:	2a ef       	ldi	r18, 0xFA	; 250
    1f9e:	3d ee       	ldi	r19, 0xED	; 237
    1fa0:	4b e6       	ldi	r20, 0x6B	; 107
    1fa2:	50 e4       	ldi	r21, 0x40	; 64
    1fa4:	69 89       	ldd	r22, Y+17	; 0x11
    1fa6:	7a 89       	ldd	r23, Y+18	; 0x12
    1fa8:	8b 89       	ldd	r24, Y+19	; 0x13
    1faa:	9c 89       	ldd	r25, Y+20	; 0x14
    1fac:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	8d 8b       	std	Y+21, r24	; 0x15
    1fb6:	9e 8b       	std	Y+22, r25	; 0x16
    1fb8:	af 8b       	std	Y+23, r26	; 0x17
    1fba:	b8 8f       	std	Y+24, r27	; 0x18
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1fbc:	2c e7       	ldi	r18, 0x7C	; 124
    1fbe:	32 ef       	ldi	r19, 0xF2	; 242
    1fc0:	40 e3       	ldi	r20, 0x30	; 48
    1fc2:	50 e4       	ldi	r21, 0x40	; 64
    1fc4:	69 89       	ldd	r22, Y+17	; 0x11
    1fc6:	7a 89       	ldd	r23, Y+18	; 0x12
    1fc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fca:	9c 89       	ldd	r25, Y+20	; 0x14
    1fcc:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	89 8f       	std	Y+25, r24	; 0x19
    1fd6:	9a 8f       	std	Y+26, r25	; 0x1a
    1fd8:	ab 8f       	std	Y+27, r26	; 0x1b
    1fda:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e8       	ldi	r20, 0x80	; 128
    1fe2:	5f e3       	ldi	r21, 0x3F	; 63
    1fe4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fea:	98 8d       	ldd	r25, Y+24	; 0x18
    1fec:	0e 94 18 2c 	call	0x5830	; 0x5830 <__cmpsf2>
    1ff0:	88 23       	and	r24, r24
    1ff2:	1c f4       	brge	.+6      	; 0x1ffa <lcdBegin+0xb24>
		__ticks = 1;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	8d 8f       	std	Y+29, r24	; 0x1d
    1ff8:	b2 c0       	rjmp	.+356    	; 0x215e <lcdBegin+0xc88>
	else if (__tmp2 > 65535)
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	3f ef       	ldi	r19, 0xFF	; 255
    1ffe:	4f e7       	ldi	r20, 0x7F	; 127
    2000:	57 e4       	ldi	r21, 0x47	; 71
    2002:	69 8d       	ldd	r22, Y+25	; 0x19
    2004:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2006:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2008:	9c 8d       	ldd	r25, Y+28	; 0x1c
    200a:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    200e:	18 16       	cp	r1, r24
    2010:	0c f0       	brlt	.+2      	; 0x2014 <lcdBegin+0xb3e>
    2012:	7b c0       	rjmp	.+246    	; 0x210a <lcdBegin+0xc34>
	{
		_delay_ms(__us / 1000.0);
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	4a e7       	ldi	r20, 0x7A	; 122
    201a:	54 e4       	ldi	r21, 0x44	; 68
    201c:	69 89       	ldd	r22, Y+17	; 0x11
    201e:	7a 89       	ldd	r23, Y+18	; 0x12
    2020:	8b 89       	ldd	r24, Y+19	; 0x13
    2022:	9c 89       	ldd	r25, Y+20	; 0x14
    2024:	0e 94 1d 2c 	call	0x583a	; 0x583a <__divsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	8e 8f       	std	Y+30, r24	; 0x1e
    202e:	9f 8f       	std	Y+31, r25	; 0x1f
    2030:	a8 a3       	std	Y+32, r26	; 0x20
    2032:	b9 a3       	std	Y+33, r27	; 0x21

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2034:	2d ec       	ldi	r18, 0xCD	; 205
    2036:	3c ec       	ldi	r19, 0xCC	; 204
    2038:	4c e2       	ldi	r20, 0x2C	; 44
    203a:	55 e4       	ldi	r21, 0x45	; 69
    203c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    203e:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2040:	88 a1       	ldd	r24, Y+32	; 0x20
    2042:	99 a1       	ldd	r25, Y+33	; 0x21
    2044:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	8a a3       	std	Y+34, r24	; 0x22
    204e:	9b a3       	std	Y+35, r25	; 0x23
    2050:	ac a3       	std	Y+36, r26	; 0x24
    2052:	bd a3       	std	Y+37, r27	; 0x25
	if (__tmp < 1.0)
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	40 e8       	ldi	r20, 0x80	; 128
    205a:	5f e3       	ldi	r21, 0x3F	; 63
    205c:	6a a1       	ldd	r22, Y+34	; 0x22
    205e:	7b a1       	ldd	r23, Y+35	; 0x23
    2060:	8c a1       	ldd	r24, Y+36	; 0x24
    2062:	9d a1       	ldd	r25, Y+37	; 0x25
    2064:	0e 94 18 2c 	call	0x5830	; 0x5830 <__cmpsf2>
    2068:	88 23       	and	r24, r24
    206a:	2c f4       	brge	.+10     	; 0x2076 <lcdBegin+0xba0>
		__ticks = 1;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	9f a3       	std	Y+39, r25	; 0x27
    2072:	8e a3       	std	Y+38, r24	; 0x26
    2074:	3f c0       	rjmp	.+126    	; 0x20f4 <lcdBegin+0xc1e>
	else if (__tmp > 65535)
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	3f ef       	ldi	r19, 0xFF	; 255
    207a:	4f e7       	ldi	r20, 0x7F	; 127
    207c:	57 e4       	ldi	r21, 0x47	; 71
    207e:	6a a1       	ldd	r22, Y+34	; 0x22
    2080:	7b a1       	ldd	r23, Y+35	; 0x23
    2082:	8c a1       	ldd	r24, Y+36	; 0x24
    2084:	9d a1       	ldd	r25, Y+37	; 0x25
    2086:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    208a:	18 16       	cp	r1, r24
    208c:	4c f5       	brge	.+82     	; 0x20e0 <lcdBegin+0xc0a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	40 e2       	ldi	r20, 0x20	; 32
    2094:	51 e4       	ldi	r21, 0x41	; 65
    2096:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2098:	7f 8d       	ldd	r23, Y+31	; 0x1f
    209a:	88 a1       	ldd	r24, Y+32	; 0x20
    209c:	99 a1       	ldd	r25, Y+33	; 0x21
    209e:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	9f a3       	std	Y+39, r25	; 0x27
    20b4:	8e a3       	std	Y+38, r24	; 0x26
    20b6:	0f c0       	rjmp	.+30     	; 0x20d6 <lcdBegin+0xc00>
    20b8:	84 e1       	ldi	r24, 0x14	; 20
    20ba:	91 e0       	ldi	r25, 0x01	; 1
    20bc:	99 a7       	std	Y+41, r25	; 0x29
    20be:	88 a7       	std	Y+40, r24	; 0x28
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20c0:	88 a5       	ldd	r24, Y+40	; 0x28
    20c2:	99 a5       	ldd	r25, Y+41	; 0x29
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <lcdBegin+0xbee>
    20c8:	99 a7       	std	Y+41, r25	; 0x29
    20ca:	88 a7       	std	Y+40, r24	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20cc:	8e a1       	ldd	r24, Y+38	; 0x26
    20ce:	9f a1       	ldd	r25, Y+39	; 0x27
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	9f a3       	std	Y+39, r25	; 0x27
    20d4:	8e a3       	std	Y+38, r24	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d6:	8e a1       	ldd	r24, Y+38	; 0x26
    20d8:	9f a1       	ldd	r25, Y+39	; 0x27
    20da:	89 2b       	or	r24, r25
    20dc:	69 f7       	brne	.-38     	; 0x20b8 <lcdBegin+0xbe2>
    20de:	3f c0       	rjmp	.+126    	; 0x215e <lcdBegin+0xc88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e0:	6a a1       	ldd	r22, Y+34	; 0x22
    20e2:	7b a1       	ldd	r23, Y+35	; 0x23
    20e4:	8c a1       	ldd	r24, Y+36	; 0x24
    20e6:	9d a1       	ldd	r25, Y+37	; 0x25
    20e8:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	9f a3       	std	Y+39, r25	; 0x27
    20f2:	8e a3       	std	Y+38, r24	; 0x26
    20f4:	8e a1       	ldd	r24, Y+38	; 0x26
    20f6:	9f a1       	ldd	r25, Y+39	; 0x27
    20f8:	9b a7       	std	Y+43, r25	; 0x2b
    20fa:	8a a7       	std	Y+42, r24	; 0x2a
    20fc:	8a a5       	ldd	r24, Y+42	; 0x2a
    20fe:	9b a5       	ldd	r25, Y+43	; 0x2b
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <lcdBegin+0xc2a>
    2104:	9b a7       	std	Y+43, r25	; 0x2b
    2106:	8a a7       	std	Y+42, r24	; 0x2a
    2108:	2a c0       	rjmp	.+84     	; 0x215e <lcdBegin+0xc88>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	4f e7       	ldi	r20, 0x7F	; 127
    2110:	53 e4       	ldi	r21, 0x43	; 67
    2112:	6d 89       	ldd	r22, Y+21	; 0x15
    2114:	7e 89       	ldd	r23, Y+22	; 0x16
    2116:	8f 89       	ldd	r24, Y+23	; 0x17
    2118:	98 8d       	ldd	r25, Y+24	; 0x18
    211a:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    211e:	18 16       	cp	r1, r24
    2120:	ac f4       	brge	.+42     	; 0x214c <lcdBegin+0xc76>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2122:	69 8d       	ldd	r22, Y+25	; 0x19
    2124:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2126:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2128:	9c 8d       	ldd	r25, Y+28	; 0x1c
    212a:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	9d a7       	std	Y+45, r25	; 0x2d
    2134:	8c a7       	std	Y+44, r24	; 0x2c
    2136:	8c a5       	ldd	r24, Y+44	; 0x2c
    2138:	9d a5       	ldd	r25, Y+45	; 0x2d
    213a:	9f a7       	std	Y+47, r25	; 0x2f
    213c:	8e a7       	std	Y+46, r24	; 0x2e
    213e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2140:	9f a5       	ldd	r25, Y+47	; 0x2f
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <lcdBegin+0xc6c>
    2146:	9f a7       	std	Y+47, r25	; 0x2f
    2148:	8e a7       	std	Y+46, r24	; 0x2e
    214a:	0f c0       	rjmp	.+30     	; 0x216a <lcdBegin+0xc94>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    214c:	6d 89       	ldd	r22, Y+21	; 0x15
    214e:	7e 89       	ldd	r23, Y+22	; 0x16
    2150:	8f 89       	ldd	r24, Y+23	; 0x17
    2152:	98 8d       	ldd	r25, Y+24	; 0x18
    2154:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	8d 8f       	std	Y+29, r24	; 0x1d
    215e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2160:	88 ab       	std	Y+48, r24	; 0x30
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2162:	88 a9       	ldd	r24, Y+48	; 0x30
    2164:	8a 95       	dec	r24
    2166:	f1 f7       	brne	.-4      	; 0x2164 <lcdBegin+0xc8e>
    2168:	88 ab       	std	Y+48, r24	; 0x30
    _delay_us(100);
    // finally, set to 4-bit interface
    lcdWrite4bits(0x02 << 4);
    216a:	80 e2       	ldi	r24, 0x20	; 32
    216c:	0e 94 59 14 	call	0x28b2	; 0x28b2 <lcdWrite4bits>
    // set # lines, font size, etc.
    lcdCommand(LCD_FUNCTIONSET | _displayFunction);
    2170:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <_displayFunction>
    2174:	80 62       	ori	r24, 0x20	; 32
    2176:	0e 94 0f 14 	call	0x281e	; 0x281e <lcdCommand>
    // turn the display on with no cursor or blinking default
    _displayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    217a:	84 e0       	ldi	r24, 0x04	; 4
    217c:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <_displayControl>
    lcdDisplay();
    2180:	0e 94 07 12 	call	0x240e	; 0x240e <lcdDisplay>
    // clear it off
    lcdClear();
    2184:	0e 94 db 10 	call	0x21b6	; 0x21b6 <lcdClear>
    // Initialize to default text direction (for roman languages)
    _displayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2188:	82 e0       	ldi	r24, 0x02	; 2
    218a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <_displayMode>
    // set the entry mode
    lcdCommand(LCD_ENTRYMODESET | _displayMode);
    218e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <_displayMode>
    2192:	84 60       	ori	r24, 0x04	; 4
    2194:	0e 94 0f 14 	call	0x281e	; 0x281e <lcdCommand>
    lcdHome();
    2198:	0e 94 68 11 	call	0x22d0	; 0x22d0 <lcdHome>
}
    219c:	00 00       	nop
    219e:	c2 57       	subi	r28, 0x72	; 114
    21a0:	df 4f       	sbci	r29, 0xFF	; 255
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	df 91       	pop	r29
    21ae:	cf 91       	pop	r28
    21b0:	1f 91       	pop	r17
    21b2:	0f 91       	pop	r16
    21b4:	08 95       	ret

000021b6 <lcdClear>:

void lcdClear() {
    21b6:	cf 93       	push	r28
    21b8:	df 93       	push	r29
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	2e 97       	sbiw	r28, 0x0e	; 14
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    lcdCommand(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	0e 94 0f 14 	call	0x281e	; 0x281e <lcdCommand>
    _spaceToEndOfTheLine = _cols;
    21d0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <_cols>
    21d4:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <_spaceToEndOfTheLine>
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	a0 e0       	ldi	r26, 0x00	; 0
    21de:	b0 e4       	ldi	r27, 0x40	; 64
    21e0:	89 83       	std	Y+1, r24	; 0x01
    21e2:	9a 83       	std	Y+2, r25	; 0x02
    21e4:	ab 83       	std	Y+3, r26	; 0x03
    21e6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    21e8:	2d ec       	ldi	r18, 0xCD	; 205
    21ea:	3c ec       	ldi	r19, 0xCC	; 204
    21ec:	4c e2       	ldi	r20, 0x2C	; 44
    21ee:	55 e4       	ldi	r21, 0x45	; 69
    21f0:	69 81       	ldd	r22, Y+1	; 0x01
    21f2:	7a 81       	ldd	r23, Y+2	; 0x02
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	9c 81       	ldd	r25, Y+4	; 0x04
    21f8:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	8d 83       	std	Y+5, r24	; 0x05
    2202:	9e 83       	std	Y+6, r25	; 0x06
    2204:	af 83       	std	Y+7, r26	; 0x07
    2206:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e8       	ldi	r20, 0x80	; 128
    220e:	5f e3       	ldi	r21, 0x3F	; 63
    2210:	6d 81       	ldd	r22, Y+5	; 0x05
    2212:	7e 81       	ldd	r23, Y+6	; 0x06
    2214:	8f 81       	ldd	r24, Y+7	; 0x07
    2216:	98 85       	ldd	r25, Y+8	; 0x08
    2218:	0e 94 18 2c 	call	0x5830	; 0x5830 <__cmpsf2>
    221c:	88 23       	and	r24, r24
    221e:	2c f4       	brge	.+10     	; 0x222a <lcdClear+0x74>
		__ticks = 1;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	9a 87       	std	Y+10, r25	; 0x0a
    2226:	89 87       	std	Y+9, r24	; 0x09
    2228:	3f c0       	rjmp	.+126    	; 0x22a8 <lcdClear+0xf2>
	else if (__tmp > 65535)
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	3f ef       	ldi	r19, 0xFF	; 255
    222e:	4f e7       	ldi	r20, 0x7F	; 127
    2230:	57 e4       	ldi	r21, 0x47	; 71
    2232:	6d 81       	ldd	r22, Y+5	; 0x05
    2234:	7e 81       	ldd	r23, Y+6	; 0x06
    2236:	8f 81       	ldd	r24, Y+7	; 0x07
    2238:	98 85       	ldd	r25, Y+8	; 0x08
    223a:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    223e:	18 16       	cp	r1, r24
    2240:	4c f5       	brge	.+82     	; 0x2294 <lcdClear+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e2       	ldi	r20, 0x20	; 32
    2248:	51 e4       	ldi	r21, 0x41	; 65
    224a:	69 81       	ldd	r22, Y+1	; 0x01
    224c:	7a 81       	ldd	r23, Y+2	; 0x02
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	bc 01       	movw	r22, r24
    225c:	cd 01       	movw	r24, r26
    225e:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	9a 87       	std	Y+10, r25	; 0x0a
    2268:	89 87       	std	Y+9, r24	; 0x09
    226a:	0f c0       	rjmp	.+30     	; 0x228a <lcdClear+0xd4>
    226c:	84 e1       	ldi	r24, 0x14	; 20
    226e:	91 e0       	ldi	r25, 0x01	; 1
    2270:	9c 87       	std	Y+12, r25	; 0x0c
    2272:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2274:	8b 85       	ldd	r24, Y+11	; 0x0b
    2276:	9c 85       	ldd	r25, Y+12	; 0x0c
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <lcdClear+0xc2>
    227c:	9c 87       	std	Y+12, r25	; 0x0c
    227e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2280:	89 85       	ldd	r24, Y+9	; 0x09
    2282:	9a 85       	ldd	r25, Y+10	; 0x0a
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	9a 87       	std	Y+10, r25	; 0x0a
    2288:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228a:	89 85       	ldd	r24, Y+9	; 0x09
    228c:	9a 85       	ldd	r25, Y+10	; 0x0a
    228e:	89 2b       	or	r24, r25
    2290:	69 f7       	brne	.-38     	; 0x226c <lcdClear+0xb6>
#ifdef _TESTS_ENV
    for (int i = 0; i < LCD_COLS * LCD_ROWS; i++) {
        _lcdTestBuff[i] = 0;
    }
#endif
}
    2292:	14 c0       	rjmp	.+40     	; 0x22bc <lcdClear+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2294:	6d 81       	ldd	r22, Y+5	; 0x05
    2296:	7e 81       	ldd	r23, Y+6	; 0x06
    2298:	8f 81       	ldd	r24, Y+7	; 0x07
    229a:	98 85       	ldd	r25, Y+8	; 0x08
    229c:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	9a 87       	std	Y+10, r25	; 0x0a
    22a6:	89 87       	std	Y+9, r24	; 0x09
    22a8:	89 85       	ldd	r24, Y+9	; 0x09
    22aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ac:	9e 87       	std	Y+14, r25	; 0x0e
    22ae:	8d 87       	std	Y+13, r24	; 0x0d
    22b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <lcdClear+0xfe>
    22b8:	9e 87       	std	Y+14, r25	; 0x0e
    22ba:	8d 87       	std	Y+13, r24	; 0x0d
    22bc:	00 00       	nop
    22be:	2e 96       	adiw	r28, 0x0e	; 14
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	de bf       	out	0x3e, r29	; 62
    22c6:	0f be       	out	0x3f, r0	; 63
    22c8:	cd bf       	out	0x3d, r28	; 61
    22ca:	df 91       	pop	r29
    22cc:	cf 91       	pop	r28
    22ce:	08 95       	ret

000022d0 <lcdHome>:

void lcdHome() {
    22d0:	cf 93       	push	r28
    22d2:	df 93       	push	r29
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	2e 97       	sbiw	r28, 0x0e	; 14
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
    lcdCommand(LCD_RETURNHOME);  // set cursor position to zero
    22e4:	82 e0       	ldi	r24, 0x02	; 2
    22e6:	0e 94 0f 14 	call	0x281e	; 0x281e <lcdCommand>
    _spaceToEndOfTheLine = _cols;
    22ea:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <_cols>
    22ee:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <_spaceToEndOfTheLine>
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	a0 e0       	ldi	r26, 0x00	; 0
    22f8:	b0 e4       	ldi	r27, 0x40	; 64
    22fa:	89 83       	std	Y+1, r24	; 0x01
    22fc:	9a 83       	std	Y+2, r25	; 0x02
    22fe:	ab 83       	std	Y+3, r26	; 0x03
    2300:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2302:	2d ec       	ldi	r18, 0xCD	; 205
    2304:	3c ec       	ldi	r19, 0xCC	; 204
    2306:	4c e2       	ldi	r20, 0x2C	; 44
    2308:	55 e4       	ldi	r21, 0x45	; 69
    230a:	69 81       	ldd	r22, Y+1	; 0x01
    230c:	7a 81       	ldd	r23, Y+2	; 0x02
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	9c 81       	ldd	r25, Y+4	; 0x04
    2312:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	8d 83       	std	Y+5, r24	; 0x05
    231c:	9e 83       	std	Y+6, r25	; 0x06
    231e:	af 83       	std	Y+7, r26	; 0x07
    2320:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e8       	ldi	r20, 0x80	; 128
    2328:	5f e3       	ldi	r21, 0x3F	; 63
    232a:	6d 81       	ldd	r22, Y+5	; 0x05
    232c:	7e 81       	ldd	r23, Y+6	; 0x06
    232e:	8f 81       	ldd	r24, Y+7	; 0x07
    2330:	98 85       	ldd	r25, Y+8	; 0x08
    2332:	0e 94 18 2c 	call	0x5830	; 0x5830 <__cmpsf2>
    2336:	88 23       	and	r24, r24
    2338:	2c f4       	brge	.+10     	; 0x2344 <lcdHome+0x74>
		__ticks = 1;
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	9a 87       	std	Y+10, r25	; 0x0a
    2340:	89 87       	std	Y+9, r24	; 0x09
    2342:	3f c0       	rjmp	.+126    	; 0x23c2 <lcdHome+0xf2>
	else if (__tmp > 65535)
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	3f ef       	ldi	r19, 0xFF	; 255
    2348:	4f e7       	ldi	r20, 0x7F	; 127
    234a:	57 e4       	ldi	r21, 0x47	; 71
    234c:	6d 81       	ldd	r22, Y+5	; 0x05
    234e:	7e 81       	ldd	r23, Y+6	; 0x06
    2350:	8f 81       	ldd	r24, Y+7	; 0x07
    2352:	98 85       	ldd	r25, Y+8	; 0x08
    2354:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    2358:	18 16       	cp	r1, r24
    235a:	4c f5       	brge	.+82     	; 0x23ae <lcdHome+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e2       	ldi	r20, 0x20	; 32
    2362:	51 e4       	ldi	r21, 0x41	; 65
    2364:	69 81       	ldd	r22, Y+1	; 0x01
    2366:	7a 81       	ldd	r23, Y+2	; 0x02
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	bc 01       	movw	r22, r24
    2376:	cd 01       	movw	r24, r26
    2378:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	9a 87       	std	Y+10, r25	; 0x0a
    2382:	89 87       	std	Y+9, r24	; 0x09
    2384:	0f c0       	rjmp	.+30     	; 0x23a4 <lcdHome+0xd4>
    2386:	84 e1       	ldi	r24, 0x14	; 20
    2388:	91 e0       	ldi	r25, 0x01	; 1
    238a:	9c 87       	std	Y+12, r25	; 0x0c
    238c:	8b 87       	std	Y+11, r24	; 0x0b
    238e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2390:	9c 85       	ldd	r25, Y+12	; 0x0c
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	f1 f7       	brne	.-4      	; 0x2392 <lcdHome+0xc2>
    2396:	9c 87       	std	Y+12, r25	; 0x0c
    2398:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239a:	89 85       	ldd	r24, Y+9	; 0x09
    239c:	9a 85       	ldd	r25, Y+10	; 0x0a
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	9a 87       	std	Y+10, r25	; 0x0a
    23a2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a8:	89 2b       	or	r24, r25
    23aa:	69 f7       	brne	.-38     	; 0x2386 <lcdHome+0xb6>
    _delay_ms(2);  // this command takes a long time!
}
    23ac:	14 c0       	rjmp	.+40     	; 0x23d6 <lcdHome+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ae:	6d 81       	ldd	r22, Y+5	; 0x05
    23b0:	7e 81       	ldd	r23, Y+6	; 0x06
    23b2:	8f 81       	ldd	r24, Y+7	; 0x07
    23b4:	98 85       	ldd	r25, Y+8	; 0x08
    23b6:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	9a 87       	std	Y+10, r25	; 0x0a
    23c0:	89 87       	std	Y+9, r24	; 0x09
    23c2:	89 85       	ldd	r24, Y+9	; 0x09
    23c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c6:	9e 87       	std	Y+14, r25	; 0x0e
    23c8:	8d 87       	std	Y+13, r24	; 0x0d
    23ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    23cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <lcdHome+0xfe>
    23d2:	9e 87       	std	Y+14, r25	; 0x0e
    23d4:	8d 87       	std	Y+13, r24	; 0x0d
    23d6:	00 00       	nop
    23d8:	2e 96       	adiw	r28, 0x0e	; 14
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	de bf       	out	0x3e, r29	; 62
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	cd bf       	out	0x3d, r28	; 61
    23e4:	df 91       	pop	r29
    23e6:	cf 91       	pop	r28
    23e8:	08 95       	ret

000023ea <lcdNoDisplay>:

void lcdNoDisplay() {
    23ea:	cf 93       	push	r28
    23ec:	df 93       	push	r29
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
    _displayControl &= ~LCD_DISPLAYON;
    23f2:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_displayControl>
    23f6:	8b 7f       	andi	r24, 0xFB	; 251
    23f8:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <_displayControl>
    lcdCommand(LCD_DISPLAYCONTROL | _displayControl);
    23fc:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_displayControl>
    2400:	88 60       	ori	r24, 0x08	; 8
    2402:	0e 94 0f 14 	call	0x281e	; 0x281e <lcdCommand>
}
    2406:	00 00       	nop
    2408:	df 91       	pop	r29
    240a:	cf 91       	pop	r28
    240c:	08 95       	ret

0000240e <lcdDisplay>:

void lcdDisplay() {
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    _displayControl |= LCD_DISPLAYON;
    2416:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_displayControl>
    241a:	84 60       	ori	r24, 0x04	; 4
    241c:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <_displayControl>
    lcdCommand(LCD_DISPLAYCONTROL | _displayControl);
    2420:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_displayControl>
    2424:	88 60       	ori	r24, 0x08	; 8
    2426:	0e 94 0f 14 	call	0x281e	; 0x281e <lcdCommand>
}
    242a:	00 00       	nop
    242c:	df 91       	pop	r29
    242e:	cf 91       	pop	r28
    2430:	08 95       	ret

00002432 <lcdNoBlink>:

void lcdNoBlink() {
    2432:	cf 93       	push	r28
    2434:	df 93       	push	r29
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    _displayControl &= ~LCD_BLINKON;
    243a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_displayControl>
    243e:	8e 7f       	andi	r24, 0xFE	; 254
    2440:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <_displayControl>
    lcdCommand(LCD_DISPLAYCONTROL | _displayControl);
    2444:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_displayControl>
    2448:	88 60       	ori	r24, 0x08	; 8
    244a:	0e 94 0f 14 	call	0x281e	; 0x281e <lcdCommand>
}
    244e:	00 00       	nop
    2450:	df 91       	pop	r29
    2452:	cf 91       	pop	r28
    2454:	08 95       	ret

00002456 <lcdBlink>:

void lcdBlink() {
    2456:	cf 93       	push	r28
    2458:	df 93       	push	r29
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
    _displayControl |= LCD_BLINKON;
    245e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_displayControl>
    2462:	81 60       	ori	r24, 0x01	; 1
    2464:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <_displayControl>
    lcdCommand(LCD_DISPLAYCONTROL | _displayControl);
    2468:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_displayControl>
    246c:	88 60       	ori	r24, 0x08	; 8
    246e:	0e 94 0f 14 	call	0x281e	; 0x281e <lcdCommand>
}
    2472:	00 00       	nop
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	08 95       	ret

0000247a <lcdNoCursor>:

void lcdNoCursor() {
    247a:	cf 93       	push	r28
    247c:	df 93       	push	r29
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    _displayControl &= ~LCD_CURSORON;
    2482:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_displayControl>
    2486:	8d 7f       	andi	r24, 0xFD	; 253
    2488:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <_displayControl>
    lcdCommand(LCD_DISPLAYCONTROL | _displayControl);
    248c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_displayControl>
    2490:	88 60       	ori	r24, 0x08	; 8
    2492:	0e 94 0f 14 	call	0x281e	; 0x281e <lcdCommand>
}
    2496:	00 00       	nop
    2498:	df 91       	pop	r29
    249a:	cf 91       	pop	r28
    249c:	08 95       	ret

0000249e <lcdCursor>:

void lcdCursor() {
    249e:	cf 93       	push	r28
    24a0:	df 93       	push	r29
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    _displayControl |= LCD_CURSORON;
    24a6:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_displayControl>
    24aa:	82 60       	ori	r24, 0x02	; 2
    24ac:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <_displayControl>
    lcdCommand(LCD_DISPLAYCONTROL | _displayControl);
    24b0:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_displayControl>
    24b4:	88 60       	ori	r24, 0x08	; 8
    24b6:	0e 94 0f 14 	call	0x281e	; 0x281e <lcdCommand>
}
    24ba:	00 00       	nop
    24bc:	df 91       	pop	r29
    24be:	cf 91       	pop	r28
    24c0:	08 95       	ret

000024c2 <lcdScrollDisplayLeft>:

void lcdScrollDisplayLeft() {
    24c2:	cf 93       	push	r28
    24c4:	df 93       	push	r29
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    lcdCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
    24ca:	88 e1       	ldi	r24, 0x18	; 24
    24cc:	0e 94 0f 14 	call	0x281e	; 0x281e <lcdCommand>
}
    24d0:	00 00       	nop
    24d2:	df 91       	pop	r29
    24d4:	cf 91       	pop	r28
    24d6:	08 95       	ret

000024d8 <lcdScrollDisplayRight>:

void lcdScrollDisplayRight() {
    24d8:	cf 93       	push	r28
    24da:	df 93       	push	r29
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
    lcdCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
    24e0:	8c e1       	ldi	r24, 0x1C	; 28
    24e2:	0e 94 0f 14 	call	0x281e	; 0x281e <lcdCommand>
}
    24e6:	00 00       	nop
    24e8:	df 91       	pop	r29
    24ea:	cf 91       	pop	r28
    24ec:	08 95       	ret

000024ee <lcdLeftToRight>:

void lcdLeftToRight() {
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    _displayMode |= LCD_ENTRYLEFT;
    24f6:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <_displayMode>
    24fa:	82 60       	ori	r24, 0x02	; 2
    24fc:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <_displayMode>
    lcdCommand(LCD_ENTRYMODESET | _displayMode);
    2500:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <_displayMode>
    2504:	84 60       	ori	r24, 0x04	; 4
    2506:	0e 94 0f 14 	call	0x281e	; 0x281e <lcdCommand>
}
    250a:	00 00       	nop
    250c:	df 91       	pop	r29
    250e:	cf 91       	pop	r28
    2510:	08 95       	ret

00002512 <lcdRightToLeft>:

void lcdRightToLeft() {
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
    _displayMode &= ~LCD_ENTRYLEFT;
    251a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <_displayMode>
    251e:	8d 7f       	andi	r24, 0xFD	; 253
    2520:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <_displayMode>
    lcdCommand(LCD_ENTRYMODESET | _displayMode);
    2524:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <_displayMode>
    2528:	84 60       	ori	r24, 0x04	; 4
    252a:	0e 94 0f 14 	call	0x281e	; 0x281e <lcdCommand>
}
    252e:	00 00       	nop
    2530:	df 91       	pop	r29
    2532:	cf 91       	pop	r28
    2534:	08 95       	ret

00002536 <lcdNoBacklight>:

void lcdNoBacklight() {
    2536:	cf 93       	push	r28
    2538:	df 93       	push	r29
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
    _backlightVal = LCD_NOBACKLIGHT;
    253e:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <_backlightVal>
    lcdPortWrite(0);
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <lcdPortWrite>
}
    2548:	00 00       	nop
    254a:	df 91       	pop	r29
    254c:	cf 91       	pop	r28
    254e:	08 95       	ret

00002550 <lcdBacklight>:

void lcdBacklight() {
    2550:	cf 93       	push	r28
    2552:	df 93       	push	r29
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    _backlightVal = LCD_BACKLIGHT;
    2558:	80 e8       	ldi	r24, 0x80	; 128
    255a:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <_backlightVal>
    lcdPortWrite(0);
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <lcdPortWrite>
}
    2564:	00 00       	nop
    2566:	df 91       	pop	r29
    2568:	cf 91       	pop	r28
    256a:	08 95       	ret

0000256c <lcdAutoscroll>:

void lcdAutoscroll() {
    256c:	cf 93       	push	r28
    256e:	df 93       	push	r29
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    _displayMode |= LCD_ENTRYSHIFTINCREMENT;
    2574:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <_displayMode>
    2578:	81 60       	ori	r24, 0x01	; 1
    257a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <_displayMode>
    lcdCommand(LCD_ENTRYMODESET | _displayMode);
    257e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <_displayMode>
    2582:	84 60       	ori	r24, 0x04	; 4
    2584:	0e 94 0f 14 	call	0x281e	; 0x281e <lcdCommand>
}
    2588:	00 00       	nop
    258a:	df 91       	pop	r29
    258c:	cf 91       	pop	r28
    258e:	08 95       	ret

00002590 <lcdNoAutoscroll>:

void lcdNoAutoscroll() {
    2590:	cf 93       	push	r28
    2592:	df 93       	push	r29
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    _displayMode &= ~LCD_ENTRYSHIFTINCREMENT;
    2598:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <_displayMode>
    259c:	8e 7f       	andi	r24, 0xFE	; 254
    259e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <_displayMode>
    lcdCommand(LCD_ENTRYMODESET | _displayMode);
    25a2:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <_displayMode>
    25a6:	84 60       	ori	r24, 0x04	; 4
    25a8:	0e 94 0f 14 	call	0x281e	; 0x281e <lcdCommand>
}
    25ac:	00 00       	nop
    25ae:	df 91       	pop	r29
    25b0:	cf 91       	pop	r28
    25b2:	08 95       	ret

000025b4 <lcdCreateChar>:

void lcdCreateChar(uint8_t location , const uint8_t charMap[]) {
    25b4:	cf 93       	push	r28
    25b6:	df 93       	push	r29
    25b8:	00 d0       	rcall	.+0      	; 0x25ba <lcdCreateChar+0x6>
    25ba:	00 d0       	rcall	.+0      	; 0x25bc <lcdCreateChar+0x8>
    25bc:	1f 92       	push	r1
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	8b 83       	std	Y+3, r24	; 0x03
    25c4:	7d 83       	std	Y+5, r23	; 0x05
    25c6:	6c 83       	std	Y+4, r22	; 0x04
    location &= 0x7; // we only have 8 locations 0-7
    25c8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ca:	87 70       	andi	r24, 0x07	; 7
    25cc:	8b 83       	std	Y+3, r24	; 0x03
    lcdCommand(LCD_SETCGRAMADDR | (location << 3));
    25ce:	8b 81       	ldd	r24, Y+3	; 0x03
    25d0:	88 2f       	mov	r24, r24
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	88 0f       	add	r24, r24
    25d6:	99 1f       	adc	r25, r25
    25d8:	88 0f       	add	r24, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	88 0f       	add	r24, r24
    25de:	99 1f       	adc	r25, r25
    25e0:	80 64       	ori	r24, 0x40	; 64
    25e2:	0e 94 0f 14 	call	0x281e	; 0x281e <lcdCommand>
    for (int i=0; i < 8; i++) {
    25e6:	1a 82       	std	Y+2, r1	; 0x02
    25e8:	19 82       	std	Y+1, r1	; 0x01
    25ea:	0f c0       	rjmp	.+30     	; 0x260a <lcdCreateChar+0x56>
        lcdWrite(charMap[i]);
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	9a 81       	ldd	r25, Y+2	; 0x02
    25f0:	2c 81       	ldd	r18, Y+4	; 0x04
    25f2:	3d 81       	ldd	r19, Y+5	; 0x05
    25f4:	82 0f       	add	r24, r18
    25f6:	93 1f       	adc	r25, r19
    25f8:	fc 01       	movw	r30, r24
    25fa:	80 81       	ld	r24, Z
    25fc:	0e 94 1e 14 	call	0x283c	; 0x283c <lcdWrite>
}

void lcdCreateChar(uint8_t location , const uint8_t charMap[]) {
    location &= 0x7; // we only have 8 locations 0-7
    lcdCommand(LCD_SETCGRAMADDR | (location << 3));
    for (int i=0; i < 8; i++) {
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	9a 81       	ldd	r25, Y+2	; 0x02
    2604:	01 96       	adiw	r24, 0x01	; 1
    2606:	9a 83       	std	Y+2, r25	; 0x02
    2608:	89 83       	std	Y+1, r24	; 0x01
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	9a 81       	ldd	r25, Y+2	; 0x02
    260e:	08 97       	sbiw	r24, 0x08	; 8
    2610:	6c f3       	brlt	.-38     	; 0x25ec <lcdCreateChar+0x38>
        lcdWrite(charMap[i]);
    }
}
    2612:	00 00       	nop
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
    261e:	df 91       	pop	r29
    2620:	cf 91       	pop	r28
    2622:	08 95       	ret

00002624 <lcdSetCursor>:

void lcdSetCursor(uint8_t col, uint8_t row) {
    2624:	cf 93       	push	r28
    2626:	df 93       	push	r29
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	2a 97       	sbiw	r28, 0x0a	; 10
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61
    2638:	89 87       	std	Y+9, r24	; 0x09
    263a:	6a 87       	std	Y+10, r22	; 0x0a
    int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
    263c:	28 e0       	ldi	r18, 0x08	; 8
    263e:	e2 ef       	ldi	r30, 0xF2	; 242
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	ce 01       	movw	r24, r28
    2644:	01 96       	adiw	r24, 0x01	; 1
    2646:	dc 01       	movw	r26, r24
    2648:	01 90       	ld	r0, Z+
    264a:	0d 92       	st	X+, r0
    264c:	2a 95       	dec	r18
    264e:	e1 f7       	brne	.-8      	; 0x2648 <lcdSetCursor+0x24>
    if (row > _rows) {
    2650:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <_rows>
    2654:	9a 85       	ldd	r25, Y+10	; 0x0a
    2656:	89 17       	cp	r24, r25
    2658:	20 f4       	brcc	.+8      	; 0x2662 <lcdSetCursor+0x3e>
        row = _rows-1;    // we count rows starting w/0
    265a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <_rows>
    265e:	81 50       	subi	r24, 0x01	; 1
    2660:	8a 87       	std	Y+10, r24	; 0x0a
    }
    lcdCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
    2662:	8a 85       	ldd	r24, Y+10	; 0x0a
    2664:	88 2f       	mov	r24, r24
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	9e 01       	movw	r18, r28
    266e:	2f 5f       	subi	r18, 0xFF	; 255
    2670:	3f 4f       	sbci	r19, 0xFF	; 255
    2672:	82 0f       	add	r24, r18
    2674:	93 1f       	adc	r25, r19
    2676:	fc 01       	movw	r30, r24
    2678:	80 81       	ld	r24, Z
    267a:	91 81       	ldd	r25, Z+1	; 0x01
    267c:	98 2f       	mov	r25, r24
    267e:	89 85       	ldd	r24, Y+9	; 0x09
    2680:	89 0f       	add	r24, r25
    2682:	80 68       	ori	r24, 0x80	; 128
    2684:	0e 94 0f 14 	call	0x281e	; 0x281e <lcdCommand>
    _spaceToEndOfTheLine = _cols - col;
    2688:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <_cols>
    268c:	89 85       	ldd	r24, Y+9	; 0x09
    268e:	f9 2f       	mov	r31, r25
    2690:	f8 1b       	sub	r31, r24
    2692:	8f 2f       	mov	r24, r31
    2694:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <_spaceToEndOfTheLine>
#ifdef _TESTS_ENV
    _lcdCurrentPos = col + row * _cols;
#endif
}
    2698:	00 00       	nop
    269a:	2a 96       	adiw	r28, 0x0a	; 10
    269c:	0f b6       	in	r0, 0x3f	; 63
    269e:	f8 94       	cli
    26a0:	de bf       	out	0x3e, r29	; 62
    26a2:	0f be       	out	0x3f, r0	; 63
    26a4:	cd bf       	out	0x3d, r28	; 61
    26a6:	df 91       	pop	r29
    26a8:	cf 91       	pop	r28
    26aa:	08 95       	ret

000026ac <lcdBlinkOn>:

void lcdBlinkOn() {
    26ac:	cf 93       	push	r28
    26ae:	df 93       	push	r29
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    lcdBlink();
    26b4:	0e 94 2b 12 	call	0x2456	; 0x2456 <lcdBlink>
}
    26b8:	00 00       	nop
    26ba:	df 91       	pop	r29
    26bc:	cf 91       	pop	r28
    26be:	08 95       	ret

000026c0 <lcdBlinkOff>:

void lcdBlinkOff() {
    26c0:	cf 93       	push	r28
    26c2:	df 93       	push	r29
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    lcdNoBlink();
    26c8:	0e 94 19 12 	call	0x2432	; 0x2432 <lcdNoBlink>
}
    26cc:	00 00       	nop
    26ce:	df 91       	pop	r29
    26d0:	cf 91       	pop	r28
    26d2:	08 95       	ret

000026d4 <lcdCursorOn>:

void lcdCursorOn() {
    26d4:	cf 93       	push	r28
    26d6:	df 93       	push	r29
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    lcdCursor();
    26dc:	0e 94 4f 12 	call	0x249e	; 0x249e <lcdCursor>
}
    26e0:	00 00       	nop
    26e2:	df 91       	pop	r29
    26e4:	cf 91       	pop	r28
    26e6:	08 95       	ret

000026e8 <lcdCursorOff>:

void lcdCursorOff() {
    26e8:	cf 93       	push	r28
    26ea:	df 93       	push	r29
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
    lcdNoCursor();
    26f0:	0e 94 3d 12 	call	0x247a	; 0x247a <lcdNoCursor>
}
    26f4:	00 00       	nop
    26f6:	df 91       	pop	r29
    26f8:	cf 91       	pop	r28
    26fa:	08 95       	ret

000026fc <lcdPrintstr>:

void lcdPrintstr(const char *str) {
    26fc:	cf 93       	push	r28
    26fe:	df 93       	push	r29
    2700:	00 d0       	rcall	.+0      	; 0x2702 <lcdPrintstr+0x6>
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
    2706:	9a 83       	std	Y+2, r25	; 0x02
    2708:	89 83       	std	Y+1, r24	; 0x01
    lcdPrint(str);
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	9a 81       	ldd	r25, Y+2	; 0x02
    270e:	0e 94 b2 13 	call	0x2764	; 0x2764 <lcdPrint>
}
    2712:	00 00       	nop
    2714:	0f 90       	pop	r0
    2716:	0f 90       	pop	r0
    2718:	df 91       	pop	r29
    271a:	cf 91       	pop	r28
    271c:	08 95       	ret

0000271e <lcdFillSpacesToEndOfTheLine>:

void lcdFillSpacesToEndOfTheLine(void) {
    271e:	cf 93       	push	r28
    2720:	df 93       	push	r29
    2722:	00 d0       	rcall	.+0      	; 0x2724 <lcdFillSpacesToEndOfTheLine+0x6>
    2724:	1f 92       	push	r1
    2726:	cd b7       	in	r28, 0x3d	; 61
    2728:	de b7       	in	r29, 0x3e	; 62
    uint8_t loops = _spaceToEndOfTheLine;
    272a:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <_spaceToEndOfTheLine>
    272e:	8b 83       	std	Y+3, r24	; 0x03
    for (int i = 0; i < loops; i++) {
    2730:	1a 82       	std	Y+2, r1	; 0x02
    2732:	19 82       	std	Y+1, r1	; 0x01
    2734:	08 c0       	rjmp	.+16     	; 0x2746 <lcdFillSpacesToEndOfTheLine+0x28>
        lcdWrite(' ');
    2736:	80 e2       	ldi	r24, 0x20	; 32
    2738:	0e 94 1e 14 	call	0x283c	; 0x283c <lcdWrite>
    lcdPrint(str);
}

void lcdFillSpacesToEndOfTheLine(void) {
    uint8_t loops = _spaceToEndOfTheLine;
    for (int i = 0; i < loops; i++) {
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	9a 81       	ldd	r25, Y+2	; 0x02
    2740:	01 96       	adiw	r24, 0x01	; 1
    2742:	9a 83       	std	Y+2, r25	; 0x02
    2744:	89 83       	std	Y+1, r24	; 0x01
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	28 2f       	mov	r18, r24
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	9a 81       	ldd	r25, Y+2	; 0x02
    2750:	82 17       	cp	r24, r18
    2752:	93 07       	cpc	r25, r19
    2754:	84 f3       	brlt	.-32     	; 0x2736 <lcdFillSpacesToEndOfTheLine+0x18>
        lcdWrite(' ');
    }
}
    2756:	00 00       	nop
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	df 91       	pop	r29
    2760:	cf 91       	pop	r28
    2762:	08 95       	ret

00002764 <lcdPrint>:

void lcdPrint(const char *str) {
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	00 d0       	rcall	.+0      	; 0x276a <lcdPrint+0x6>
    276a:	1f 92       	push	r1
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	9b 83       	std	Y+3, r25	; 0x03
    2772:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i = 0;
    2774:	19 82       	std	Y+1, r1	; 0x01
    while (str[i] != '\0') {
    2776:	0e c0       	rjmp	.+28     	; 0x2794 <lcdPrint+0x30>
        lcdWrite(str[i++]);
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	91 e0       	ldi	r25, 0x01	; 1
    277c:	98 0f       	add	r25, r24
    277e:	99 83       	std	Y+1, r25	; 0x01
    2780:	88 2f       	mov	r24, r24
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	2a 81       	ldd	r18, Y+2	; 0x02
    2786:	3b 81       	ldd	r19, Y+3	; 0x03
    2788:	82 0f       	add	r24, r18
    278a:	93 1f       	adc	r25, r19
    278c:	fc 01       	movw	r30, r24
    278e:	80 81       	ld	r24, Z
    2790:	0e 94 1e 14 	call	0x283c	; 0x283c <lcdWrite>
    }
}

void lcdPrint(const char *str) {
    uint8_t i = 0;
    while (str[i] != '\0') {
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	88 2f       	mov	r24, r24
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	2a 81       	ldd	r18, Y+2	; 0x02
    279c:	3b 81       	ldd	r19, Y+3	; 0x03
    279e:	82 0f       	add	r24, r18
    27a0:	93 1f       	adc	r25, r19
    27a2:	fc 01       	movw	r30, r24
    27a4:	80 81       	ld	r24, Z
    27a6:	88 23       	and	r24, r24
    27a8:	39 f7       	brne	.-50     	; 0x2778 <lcdPrint+0x14>
        lcdWrite(str[i++]);
    }
}
    27aa:	00 00       	nop
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	df 91       	pop	r29
    27b4:	cf 91       	pop	r28
    27b6:	08 95       	ret

000027b8 <lcdPrint_P>:

void lcdPrint_P(const char *str) {
    27b8:	1f 93       	push	r17
    27ba:	cf 93       	push	r28
    27bc:	df 93       	push	r29
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	27 97       	sbiw	r28, 0x07	; 7
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	de bf       	out	0x3e, r29	; 62
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	cd bf       	out	0x3d, r28	; 61
    27ce:	9f 83       	std	Y+7, r25	; 0x07
    27d0:	8e 83       	std	Y+6, r24	; 0x06
    register char c = 0;
    27d2:	10 e0       	ldi	r17, 0x00	; 0
    const unsigned char *strTmp = (const unsigned char *) str;
    27d4:	8e 81       	ldd	r24, Y+6	; 0x06
    27d6:	9f 81       	ldd	r25, Y+7	; 0x07
    27d8:	9a 83       	std	Y+2, r25	; 0x02
    27da:	89 83       	std	Y+1, r24	; 0x01
    while (0 != (c = pgm_read_byte(strTmp++))) {
    27dc:	03 c0       	rjmp	.+6      	; 0x27e4 <lcdPrint_P+0x2c>
        lcdWrite(c);
    27de:	81 2f       	mov	r24, r17
    27e0:	0e 94 1e 14 	call	0x283c	; 0x283c <lcdWrite>
}

void lcdPrint_P(const char *str) {
    register char c = 0;
    const unsigned char *strTmp = (const unsigned char *) str;
    while (0 != (c = pgm_read_byte(strTmp++))) {
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	9a 81       	ldd	r25, Y+2	; 0x02
    27e8:	9c 01       	movw	r18, r24
    27ea:	2f 5f       	subi	r18, 0xFF	; 255
    27ec:	3f 4f       	sbci	r19, 0xFF	; 255
    27ee:	3a 83       	std	Y+2, r19	; 0x02
    27f0:	29 83       	std	Y+1, r18	; 0x01
    27f2:	9c 83       	std	Y+4, r25	; 0x04
    27f4:	8b 83       	std	Y+3, r24	; 0x03
    27f6:	8b 81       	ldd	r24, Y+3	; 0x03
    27f8:	9c 81       	ldd	r25, Y+4	; 0x04
    27fa:	fc 01       	movw	r30, r24
    27fc:	84 91       	lpm	r24, Z
    27fe:	8d 83       	std	Y+5, r24	; 0x05
    2800:	8d 81       	ldd	r24, Y+5	; 0x05
    2802:	18 2f       	mov	r17, r24
    2804:	11 23       	and	r17, r17
    2806:	59 f7       	brne	.-42     	; 0x27de <lcdPrint_P+0x26>
        lcdWrite(c);
    }
}
    2808:	00 00       	nop
    280a:	27 96       	adiw	r28, 0x07	; 7
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	df 91       	pop	r29
    2818:	cf 91       	pop	r28
    281a:	1f 91       	pop	r17
    281c:	08 95       	ret

0000281e <lcdCommand>:

// mid level commands, for sending data/cmds
void lcdCommand(uint8_t value) {
    281e:	cf 93       	push	r28
    2820:	df 93       	push	r29
    2822:	1f 92       	push	r1
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62
    2828:	89 83       	std	Y+1, r24	; 0x01
#ifndef _TESTS_ENV
    lcdSend(value, 0);
    282a:	60 e0       	ldi	r22, 0x00	; 0
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	0e 94 32 14 	call	0x2864	; 0x2864 <lcdSend>
#endif
}
    2832:	00 00       	nop
    2834:	0f 90       	pop	r0
    2836:	df 91       	pop	r29
    2838:	cf 91       	pop	r28
    283a:	08 95       	ret

0000283c <lcdWrite>:

void lcdWrite(uint8_t value) {
    283c:	cf 93       	push	r28
    283e:	df 93       	push	r29
    2840:	1f 92       	push	r1
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	89 83       	std	Y+1, r24	; 0x01
#ifndef _TESTS_ENV
    lcdSend(value, Rs);
    2848:	61 e0       	ldi	r22, 0x01	; 1
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	0e 94 32 14 	call	0x2864	; 0x2864 <lcdSend>
    _spaceToEndOfTheLine--;
    2850:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <_spaceToEndOfTheLine>
    2854:	81 50       	subi	r24, 0x01	; 1
    2856:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <_spaceToEndOfTheLine>
#else
    _lcdTestBuff[_lcdCurrentPos++] = value;
#endif
}
    285a:	00 00       	nop
    285c:	0f 90       	pop	r0
    285e:	df 91       	pop	r29
    2860:	cf 91       	pop	r28
    2862:	08 95       	ret

00002864 <lcdSend>:

// low level data pushing commands
void lcdSend(uint8_t value, uint8_t mode) {
    2864:	cf 93       	push	r28
    2866:	df 93       	push	r29
    2868:	00 d0       	rcall	.+0      	; 0x286a <lcdSend+0x6>
    286a:	00 d0       	rcall	.+0      	; 0x286c <lcdSend+0x8>
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
    2870:	8b 83       	std	Y+3, r24	; 0x03
    2872:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t highNib =  value       & 0xf0;
    2874:	8b 81       	ldd	r24, Y+3	; 0x03
    2876:	80 7f       	andi	r24, 0xF0	; 240
    2878:	89 83       	std	Y+1, r24	; 0x01
    uint8_t lowNib  = (value << 4) & 0xf0;
    287a:	8b 81       	ldd	r24, Y+3	; 0x03
    287c:	88 2f       	mov	r24, r24
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	82 95       	swap	r24
    2882:	92 95       	swap	r25
    2884:	90 7f       	andi	r25, 0xF0	; 240
    2886:	98 27       	eor	r25, r24
    2888:	80 7f       	andi	r24, 0xF0	; 240
    288a:	98 27       	eor	r25, r24
    288c:	8a 83       	std	Y+2, r24	; 0x02
    lcdWrite4bits((highNib) | mode);
    288e:	99 81       	ldd	r25, Y+1	; 0x01
    2890:	8c 81       	ldd	r24, Y+4	; 0x04
    2892:	89 2b       	or	r24, r25
    2894:	0e 94 59 14 	call	0x28b2	; 0x28b2 <lcdWrite4bits>
    lcdWrite4bits((lowNib) | mode);
    2898:	9a 81       	ldd	r25, Y+2	; 0x02
    289a:	8c 81       	ldd	r24, Y+4	; 0x04
    289c:	89 2b       	or	r24, r25
    289e:	0e 94 59 14 	call	0x28b2	; 0x28b2 <lcdWrite4bits>
}
    28a2:	00 00       	nop
    28a4:	0f 90       	pop	r0
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	df 91       	pop	r29
    28ae:	cf 91       	pop	r28
    28b0:	08 95       	ret

000028b2 <lcdWrite4bits>:

void lcdWrite4bits(uint8_t value) {
    28b2:	cf 93       	push	r28
    28b4:	df 93       	push	r29
    28b6:	1f 92       	push	r1
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
    28bc:	89 83       	std	Y+1, r24	; 0x01
    lcdPortWriteAndEnable(value);
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcdPortWriteAndEnable>
}
    28c4:	00 00       	nop
    28c6:	0f 90       	pop	r0
    28c8:	df 91       	pop	r29
    28ca:	cf 91       	pop	r28
    28cc:	08 95       	ret

000028ce <lcdPortWriteAndEnable>:

void lcdPortWriteAndEnable(uint8_t data) {
    28ce:	cf 93       	push	r28
    28d0:	df 93       	push	r29
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
    28d6:	c1 54       	subi	r28, 0x41	; 65
    28d8:	d1 09       	sbc	r29, r1
    28da:	0f b6       	in	r0, 0x3f	; 63
    28dc:	f8 94       	cli
    28de:	de bf       	out	0x3e, r29	; 62
    28e0:	0f be       	out	0x3f, r0	; 63
    28e2:	cd bf       	out	0x3d, r28	; 61
    28e4:	9e 01       	movw	r18, r28
    28e6:	2f 5b       	subi	r18, 0xBF	; 191
    28e8:	3f 4f       	sbci	r19, 0xFF	; 255
    28ea:	f9 01       	movw	r30, r18
    28ec:	80 83       	st	Z, r24
    lcdPortWrite(data | En);    // En high
    28ee:	ce 01       	movw	r24, r28
    28f0:	8f 5b       	subi	r24, 0xBF	; 191
    28f2:	9f 4f       	sbci	r25, 0xFF	; 255
    28f4:	fc 01       	movw	r30, r24
    28f6:	80 81       	ld	r24, Z
    28f8:	84 60       	ori	r24, 0x04	; 4
    28fa:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <lcdPortWrite>
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	ac e8       	ldi	r26, 0x8C	; 140
    2904:	b2 e4       	ldi	r27, 0x42	; 66
    2906:	89 83       	std	Y+1, r24	; 0x01
    2908:	9a 83       	std	Y+2, r25	; 0x02
    290a:	ab 83       	std	Y+3, r26	; 0x03
    290c:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    290e:	2a ef       	ldi	r18, 0xFA	; 250
    2910:	3d ee       	ldi	r19, 0xED	; 237
    2912:	4b e6       	ldi	r20, 0x6B	; 107
    2914:	50 e4       	ldi	r21, 0x40	; 64
    2916:	69 81       	ldd	r22, Y+1	; 0x01
    2918:	7a 81       	ldd	r23, Y+2	; 0x02
    291a:	8b 81       	ldd	r24, Y+3	; 0x03
    291c:	9c 81       	ldd	r25, Y+4	; 0x04
    291e:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	8d a3       	std	Y+37, r24	; 0x25
    2928:	9e a3       	std	Y+38, r25	; 0x26
    292a:	af a3       	std	Y+39, r26	; 0x27
    292c:	b8 a7       	std	Y+40, r27	; 0x28
	__tmp2 = ((F_CPU) / 4e6) * __us;
    292e:	2c e7       	ldi	r18, 0x7C	; 124
    2930:	32 ef       	ldi	r19, 0xF2	; 242
    2932:	40 e3       	ldi	r20, 0x30	; 48
    2934:	50 e4       	ldi	r21, 0x40	; 64
    2936:	69 81       	ldd	r22, Y+1	; 0x01
    2938:	7a 81       	ldd	r23, Y+2	; 0x02
    293a:	8b 81       	ldd	r24, Y+3	; 0x03
    293c:	9c 81       	ldd	r25, Y+4	; 0x04
    293e:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	89 a7       	std	Y+41, r24	; 0x29
    2948:	9a a7       	std	Y+42, r25	; 0x2a
    294a:	ab a7       	std	Y+43, r26	; 0x2b
    294c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	40 e8       	ldi	r20, 0x80	; 128
    2954:	5f e3       	ldi	r21, 0x3F	; 63
    2956:	6d a1       	ldd	r22, Y+37	; 0x25
    2958:	7e a1       	ldd	r23, Y+38	; 0x26
    295a:	8f a1       	ldd	r24, Y+39	; 0x27
    295c:	98 a5       	ldd	r25, Y+40	; 0x28
    295e:	0e 94 18 2c 	call	0x5830	; 0x5830 <__cmpsf2>
    2962:	88 23       	and	r24, r24
    2964:	1c f4       	brge	.+6      	; 0x296c <lcdPortWriteAndEnable+0x9e>
		__ticks = 1;
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	8d a7       	std	Y+45, r24	; 0x2d
    296a:	b2 c0       	rjmp	.+356    	; 0x2ad0 <lcdPortWriteAndEnable+0x202>
	else if (__tmp2 > 65535)
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	3f ef       	ldi	r19, 0xFF	; 255
    2970:	4f e7       	ldi	r20, 0x7F	; 127
    2972:	57 e4       	ldi	r21, 0x47	; 71
    2974:	69 a5       	ldd	r22, Y+41	; 0x29
    2976:	7a a5       	ldd	r23, Y+42	; 0x2a
    2978:	8b a5       	ldd	r24, Y+43	; 0x2b
    297a:	9c a5       	ldd	r25, Y+44	; 0x2c
    297c:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    2980:	18 16       	cp	r1, r24
    2982:	0c f0       	brlt	.+2      	; 0x2986 <lcdPortWriteAndEnable+0xb8>
    2984:	7b c0       	rjmp	.+246    	; 0x2a7c <lcdPortWriteAndEnable+0x1ae>
	{
		_delay_ms(__us / 1000.0);
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	4a e7       	ldi	r20, 0x7A	; 122
    298c:	54 e4       	ldi	r21, 0x44	; 68
    298e:	69 81       	ldd	r22, Y+1	; 0x01
    2990:	7a 81       	ldd	r23, Y+2	; 0x02
    2992:	8b 81       	ldd	r24, Y+3	; 0x03
    2994:	9c 81       	ldd	r25, Y+4	; 0x04
    2996:	0e 94 1d 2c 	call	0x583a	; 0x583a <__divsf3>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	8e a7       	std	Y+46, r24	; 0x2e
    29a0:	9f a7       	std	Y+47, r25	; 0x2f
    29a2:	a8 ab       	std	Y+48, r26	; 0x30
    29a4:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    29a6:	2d ec       	ldi	r18, 0xCD	; 205
    29a8:	3c ec       	ldi	r19, 0xCC	; 204
    29aa:	4c e2       	ldi	r20, 0x2C	; 44
    29ac:	55 e4       	ldi	r21, 0x45	; 69
    29ae:	6e a5       	ldd	r22, Y+46	; 0x2e
    29b0:	7f a5       	ldd	r23, Y+47	; 0x2f
    29b2:	88 a9       	ldd	r24, Y+48	; 0x30
    29b4:	99 a9       	ldd	r25, Y+49	; 0x31
    29b6:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	8a ab       	std	Y+50, r24	; 0x32
    29c0:	9b ab       	std	Y+51, r25	; 0x33
    29c2:	ac ab       	std	Y+52, r26	; 0x34
    29c4:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	40 e8       	ldi	r20, 0x80	; 128
    29cc:	5f e3       	ldi	r21, 0x3F	; 63
    29ce:	6a a9       	ldd	r22, Y+50	; 0x32
    29d0:	7b a9       	ldd	r23, Y+51	; 0x33
    29d2:	8c a9       	ldd	r24, Y+52	; 0x34
    29d4:	9d a9       	ldd	r25, Y+53	; 0x35
    29d6:	0e 94 18 2c 	call	0x5830	; 0x5830 <__cmpsf2>
    29da:	88 23       	and	r24, r24
    29dc:	2c f4       	brge	.+10     	; 0x29e8 <lcdPortWriteAndEnable+0x11a>
		__ticks = 1;
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	9f ab       	std	Y+55, r25	; 0x37
    29e4:	8e ab       	std	Y+54, r24	; 0x36
    29e6:	3f c0       	rjmp	.+126    	; 0x2a66 <lcdPortWriteAndEnable+0x198>
	else if (__tmp > 65535)
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	3f ef       	ldi	r19, 0xFF	; 255
    29ec:	4f e7       	ldi	r20, 0x7F	; 127
    29ee:	57 e4       	ldi	r21, 0x47	; 71
    29f0:	6a a9       	ldd	r22, Y+50	; 0x32
    29f2:	7b a9       	ldd	r23, Y+51	; 0x33
    29f4:	8c a9       	ldd	r24, Y+52	; 0x34
    29f6:	9d a9       	ldd	r25, Y+53	; 0x35
    29f8:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    29fc:	18 16       	cp	r1, r24
    29fe:	4c f5       	brge	.+82     	; 0x2a52 <lcdPortWriteAndEnable+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	40 e2       	ldi	r20, 0x20	; 32
    2a06:	51 e4       	ldi	r21, 0x41	; 65
    2a08:	6e a5       	ldd	r22, Y+46	; 0x2e
    2a0a:	7f a5       	ldd	r23, Y+47	; 0x2f
    2a0c:	88 a9       	ldd	r24, Y+48	; 0x30
    2a0e:	99 a9       	ldd	r25, Y+49	; 0x31
    2a10:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	bc 01       	movw	r22, r24
    2a1a:	cd 01       	movw	r24, r26
    2a1c:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	9f ab       	std	Y+55, r25	; 0x37
    2a26:	8e ab       	std	Y+54, r24	; 0x36
    2a28:	0f c0       	rjmp	.+30     	; 0x2a48 <lcdPortWriteAndEnable+0x17a>
    2a2a:	84 e1       	ldi	r24, 0x14	; 20
    2a2c:	91 e0       	ldi	r25, 0x01	; 1
    2a2e:	99 af       	std	Y+57, r25	; 0x39
    2a30:	88 af       	std	Y+56, r24	; 0x38
    2a32:	88 ad       	ldd	r24, Y+56	; 0x38
    2a34:	99 ad       	ldd	r25, Y+57	; 0x39
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	f1 f7       	brne	.-4      	; 0x2a36 <lcdPortWriteAndEnable+0x168>
    2a3a:	99 af       	std	Y+57, r25	; 0x39
    2a3c:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3e:	8e a9       	ldd	r24, Y+54	; 0x36
    2a40:	9f a9       	ldd	r25, Y+55	; 0x37
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	9f ab       	std	Y+55, r25	; 0x37
    2a46:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a48:	8e a9       	ldd	r24, Y+54	; 0x36
    2a4a:	9f a9       	ldd	r25, Y+55	; 0x37
    2a4c:	89 2b       	or	r24, r25
    2a4e:	69 f7       	brne	.-38     	; 0x2a2a <lcdPortWriteAndEnable+0x15c>
    2a50:	3f c0       	rjmp	.+126    	; 0x2ad0 <lcdPortWriteAndEnable+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a52:	6a a9       	ldd	r22, Y+50	; 0x32
    2a54:	7b a9       	ldd	r23, Y+51	; 0x33
    2a56:	8c a9       	ldd	r24, Y+52	; 0x34
    2a58:	9d a9       	ldd	r25, Y+53	; 0x35
    2a5a:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	9f ab       	std	Y+55, r25	; 0x37
    2a64:	8e ab       	std	Y+54, r24	; 0x36
    2a66:	8e a9       	ldd	r24, Y+54	; 0x36
    2a68:	9f a9       	ldd	r25, Y+55	; 0x37
    2a6a:	9b af       	std	Y+59, r25	; 0x3b
    2a6c:	8a af       	std	Y+58, r24	; 0x3a
    2a6e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a70:	9b ad       	ldd	r25, Y+59	; 0x3b
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	f1 f7       	brne	.-4      	; 0x2a72 <lcdPortWriteAndEnable+0x1a4>
    2a76:	9b af       	std	Y+59, r25	; 0x3b
    2a78:	8a af       	std	Y+58, r24	; 0x3a
    2a7a:	2a c0       	rjmp	.+84     	; 0x2ad0 <lcdPortWriteAndEnable+0x202>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	4f e7       	ldi	r20, 0x7F	; 127
    2a82:	53 e4       	ldi	r21, 0x43	; 67
    2a84:	6d a1       	ldd	r22, Y+37	; 0x25
    2a86:	7e a1       	ldd	r23, Y+38	; 0x26
    2a88:	8f a1       	ldd	r24, Y+39	; 0x27
    2a8a:	98 a5       	ldd	r25, Y+40	; 0x28
    2a8c:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    2a90:	18 16       	cp	r1, r24
    2a92:	ac f4       	brge	.+42     	; 0x2abe <lcdPortWriteAndEnable+0x1f0>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2a94:	69 a5       	ldd	r22, Y+41	; 0x29
    2a96:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a98:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a9c:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	9d af       	std	Y+61, r25	; 0x3d
    2aa6:	8c af       	std	Y+60, r24	; 0x3c
    2aa8:	8c ad       	ldd	r24, Y+60	; 0x3c
    2aaa:	9d ad       	ldd	r25, Y+61	; 0x3d
    2aac:	9f af       	std	Y+63, r25	; 0x3f
    2aae:	8e af       	std	Y+62, r24	; 0x3e
    2ab0:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ab2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <lcdPortWriteAndEnable+0x1e6>
    2ab8:	9f af       	std	Y+63, r25	; 0x3f
    2aba:	8e af       	std	Y+62, r24	; 0x3e
    2abc:	1c c0       	rjmp	.+56     	; 0x2af6 <lcdPortWriteAndEnable+0x228>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2abe:	6d a1       	ldd	r22, Y+37	; 0x25
    2ac0:	7e a1       	ldd	r23, Y+38	; 0x26
    2ac2:	8f a1       	ldd	r24, Y+39	; 0x27
    2ac4:	98 a5       	ldd	r25, Y+40	; 0x28
    2ac6:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	8d a7       	std	Y+45, r24	; 0x2d
    2ad0:	2d a5       	ldd	r18, Y+45	; 0x2d
    2ad2:	ce 01       	movw	r24, r28
    2ad4:	80 5c       	subi	r24, 0xC0	; 192
    2ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad8:	fc 01       	movw	r30, r24
    2ada:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2adc:	ce 01       	movw	r24, r28
    2ade:	80 5c       	subi	r24, 0xC0	; 192
    2ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	80 81       	ld	r24, Z
    2ae6:	28 2f       	mov	r18, r24
    2ae8:	2a 95       	dec	r18
    2aea:	f1 f7       	brne	.-4      	; 0x2ae8 <lcdPortWriteAndEnable+0x21a>
    2aec:	ce 01       	movw	r24, r28
    2aee:	80 5c       	subi	r24, 0xC0	; 192
    2af0:	9f 4f       	sbci	r25, 0xFF	; 255
    2af2:	fc 01       	movw	r30, r24
    2af4:	20 83       	st	Z, r18
    _delay_us(70);        // enable pulse must be >450ns (doesn't work if this value is less than 70)

    lcdPortWrite(data & ~En);    // En low
    2af6:	ce 01       	movw	r24, r28
    2af8:	8f 5b       	subi	r24, 0xBF	; 191
    2afa:	9f 4f       	sbci	r25, 0xFF	; 255
    2afc:	fc 01       	movw	r30, r24
    2afe:	80 81       	ld	r24, Z
    2b00:	8b 7f       	andi	r24, 0xFB	; 251
    2b02:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <lcdPortWrite>
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	a0 e8       	ldi	r26, 0x80	; 128
    2b0c:	bf e3       	ldi	r27, 0x3F	; 63
    2b0e:	8d 83       	std	Y+5, r24	; 0x05
    2b10:	9e 83       	std	Y+6, r25	; 0x06
    2b12:	af 83       	std	Y+7, r26	; 0x07
    2b14:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    2b16:	2a ef       	ldi	r18, 0xFA	; 250
    2b18:	3d ee       	ldi	r19, 0xED	; 237
    2b1a:	4b e6       	ldi	r20, 0x6B	; 107
    2b1c:	50 e4       	ldi	r21, 0x40	; 64
    2b1e:	6d 81       	ldd	r22, Y+5	; 0x05
    2b20:	7e 81       	ldd	r23, Y+6	; 0x06
    2b22:	8f 81       	ldd	r24, Y+7	; 0x07
    2b24:	98 85       	ldd	r25, Y+8	; 0x08
    2b26:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	89 87       	std	Y+9, r24	; 0x09
    2b30:	9a 87       	std	Y+10, r25	; 0x0a
    2b32:	ab 87       	std	Y+11, r26	; 0x0b
    2b34:	bc 87       	std	Y+12, r27	; 0x0c
	__tmp2 = ((F_CPU) / 4e6) * __us;
    2b36:	2c e7       	ldi	r18, 0x7C	; 124
    2b38:	32 ef       	ldi	r19, 0xF2	; 242
    2b3a:	40 e3       	ldi	r20, 0x30	; 48
    2b3c:	50 e4       	ldi	r21, 0x40	; 64
    2b3e:	6d 81       	ldd	r22, Y+5	; 0x05
    2b40:	7e 81       	ldd	r23, Y+6	; 0x06
    2b42:	8f 81       	ldd	r24, Y+7	; 0x07
    2b44:	98 85       	ldd	r25, Y+8	; 0x08
    2b46:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	8d 87       	std	Y+13, r24	; 0x0d
    2b50:	9e 87       	std	Y+14, r25	; 0x0e
    2b52:	af 87       	std	Y+15, r26	; 0x0f
    2b54:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	40 e8       	ldi	r20, 0x80	; 128
    2b5c:	5f e3       	ldi	r21, 0x3F	; 63
    2b5e:	69 85       	ldd	r22, Y+9	; 0x09
    2b60:	7a 85       	ldd	r23, Y+10	; 0x0a
    2b62:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b64:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b66:	0e 94 18 2c 	call	0x5830	; 0x5830 <__cmpsf2>
    2b6a:	88 23       	and	r24, r24
    2b6c:	1c f4       	brge	.+6      	; 0x2b74 <lcdPortWriteAndEnable+0x2a6>
		__ticks = 1;
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	89 8b       	std	Y+17, r24	; 0x11
    2b72:	b2 c0       	rjmp	.+356    	; 0x2cd8 <lcdPortWriteAndEnable+0x40a>
	else if (__tmp2 > 65535)
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	3f ef       	ldi	r19, 0xFF	; 255
    2b78:	4f e7       	ldi	r20, 0x7F	; 127
    2b7a:	57 e4       	ldi	r21, 0x47	; 71
    2b7c:	6d 85       	ldd	r22, Y+13	; 0x0d
    2b7e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2b80:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b82:	98 89       	ldd	r25, Y+16	; 0x10
    2b84:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    2b88:	18 16       	cp	r1, r24
    2b8a:	0c f0       	brlt	.+2      	; 0x2b8e <lcdPortWriteAndEnable+0x2c0>
    2b8c:	7b c0       	rjmp	.+246    	; 0x2c84 <lcdPortWriteAndEnable+0x3b6>
	{
		_delay_ms(__us / 1000.0);
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	4a e7       	ldi	r20, 0x7A	; 122
    2b94:	54 e4       	ldi	r21, 0x44	; 68
    2b96:	6d 81       	ldd	r22, Y+5	; 0x05
    2b98:	7e 81       	ldd	r23, Y+6	; 0x06
    2b9a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b9c:	98 85       	ldd	r25, Y+8	; 0x08
    2b9e:	0e 94 1d 2c 	call	0x583a	; 0x583a <__divsf3>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	8a 8b       	std	Y+18, r24	; 0x12
    2ba8:	9b 8b       	std	Y+19, r25	; 0x13
    2baa:	ac 8b       	std	Y+20, r26	; 0x14
    2bac:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2bae:	2d ec       	ldi	r18, 0xCD	; 205
    2bb0:	3c ec       	ldi	r19, 0xCC	; 204
    2bb2:	4c e2       	ldi	r20, 0x2C	; 44
    2bb4:	55 e4       	ldi	r21, 0x45	; 69
    2bb6:	6a 89       	ldd	r22, Y+18	; 0x12
    2bb8:	7b 89       	ldd	r23, Y+19	; 0x13
    2bba:	8c 89       	ldd	r24, Y+20	; 0x14
    2bbc:	9d 89       	ldd	r25, Y+21	; 0x15
    2bbe:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	8e 8b       	std	Y+22, r24	; 0x16
    2bc8:	9f 8b       	std	Y+23, r25	; 0x17
    2bca:	a8 8f       	std	Y+24, r26	; 0x18
    2bcc:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	40 e8       	ldi	r20, 0x80	; 128
    2bd4:	5f e3       	ldi	r21, 0x3F	; 63
    2bd6:	6e 89       	ldd	r22, Y+22	; 0x16
    2bd8:	7f 89       	ldd	r23, Y+23	; 0x17
    2bda:	88 8d       	ldd	r24, Y+24	; 0x18
    2bdc:	99 8d       	ldd	r25, Y+25	; 0x19
    2bde:	0e 94 18 2c 	call	0x5830	; 0x5830 <__cmpsf2>
    2be2:	88 23       	and	r24, r24
    2be4:	2c f4       	brge	.+10     	; 0x2bf0 <lcdPortWriteAndEnable+0x322>
		__ticks = 1;
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	9b 8f       	std	Y+27, r25	; 0x1b
    2bec:	8a 8f       	std	Y+26, r24	; 0x1a
    2bee:	3f c0       	rjmp	.+126    	; 0x2c6e <lcdPortWriteAndEnable+0x3a0>
	else if (__tmp > 65535)
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	3f ef       	ldi	r19, 0xFF	; 255
    2bf4:	4f e7       	ldi	r20, 0x7F	; 127
    2bf6:	57 e4       	ldi	r21, 0x47	; 71
    2bf8:	6e 89       	ldd	r22, Y+22	; 0x16
    2bfa:	7f 89       	ldd	r23, Y+23	; 0x17
    2bfc:	88 8d       	ldd	r24, Y+24	; 0x18
    2bfe:	99 8d       	ldd	r25, Y+25	; 0x19
    2c00:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    2c04:	18 16       	cp	r1, r24
    2c06:	4c f5       	brge	.+82     	; 0x2c5a <lcdPortWriteAndEnable+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	40 e2       	ldi	r20, 0x20	; 32
    2c0e:	51 e4       	ldi	r21, 0x41	; 65
    2c10:	6a 89       	ldd	r22, Y+18	; 0x12
    2c12:	7b 89       	ldd	r23, Y+19	; 0x13
    2c14:	8c 89       	ldd	r24, Y+20	; 0x14
    2c16:	9d 89       	ldd	r25, Y+21	; 0x15
    2c18:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__mulsf3>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	bc 01       	movw	r22, r24
    2c22:	cd 01       	movw	r24, r26
    2c24:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	9b 8f       	std	Y+27, r25	; 0x1b
    2c2e:	8a 8f       	std	Y+26, r24	; 0x1a
    2c30:	0f c0       	rjmp	.+30     	; 0x2c50 <lcdPortWriteAndEnable+0x382>
    2c32:	84 e1       	ldi	r24, 0x14	; 20
    2c34:	91 e0       	ldi	r25, 0x01	; 1
    2c36:	9d 8f       	std	Y+29, r25	; 0x1d
    2c38:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c3a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c3c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c3e:	01 97       	sbiw	r24, 0x01	; 1
    2c40:	f1 f7       	brne	.-4      	; 0x2c3e <lcdPortWriteAndEnable+0x370>
    2c42:	9d 8f       	std	Y+29, r25	; 0x1d
    2c44:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c46:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c48:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c4a:	01 97       	sbiw	r24, 0x01	; 1
    2c4c:	9b 8f       	std	Y+27, r25	; 0x1b
    2c4e:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c50:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c52:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c54:	89 2b       	or	r24, r25
    2c56:	69 f7       	brne	.-38     	; 0x2c32 <lcdPortWriteAndEnable+0x364>
    2c58:	3f c0       	rjmp	.+126    	; 0x2cd8 <lcdPortWriteAndEnable+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c5a:	6e 89       	ldd	r22, Y+22	; 0x16
    2c5c:	7f 89       	ldd	r23, Y+23	; 0x17
    2c5e:	88 8d       	ldd	r24, Y+24	; 0x18
    2c60:	99 8d       	ldd	r25, Y+25	; 0x19
    2c62:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	9b 8f       	std	Y+27, r25	; 0x1b
    2c6c:	8a 8f       	std	Y+26, r24	; 0x1a
    2c6e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c70:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c72:	9f 8f       	std	Y+31, r25	; 0x1f
    2c74:	8e 8f       	std	Y+30, r24	; 0x1e
    2c76:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c78:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c7a:	01 97       	sbiw	r24, 0x01	; 1
    2c7c:	f1 f7       	brne	.-4      	; 0x2c7a <lcdPortWriteAndEnable+0x3ac>
    2c7e:	9f 8f       	std	Y+31, r25	; 0x1f
    2c80:	8e 8f       	std	Y+30, r24	; 0x1e
    2c82:	2a c0       	rjmp	.+84     	; 0x2cd8 <lcdPortWriteAndEnable+0x40a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	4f e7       	ldi	r20, 0x7F	; 127
    2c8a:	53 e4       	ldi	r21, 0x43	; 67
    2c8c:	69 85       	ldd	r22, Y+9	; 0x09
    2c8e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2c90:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c92:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c94:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__gesf2>
    2c98:	18 16       	cp	r1, r24
    2c9a:	ac f4       	brge	.+42     	; 0x2cc6 <lcdPortWriteAndEnable+0x3f8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2c9c:	6d 85       	ldd	r22, Y+13	; 0x0d
    2c9e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2ca0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ca2:	98 89       	ldd	r25, Y+16	; 0x10
    2ca4:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	99 a3       	std	Y+33, r25	; 0x21
    2cae:	88 a3       	std	Y+32, r24	; 0x20
    2cb0:	88 a1       	ldd	r24, Y+32	; 0x20
    2cb2:	99 a1       	ldd	r25, Y+33	; 0x21
    2cb4:	9b a3       	std	Y+35, r25	; 0x23
    2cb6:	8a a3       	std	Y+34, r24	; 0x22
    2cb8:	8a a1       	ldd	r24, Y+34	; 0x22
    2cba:	9b a1       	ldd	r25, Y+35	; 0x23
    2cbc:	01 97       	sbiw	r24, 0x01	; 1
    2cbe:	f1 f7       	brne	.-4      	; 0x2cbc <lcdPortWriteAndEnable+0x3ee>
    2cc0:	9b a3       	std	Y+35, r25	; 0x23
    2cc2:	8a a3       	std	Y+34, r24	; 0x22
    _delay_us(1);        // commands need > 37us to settle
}
    2cc4:	0f c0       	rjmp	.+30     	; 0x2ce4 <lcdPortWriteAndEnable+0x416>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2cc6:	69 85       	ldd	r22, Y+9	; 0x09
    2cc8:	7a 85       	ldd	r23, Y+10	; 0x0a
    2cca:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ccc:	9c 85       	ldd	r25, Y+12	; 0x0c
    2cce:	0e 94 8f 2c 	call	0x591e	; 0x591e <__fixunssfsi>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	89 8b       	std	Y+17, r24	; 0x11
    2cd8:	89 89       	ldd	r24, Y+17	; 0x11
    2cda:	8c a3       	std	Y+36, r24	; 0x24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cdc:	8c a1       	ldd	r24, Y+36	; 0x24
    2cde:	8a 95       	dec	r24
    2ce0:	f1 f7       	brne	.-4      	; 0x2cde <lcdPortWriteAndEnable+0x410>
    2ce2:	8c a3       	std	Y+36, r24	; 0x24
    2ce4:	00 00       	nop
    2ce6:	cf 5b       	subi	r28, 0xBF	; 191
    2ce8:	df 4f       	sbci	r29, 0xFF	; 255
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	f8 94       	cli
    2cee:	de bf       	out	0x3e, r29	; 62
    2cf0:	0f be       	out	0x3f, r0	; 63
    2cf2:	cd bf       	out	0x3d, r28	; 61
    2cf4:	df 91       	pop	r29
    2cf6:	cf 91       	pop	r28
    2cf8:	08 95       	ret

00002cfa <lcdPortWrite>:
#ifndef ATB_PROTOTYPE
void lcdPortWrite(uint8_t data) {
    LCD_PORT = data | _backlightVal;
}
#else
void lcdPortWrite(uint8_t data) {
    2cfa:	cf 93       	push	r28
    2cfc:	df 93       	push	r29
    2cfe:	00 d0       	rcall	.+0      	; 0x2d00 <lcdPortWrite+0x6>
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	8a 83       	std	Y+2, r24	; 0x02
        uint8_t newData = (data & 0xF0) >> 1;
    2d06:	8a 81       	ldd	r24, Y+2	; 0x02
    2d08:	88 2f       	mov	r24, r24
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	80 7f       	andi	r24, 0xF0	; 240
    2d0e:	99 27       	eor	r25, r25
    2d10:	95 95       	asr	r25
    2d12:	87 95       	ror	r24
    2d14:	89 83       	std	Y+1, r24	; 0x01
        newData |= data &0x0F;
    2d16:	8a 81       	ldd	r24, Y+2	; 0x02
    2d18:	98 2f       	mov	r25, r24
    2d1a:	9f 70       	andi	r25, 0x0F	; 15
    2d1c:	89 81       	ldd	r24, Y+1	; 0x01
    2d1e:	89 2b       	or	r24, r25
    2d20:	89 83       	std	Y+1, r24	; 0x01
        LCD_PORT = newData | _backlightVal;
    2d22:	8b e3       	ldi	r24, 0x3B	; 59
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	30 91 38 01 	lds	r19, 0x0138	; 0x800138 <_backlightVal>
    2d2a:	29 81       	ldd	r18, Y+1	; 0x01
    2d2c:	23 2b       	or	r18, r19
    2d2e:	fc 01       	movw	r30, r24
    2d30:	20 83       	st	Z, r18
}
    2d32:	00 00       	nop
    2d34:	0f 90       	pop	r0
    2d36:	0f 90       	pop	r0
    2d38:	df 91       	pop	r29
    2d3a:	cf 91       	pop	r28
    2d3c:	08 95       	ret

00002d3e <main>:
#include "LiquidCrystal.h"
#include "version.h"
#include "Debug.h"


int main(void) {
    2d3e:	cf 93       	push	r28
    2d40:	df 93       	push	r29
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
	dbPullUpAllPorts();
    2d46:	0e 94 64 06 	call	0xcc8	; 0xcc8 <dbPullUpAllPorts>

	lcdInit(LCD_COLS, LCD_ROWS, LCD_5x8DOTS);
    2d4a:	40 e0       	ldi	r20, 0x00	; 0
    2d4c:	62 e0       	ldi	r22, 0x02	; 2
    2d4e:	80 e1       	ldi	r24, 0x10	; 16
    2d50:	0e 94 49 0a 	call	0x1492	; 0x1492 <lcdInit>
	lcdBegin();
    2d54:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <lcdBegin>
	// Enable LCD back light
	lcdBacklight();
    2d58:	0e 94 a8 12 	call	0x2550	; 0x2550 <lcdBacklight>
	// Set cursor the the left top corner
	lcdSetCursor(0, 0);
    2d5c:	60 e0       	ldi	r22, 0x00	; 0
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
    2d60:	0e 94 12 13 	call	0x2624	; 0x2624 <lcdSetCursor>
	// and write application name and version
	lcdPrint(APP_NAME " " APP_VERSION);
    2d64:	8a ef       	ldi	r24, 0xFA	; 250
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	0e 94 b2 13 	call	0x2764	; 0x2764 <lcdPrint>
	while (true) {
		continue;
	}
    2d6c:	ff cf       	rjmp	.-2      	; 0x2d6c <main+0x2e>

00002d6e <tscSetOutputFrequencyScaling>:
void tscSetOutputFrequencyScaling(TscOutputFrequencyScaling frequencyScaling);
void tscSetPhotodiodeType(TscPhotodiodeType photodiodeType);
void tscCountCallback(void *userData);
void tscTimerCallback(void *userData);

void tscSetOutputFrequencyScaling(TscOutputFrequencyScaling frequencyScaling) {
    2d6e:	cf 93       	push	r28
    2d70:	df 93       	push	r29
    2d72:	1f 92       	push	r1
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
    2d78:	89 83       	std	Y+1, r24	; 0x01
	switch (frequencyScaling) {
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	88 2f       	mov	r24, r24
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	81 30       	cpi	r24, 0x01	; 1
    2d82:	91 05       	cpc	r25, r1
    2d84:	f9 f0       	breq	.+62     	; 0x2dc4 <tscSetOutputFrequencyScaling+0x56>
    2d86:	82 30       	cpi	r24, 0x02	; 2
    2d88:	91 05       	cpc	r25, r1
    2d8a:	1c f4       	brge	.+6      	; 0x2d92 <tscSetOutputFrequencyScaling+0x24>
    2d8c:	89 2b       	or	r24, r25
    2d8e:	39 f0       	breq	.+14     	; 0x2d9e <tscSetOutputFrequencyScaling+0x30>
			TSC_PORT |= _BV(TSC_PIN_S0);
			TSC_PORT |= _BV(TSC_PIN_S1);
			break;
		}
	}
}
    2d90:	52 c0       	rjmp	.+164    	; 0x2e36 <tscSetOutputFrequencyScaling+0xc8>
void tscSetPhotodiodeType(TscPhotodiodeType photodiodeType);
void tscCountCallback(void *userData);
void tscTimerCallback(void *userData);

void tscSetOutputFrequencyScaling(TscOutputFrequencyScaling frequencyScaling) {
	switch (frequencyScaling) {
    2d92:	82 30       	cpi	r24, 0x02	; 2
    2d94:	91 05       	cpc	r25, r1
    2d96:	49 f1       	breq	.+82     	; 0x2dea <tscSetOutputFrequencyScaling+0x7c>
    2d98:	03 97       	sbiw	r24, 0x03	; 3
    2d9a:	d1 f1       	breq	.+116    	; 0x2e10 <tscSetOutputFrequencyScaling+0xa2>
			TSC_PORT |= _BV(TSC_PIN_S0);
			TSC_PORT |= _BV(TSC_PIN_S1);
			break;
		}
	}
}
    2d9c:	4c c0       	rjmp	.+152    	; 0x2e36 <tscSetOutputFrequencyScaling+0xc8>
void tscTimerCallback(void *userData);

void tscSetOutputFrequencyScaling(TscOutputFrequencyScaling frequencyScaling) {
	switch (frequencyScaling) {
		case TSC_POWER_DOWN : {
			TSC_PORT &= ~_BV(TSC_PIN_S0);
    2d9e:	82 e3       	ldi	r24, 0x32	; 50
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	22 e3       	ldi	r18, 0x32	; 50
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	f9 01       	movw	r30, r18
    2da8:	20 81       	ld	r18, Z
    2daa:	2f 7e       	andi	r18, 0xEF	; 239
    2dac:	fc 01       	movw	r30, r24
    2dae:	20 83       	st	Z, r18
			TSC_PORT &= ~_BV(TSC_PIN_S1);
    2db0:	82 e3       	ldi	r24, 0x32	; 50
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	22 e3       	ldi	r18, 0x32	; 50
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	f9 01       	movw	r30, r18
    2dba:	20 81       	ld	r18, Z
    2dbc:	2f 7d       	andi	r18, 0xDF	; 223
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	20 83       	st	Z, r18
			break;
    2dc2:	39 c0       	rjmp	.+114    	; 0x2e36 <tscSetOutputFrequencyScaling+0xc8>
		}
		case TSC_PERCENT_2 : {
			TSC_PORT &= ~_BV(TSC_PIN_S0);
    2dc4:	82 e3       	ldi	r24, 0x32	; 50
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	22 e3       	ldi	r18, 0x32	; 50
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	f9 01       	movw	r30, r18
    2dce:	20 81       	ld	r18, Z
    2dd0:	2f 7e       	andi	r18, 0xEF	; 239
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	20 83       	st	Z, r18
			TSC_PORT |= _BV(TSC_PIN_S1);
    2dd6:	82 e3       	ldi	r24, 0x32	; 50
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	22 e3       	ldi	r18, 0x32	; 50
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	f9 01       	movw	r30, r18
    2de0:	20 81       	ld	r18, Z
    2de2:	20 62       	ori	r18, 0x20	; 32
    2de4:	fc 01       	movw	r30, r24
    2de6:	20 83       	st	Z, r18
			break;
    2de8:	26 c0       	rjmp	.+76     	; 0x2e36 <tscSetOutputFrequencyScaling+0xc8>
		}
		case TSC_PERCENT_20 : {
			TSC_PORT |= _BV(TSC_PIN_S0);
    2dea:	82 e3       	ldi	r24, 0x32	; 50
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	22 e3       	ldi	r18, 0x32	; 50
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	f9 01       	movw	r30, r18
    2df4:	20 81       	ld	r18, Z
    2df6:	20 61       	ori	r18, 0x10	; 16
    2df8:	fc 01       	movw	r30, r24
    2dfa:	20 83       	st	Z, r18
			TSC_PORT &= ~_BV(TSC_PIN_S1);
    2dfc:	82 e3       	ldi	r24, 0x32	; 50
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	22 e3       	ldi	r18, 0x32	; 50
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	f9 01       	movw	r30, r18
    2e06:	20 81       	ld	r18, Z
    2e08:	2f 7d       	andi	r18, 0xDF	; 223
    2e0a:	fc 01       	movw	r30, r24
    2e0c:	20 83       	st	Z, r18
			break;
    2e0e:	13 c0       	rjmp	.+38     	; 0x2e36 <tscSetOutputFrequencyScaling+0xc8>
		}
		case TSC_PERCENT_100 : {
			TSC_PORT |= _BV(TSC_PIN_S0);
    2e10:	82 e3       	ldi	r24, 0x32	; 50
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	22 e3       	ldi	r18, 0x32	; 50
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	f9 01       	movw	r30, r18
    2e1a:	20 81       	ld	r18, Z
    2e1c:	20 61       	ori	r18, 0x10	; 16
    2e1e:	fc 01       	movw	r30, r24
    2e20:	20 83       	st	Z, r18
			TSC_PORT |= _BV(TSC_PIN_S1);
    2e22:	82 e3       	ldi	r24, 0x32	; 50
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	22 e3       	ldi	r18, 0x32	; 50
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	f9 01       	movw	r30, r18
    2e2c:	20 81       	ld	r18, Z
    2e2e:	20 62       	ori	r18, 0x20	; 32
    2e30:	fc 01       	movw	r30, r24
    2e32:	20 83       	st	Z, r18
			break;
    2e34:	00 00       	nop
		}
	}
}
    2e36:	00 00       	nop
    2e38:	0f 90       	pop	r0
    2e3a:	df 91       	pop	r29
    2e3c:	cf 91       	pop	r28
    2e3e:	08 95       	ret

00002e40 <tscSetPhotodiodeType>:

void tscSetPhotodiodeType(TscPhotodiodeType photodiodeType) {
    2e40:	cf 93       	push	r28
    2e42:	df 93       	push	r29
    2e44:	1f 92       	push	r1
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
    2e4a:	89 83       	std	Y+1, r24	; 0x01
	switch (photodiodeType) {
    2e4c:	89 81       	ldd	r24, Y+1	; 0x01
    2e4e:	88 2f       	mov	r24, r24
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	82 30       	cpi	r24, 0x02	; 2
    2e54:	91 05       	cpc	r25, r1
    2e56:	91 f1       	breq	.+100    	; 0x2ebc <tscSetPhotodiodeType+0x7c>
    2e58:	83 30       	cpi	r24, 0x03	; 3
    2e5a:	91 05       	cpc	r25, r1
    2e5c:	1c f4       	brge	.+6      	; 0x2e64 <tscSetPhotodiodeType+0x24>
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	d1 f0       	breq	.+52     	; 0x2e96 <tscSetPhotodiodeType+0x56>
		}
		default : {
			// intentionally
		}
	}
}
    2e62:	52 c0       	rjmp	.+164    	; 0x2f08 <tscSetPhotodiodeType+0xc8>
		}
	}
}

void tscSetPhotodiodeType(TscPhotodiodeType photodiodeType) {
	switch (photodiodeType) {
    2e64:	83 30       	cpi	r24, 0x03	; 3
    2e66:	91 05       	cpc	r25, r1
    2e68:	e1 f1       	breq	.+120    	; 0x2ee2 <tscSetPhotodiodeType+0xa2>
    2e6a:	04 97       	sbiw	r24, 0x04	; 4
    2e6c:	09 f0       	breq	.+2      	; 0x2e70 <tscSetPhotodiodeType+0x30>
		}
		default : {
			// intentionally
		}
	}
}
    2e6e:	4c c0       	rjmp	.+152    	; 0x2f08 <tscSetPhotodiodeType+0xc8>
}

void tscSetPhotodiodeType(TscPhotodiodeType photodiodeType) {
	switch (photodiodeType) {
		case TSC_PDT_CLEAR : {
			TSC_PORT |= _BV(TSC_PIN_S2);
    2e70:	82 e3       	ldi	r24, 0x32	; 50
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	22 e3       	ldi	r18, 0x32	; 50
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	f9 01       	movw	r30, r18
    2e7a:	20 81       	ld	r18, Z
    2e7c:	20 64       	ori	r18, 0x40	; 64
    2e7e:	fc 01       	movw	r30, r24
    2e80:	20 83       	st	Z, r18
			TSC_PORT &= ~_BV(TSC_PIN_S3);
    2e82:	82 e3       	ldi	r24, 0x32	; 50
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	22 e3       	ldi	r18, 0x32	; 50
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	f9 01       	movw	r30, r18
    2e8c:	20 81       	ld	r18, Z
    2e8e:	2f 77       	andi	r18, 0x7F	; 127
    2e90:	fc 01       	movw	r30, r24
    2e92:	20 83       	st	Z, r18
			break;
    2e94:	39 c0       	rjmp	.+114    	; 0x2f08 <tscSetPhotodiodeType+0xc8>
		}
		case TSC_PDT_RED : {
			TSC_PORT &= ~_BV(TSC_PIN_S2);
    2e96:	82 e3       	ldi	r24, 0x32	; 50
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	22 e3       	ldi	r18, 0x32	; 50
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	f9 01       	movw	r30, r18
    2ea0:	20 81       	ld	r18, Z
    2ea2:	2f 7b       	andi	r18, 0xBF	; 191
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	20 83       	st	Z, r18
			TSC_PORT &= ~_BV(TSC_PIN_S3);
    2ea8:	82 e3       	ldi	r24, 0x32	; 50
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	22 e3       	ldi	r18, 0x32	; 50
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	f9 01       	movw	r30, r18
    2eb2:	20 81       	ld	r18, Z
    2eb4:	2f 77       	andi	r18, 0x7F	; 127
    2eb6:	fc 01       	movw	r30, r24
    2eb8:	20 83       	st	Z, r18
			break;
    2eba:	26 c0       	rjmp	.+76     	; 0x2f08 <tscSetPhotodiodeType+0xc8>
		}
		case TSC_PDT_GREEN : {
			TSC_PORT |= _BV(TSC_PIN_S2);
    2ebc:	82 e3       	ldi	r24, 0x32	; 50
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	22 e3       	ldi	r18, 0x32	; 50
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	f9 01       	movw	r30, r18
    2ec6:	20 81       	ld	r18, Z
    2ec8:	20 64       	ori	r18, 0x40	; 64
    2eca:	fc 01       	movw	r30, r24
    2ecc:	20 83       	st	Z, r18
			TSC_PORT |= _BV(TSC_PIN_S3);
    2ece:	82 e3       	ldi	r24, 0x32	; 50
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	22 e3       	ldi	r18, 0x32	; 50
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	f9 01       	movw	r30, r18
    2ed8:	20 81       	ld	r18, Z
    2eda:	20 68       	ori	r18, 0x80	; 128
    2edc:	fc 01       	movw	r30, r24
    2ede:	20 83       	st	Z, r18
			break;
    2ee0:	13 c0       	rjmp	.+38     	; 0x2f08 <tscSetPhotodiodeType+0xc8>
		}
		case TSC_PDT_BLUE : {
			TSC_PORT &= ~_BV(TSC_PIN_S2);
    2ee2:	82 e3       	ldi	r24, 0x32	; 50
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	22 e3       	ldi	r18, 0x32	; 50
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	f9 01       	movw	r30, r18
    2eec:	20 81       	ld	r18, Z
    2eee:	2f 7b       	andi	r18, 0xBF	; 191
    2ef0:	fc 01       	movw	r30, r24
    2ef2:	20 83       	st	Z, r18
			TSC_PORT |= _BV(TSC_PIN_S3);
    2ef4:	82 e3       	ldi	r24, 0x32	; 50
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	22 e3       	ldi	r18, 0x32	; 50
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	f9 01       	movw	r30, r18
    2efe:	20 81       	ld	r18, Z
    2f00:	20 68       	ori	r18, 0x80	; 128
    2f02:	fc 01       	movw	r30, r24
    2f04:	20 83       	st	Z, r18
			break;
    2f06:	00 00       	nop
		}
		default : {
			// intentionally
		}
	}
}
    2f08:	00 00       	nop
    2f0a:	0f 90       	pop	r0
    2f0c:	df 91       	pop	r29
    2f0e:	cf 91       	pop	r28
    2f10:	08 95       	ret

00002f12 <tscCountCallback>:

void tscCountCallback(void *userData) {
    2f12:	cf 93       	push	r28
    2f14:	df 93       	push	r29
    2f16:	00 d0       	rcall	.+0      	; 0x2f18 <tscCountCallback+0x6>
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
    2f1c:	9a 83       	std	Y+2, r25	; 0x02
    2f1e:	89 83       	std	Y+1, r24	; 0x01
	_tscCount++;
    2f20:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_tscCount>
    2f24:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <_tscCount+0x1>
    2f28:	01 96       	adiw	r24, 0x01	; 1
    2f2a:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <_tscCount+0x1>
    2f2e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <_tscCount>
}
    2f32:	00 00       	nop
    2f34:	0f 90       	pop	r0
    2f36:	0f 90       	pop	r0
    2f38:	df 91       	pop	r29
    2f3a:	cf 91       	pop	r28
    2f3c:	08 95       	ret

00002f3e <tscTimerCallback>:

void tscTimerCallback(void *userData) {
    2f3e:	cf 93       	push	r28
    2f40:	df 93       	push	r29
    2f42:	00 d0       	rcall	.+0      	; 0x2f44 <tscTimerCallback+0x6>
    2f44:	00 d0       	rcall	.+0      	; 0x2f46 <tscTimerCallback+0x8>
    2f46:	1f 92       	push	r1
    2f48:	cd b7       	in	r28, 0x3d	; 61
    2f4a:	de b7       	in	r29, 0x3e	; 62
    2f4c:	9d 83       	std	Y+5, r25	; 0x05
    2f4e:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t filter = (uint16_t)userData;
    2f50:	8c 81       	ldd	r24, Y+4	; 0x04
    2f52:	9d 81       	ldd	r25, Y+5	; 0x05
    2f54:	9a 83       	std	Y+2, r25	; 0x02
    2f56:	89 83       	std	Y+1, r24	; 0x01
	TscPhotodiodeType photodiodeType = (TscPhotodiodeType)filter;
    2f58:	89 81       	ldd	r24, Y+1	; 0x01
    2f5a:	8b 83       	std	Y+3, r24	; 0x03
	if (TSC_PDT_STOP == photodiodeType) {
    2f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5e:	88 23       	and	r24, r24
    2f60:	09 f4       	brne	.+2      	; 0x2f64 <tscTimerCallback+0x26>
    2f62:	57 c0       	rjmp	.+174    	; 0x3012 <tscTimerCallback+0xd4>
		return;
	}
	tscSetPhotodiodeType(photodiodeType);
    2f64:	8b 81       	ldd	r24, Y+3	; 0x03
    2f66:	0e 94 20 17 	call	0x2e40	; 0x2e40 <tscSetPhotodiodeType>
	switch(photodiodeType) {
    2f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6c:	88 2f       	mov	r24, r24
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	82 30       	cpi	r24, 0x02	; 2
    2f72:	91 05       	cpc	r25, r1
    2f74:	b1 f0       	breq	.+44     	; 0x2fa2 <tscTimerCallback+0x64>
    2f76:	83 30       	cpi	r24, 0x03	; 3
    2f78:	91 05       	cpc	r25, r1
    2f7a:	1c f4       	brge	.+6      	; 0x2f82 <tscTimerCallback+0x44>
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	39 f0       	breq	.+14     	; 0x2f8e <tscTimerCallback+0x50>
    2f80:	3b c0       	rjmp	.+118    	; 0x2ff8 <tscTimerCallback+0xba>
    2f82:	83 30       	cpi	r24, 0x03	; 3
    2f84:	91 05       	cpc	r25, r1
    2f86:	b1 f0       	breq	.+44     	; 0x2fb4 <tscTimerCallback+0x76>
    2f88:	04 97       	sbiw	r24, 0x04	; 4
    2f8a:	e9 f0       	breq	.+58     	; 0x2fc6 <tscTimerCallback+0x88>
    2f8c:	35 c0       	rjmp	.+106    	; 0x2ff8 <tscTimerCallback+0xba>
		case TSC_PDT_RED : {
			TSC_PORT |= _BV(TSC_PIN_LED);
    2f8e:	82 e3       	ldi	r24, 0x32	; 50
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	22 e3       	ldi	r18, 0x32	; 50
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	f9 01       	movw	r30, r18
    2f98:	20 81       	ld	r18, Z
    2f9a:	28 60       	ori	r18, 0x08	; 8
    2f9c:	fc 01       	movw	r30, r24
    2f9e:	20 83       	st	Z, r18
			break;
    2fa0:	2b c0       	rjmp	.+86     	; 0x2ff8 <tscTimerCallback+0xba>
		}
		case TSC_PDT_GREEN : {
			_tscRGB.r = _tscCount;
    2fa2:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_tscCount>
    2fa6:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <_tscCount+0x1>
    2faa:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <_tscRGB+0x1>
    2fae:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <_tscRGB>
			break;
    2fb2:	22 c0       	rjmp	.+68     	; 0x2ff8 <tscTimerCallback+0xba>
		}
		case TSC_PDT_BLUE : {
			_tscRGB.g = _tscCount;
    2fb4:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_tscCount>
    2fb8:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <_tscCount+0x1>
    2fbc:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <_tscRGB+0x3>
    2fc0:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <_tscRGB+0x2>
			break;
    2fc4:	19 c0       	rjmp	.+50     	; 0x2ff8 <tscTimerCallback+0xba>
		}
		case TSC_PDT_CLEAR : {
			_tscRGB.b = _tscCount;
    2fc6:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_tscCount>
    2fca:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <_tscCount+0x1>
    2fce:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <_tscRGB+0x5>
    2fd2:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <_tscRGB+0x4>
			_tscMeasureReady = true;
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <_tscMeasureReady>
			TSC_PORT &= ~_BV(TSC_PIN_LED);
    2fdc:	82 e3       	ldi	r24, 0x32	; 50
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	22 e3       	ldi	r18, 0x32	; 50
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	f9 01       	movw	r30, r18
    2fe6:	20 81       	ld	r18, Z
    2fe8:	27 7f       	andi	r18, 0xF7	; 247
    2fea:	fc 01       	movw	r30, r24
    2fec:	20 83       	st	Z, r18
			timer1SetCallbackUserData(TSC_PDT_STOP);
    2fee:	80 e0       	ldi	r24, 0x00	; 0
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	0e 94 b6 2b 	call	0x576c	; 0x576c <timer1SetCallbackUserData>
			break;
    2ff6:	00 00       	nop
		}
		default : {
			// intentionally
		}
	}
	if (TSC_PDT_CLEAR != photodiodeType) {
    2ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffa:	84 30       	cpi	r24, 0x04	; 4
    2ffc:	29 f0       	breq	.+10     	; 0x3008 <tscTimerCallback+0xca>
		timer1SetCallbackUserData(TIMER1_USER_DATA(filter + 1));
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
    3000:	9a 81       	ldd	r25, Y+2	; 0x02
    3002:	01 96       	adiw	r24, 0x01	; 1
    3004:	0e 94 b6 2b 	call	0x576c	; 0x576c <timer1SetCallbackUserData>
	}
	_tscCount = 0;
    3008:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <_tscCount+0x1>
    300c:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <_tscCount>
    3010:	01 c0       	rjmp	.+2      	; 0x3014 <tscTimerCallback+0xd6>

void tscTimerCallback(void *userData) {
	uint16_t filter = (uint16_t)userData;
	TscPhotodiodeType photodiodeType = (TscPhotodiodeType)filter;
	if (TSC_PDT_STOP == photodiodeType) {
		return;
    3012:	00 00       	nop
	}
	if (TSC_PDT_CLEAR != photodiodeType) {
		timer1SetCallbackUserData(TIMER1_USER_DATA(filter + 1));
	}
	_tscCount = 0;
}
    3014:	0f 90       	pop	r0
    3016:	0f 90       	pop	r0
    3018:	0f 90       	pop	r0
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	df 91       	pop	r29
    3020:	cf 91       	pop	r28
    3022:	08 95       	ret

00003024 <tscLoop>:

void tscLoop(void) {
    3024:	cf 93       	push	r28
    3026:	df 93       	push	r29
    3028:	cd b7       	in	r28, 0x3d	; 61
    302a:	de b7       	in	r29, 0x3e	; 62
	if (NULL != _tscCallback && true == _tscMeasureReady) {
    302c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <_tscCallback>
    3030:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <_tscCallback+0x1>
    3034:	89 2b       	or	r24, r25
    3036:	b9 f0       	breq	.+46     	; 0x3066 <tscLoop+0x42>
    3038:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <_tscMeasureReady>
    303c:	88 23       	and	r24, r24
    303e:	99 f0       	breq	.+38     	; 0x3066 <tscLoop+0x42>
		_tscMeasureReady = false;
    3040:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <_tscMeasureReady>
		_tscCallback(_tscCallbackUserData);
    3044:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <_tscCallback>
    3048:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <_tscCallback+0x1>
    304c:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <_tscCallbackUserData>
    3050:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <_tscCallbackUserData+0x1>
    3054:	f9 01       	movw	r30, r18
    3056:	09 95       	icall
		timer1Stop();
    3058:	0e 94 8a 28 	call	0x5114	; 0x5114 <timer1Stop>
		timer1Restart();
    305c:	0e 94 9b 28 	call	0x5136	; 0x5136 <timer1Restart>
		tscSetOutputFrequencyScaling(TSC_POWER_DOWN);
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <tscSetOutputFrequencyScaling>
	}
}
    3066:	00 00       	nop
    3068:	df 91       	pop	r29
    306a:	cf 91       	pop	r28
    306c:	08 95       	ret

0000306e <tscInit>:

void tscInit(void) {
    306e:	0f 93       	push	r16
    3070:	1f 93       	push	r17
    3072:	cf 93       	push	r28
    3074:	df 93       	push	r29
    3076:	cd b7       	in	r28, 0x3d	; 61
    3078:	de b7       	in	r29, 0x3e	; 62
	// Pins S0 to S4 as outputs
	TSC_DDR |= _BV(TSC_PIN_S0) | _BV(TSC_PIN_S1) | _BV(TSC_PIN_S2) | _BV(TSC_PIN_S3);
    307a:	81 e3       	ldi	r24, 0x31	; 49
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	21 e3       	ldi	r18, 0x31	; 49
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	f9 01       	movw	r30, r18
    3084:	20 81       	ld	r18, Z
    3086:	20 6f       	ori	r18, 0xF0	; 240
    3088:	fc 01       	movw	r30, r24
    308a:	20 83       	st	Z, r18
	// Led pin as output
	TSC_DDR |= _BV(TSC_PIN_LED);
    308c:	81 e3       	ldi	r24, 0x31	; 49
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	21 e3       	ldi	r18, 0x31	; 49
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	f9 01       	movw	r30, r18
    3096:	20 81       	ld	r18, Z
    3098:	28 60       	ori	r18, 0x08	; 8
    309a:	fc 01       	movw	r30, r24
    309c:	20 83       	st	Z, r18
	// Led pin off
	TSC_PORT &= ~_BV(TSC_PIN_LED);
    309e:	82 e3       	ldi	r24, 0x32	; 50
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	22 e3       	ldi	r18, 0x32	; 50
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	f9 01       	movw	r30, r18
    30a8:	20 81       	ld	r18, Z
    30aa:	27 7f       	andi	r18, 0xF7	; 247
    30ac:	fc 01       	movw	r30, r24
    30ae:	20 83       	st	Z, r18

	// Sensor out pin as uC input
	TSC_DDR &= ~_BV(TSC_PIN_OUT);
    30b0:	81 e3       	ldi	r24, 0x31	; 49
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	21 e3       	ldi	r18, 0x31	; 49
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	f9 01       	movw	r30, r18
    30ba:	20 81       	ld	r18, Z
    30bc:	2b 7f       	andi	r18, 0xFB	; 251
    30be:	fc 01       	movw	r30, r24
    30c0:	20 83       	st	Z, r18
	// No pull-up for Sensor out pin
	TSC_PORT &= ~_BV(TSC_PIN_OUT);
    30c2:	82 e3       	ldi	r24, 0x32	; 50
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	22 e3       	ldi	r18, 0x32	; 50
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	f9 01       	movw	r30, r18
    30cc:	20 81       	ld	r18, Z
    30ce:	2b 7f       	andi	r18, 0xFB	; 251
    30d0:	fc 01       	movw	r30, r24
    30d2:	20 83       	st	Z, r18

	timer1Init(SINGLE_MEASURE_TIME);
    30d4:	60 e4       	ldi	r22, 0x40	; 64
    30d6:	7d e0       	ldi	r23, 0x0D	; 13
    30d8:	83 e0       	ldi	r24, 0x03	; 3
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <timer1Init>
	extIntRegisterCallback(EXT_INT_0, EXT_INT_RISING_EDGE, false, tscCountCallback, NULL);
    30e0:	00 e0       	ldi	r16, 0x00	; 0
    30e2:	10 e0       	ldi	r17, 0x00	; 0
    30e4:	29 e8       	ldi	r18, 0x89	; 137
    30e6:	37 e1       	ldi	r19, 0x17	; 23
    30e8:	40 e0       	ldi	r20, 0x00	; 0
    30ea:	63 e0       	ldi	r22, 0x03	; 3
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	0e 94 b2 08 	call	0x1164	; 0x1164 <extIntRegisterCallback>
	timer1RegisterCallback(tscTimerCallback, TIMER1_USER_DATA(TSC_PDT_STOP));
    30f2:	60 e0       	ldi	r22, 0x00	; 0
    30f4:	70 e0       	ldi	r23, 0x00	; 0
    30f6:	8f e9       	ldi	r24, 0x9F	; 159
    30f8:	97 e1       	ldi	r25, 0x17	; 23
    30fa:	0e 94 98 2b 	call	0x5730	; 0x5730 <timer1RegisterCallback>
	tscSetOutputFrequencyScaling(TSC_POWER_DOWN);
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <tscSetOutputFrequencyScaling>
}
    3104:	00 00       	nop
    3106:	df 91       	pop	r29
    3108:	cf 91       	pop	r28
    310a:	1f 91       	pop	r17
    310c:	0f 91       	pop	r16
    310e:	08 95       	ret

00003110 <tscStartMeasure>:

void tscStartMeasure(void) {
    3110:	cf 93       	push	r28
    3112:	df 93       	push	r29
    3114:	cd b7       	in	r28, 0x3d	; 61
    3116:	de b7       	in	r29, 0x3e	; 62
	timer1SetCallbackUserData(TIMER1_USER_DATA(TSC_PDT_RED));
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	0e 94 b6 2b 	call	0x576c	; 0x576c <timer1SetCallbackUserData>
	tscSetOutputFrequencyScaling(TSC_DEFULT_FREQUENCY_SCALING);
    3120:	82 e0       	ldi	r24, 0x02	; 2
    3122:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <tscSetOutputFrequencyScaling>
	timer1EnableInterrupt();
    3126:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <timer1EnableInterrupt>
	timer1Restart();
    312a:	0e 94 9b 28 	call	0x5136	; 0x5136 <timer1Restart>
	timer1Start();
    312e:	0e 94 77 28 	call	0x50ee	; 0x50ee <timer1Start>
	_tscCount  = 0;
    3132:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <_tscCount+0x1>
    3136:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <_tscCount>
}
    313a:	00 00       	nop
    313c:	df 91       	pop	r29
    313e:	cf 91       	pop	r28
    3140:	08 95       	ret

00003142 <tscGetColor>:

RgbColor16_t tscGetColor(void) {
    3142:	af 92       	push	r10
    3144:	bf 92       	push	r11
    3146:	cf 92       	push	r12
    3148:	df 92       	push	r13
    314a:	ef 92       	push	r14
    314c:	ff 92       	push	r15
    314e:	0f 93       	push	r16
    3150:	1f 93       	push	r17
    3152:	cf 93       	push	r28
    3154:	df 93       	push	r29
    3156:	00 d0       	rcall	.+0      	; 0x3158 <tscGetColor+0x16>
    3158:	00 d0       	rcall	.+0      	; 0x315a <tscGetColor+0x18>
    315a:	00 d0       	rcall	.+0      	; 0x315c <tscGetColor+0x1a>
    315c:	cd b7       	in	r28, 0x3d	; 61
    315e:	de b7       	in	r29, 0x3e	; 62
	return _tscRGB;
    3160:	16 e0       	ldi	r17, 0x06	; 6
    3162:	ea e3       	ldi	r30, 0x3A	; 58
    3164:	f1 e0       	ldi	r31, 0x01	; 1
    3166:	de 01       	movw	r26, r28
    3168:	11 96       	adiw	r26, 0x01	; 1
    316a:	01 90       	ld	r0, Z+
    316c:	0d 92       	st	X+, r0
    316e:	1a 95       	dec	r17
    3170:	e1 f7       	brne	.-8      	; 0x316a <tscGetColor+0x28>
    3172:	00 e0       	ldi	r16, 0x00	; 0
    3174:	09 81       	ldd	r16, Y+1	; 0x01
    3176:	10 e0       	ldi	r17, 0x00	; 0
    3178:	1a 81       	ldd	r17, Y+2	; 0x02
    317a:	b0 e0       	ldi	r27, 0x00	; 0
    317c:	bb 81       	ldd	r27, Y+3	; 0x03
    317e:	a0 e0       	ldi	r26, 0x00	; 0
    3180:	ac 81       	ldd	r26, Y+4	; 0x04
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	fd 81       	ldd	r31, Y+5	; 0x05
    3186:	e0 e0       	ldi	r30, 0x00	; 0
    3188:	ee 81       	ldd	r30, Y+6	; 0x06
    318a:	20 2f       	mov	r18, r16
    318c:	31 2f       	mov	r19, r17
    318e:	4b 2f       	mov	r20, r27
    3190:	5a 2f       	mov	r21, r26
    3192:	6f 2f       	mov	r22, r31
    3194:	7e 2f       	mov	r23, r30
    3196:	a2 2e       	mov	r10, r18
    3198:	b3 2e       	mov	r11, r19
    319a:	c4 2e       	mov	r12, r20
    319c:	d5 2e       	mov	r13, r21
    319e:	e6 2e       	mov	r14, r22
    31a0:	f7 2e       	mov	r15, r23
    31a2:	08 2f       	mov	r16, r24
    31a4:	19 2f       	mov	r17, r25
}
    31a6:	2a 2d       	mov	r18, r10
    31a8:	3b 2d       	mov	r19, r11
    31aa:	4c 2d       	mov	r20, r12
    31ac:	5d 2d       	mov	r21, r13
    31ae:	6e 2d       	mov	r22, r14
    31b0:	7f 2d       	mov	r23, r15
    31b2:	80 2f       	mov	r24, r16
    31b4:	91 2f       	mov	r25, r17
    31b6:	26 96       	adiw	r28, 0x06	; 6
    31b8:	0f b6       	in	r0, 0x3f	; 63
    31ba:	f8 94       	cli
    31bc:	de bf       	out	0x3e, r29	; 62
    31be:	0f be       	out	0x3f, r0	; 63
    31c0:	cd bf       	out	0x3d, r28	; 61
    31c2:	df 91       	pop	r29
    31c4:	cf 91       	pop	r28
    31c6:	1f 91       	pop	r17
    31c8:	0f 91       	pop	r16
    31ca:	ff 90       	pop	r15
    31cc:	ef 90       	pop	r14
    31ce:	df 90       	pop	r13
    31d0:	cf 90       	pop	r12
    31d2:	bf 90       	pop	r11
    31d4:	af 90       	pop	r10
    31d6:	08 95       	ret

000031d8 <tscRegisterCallbackMeasureFinished>:

void tscRegisterCallbackMeasureFinished(TscCallback *callback, void *userData) {
    31d8:	cf 93       	push	r28
    31da:	df 93       	push	r29
    31dc:	00 d0       	rcall	.+0      	; 0x31de <tscRegisterCallbackMeasureFinished+0x6>
    31de:	00 d0       	rcall	.+0      	; 0x31e0 <tscRegisterCallbackMeasureFinished+0x8>
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
    31e4:	9a 83       	std	Y+2, r25	; 0x02
    31e6:	89 83       	std	Y+1, r24	; 0x01
    31e8:	7c 83       	std	Y+4, r23	; 0x04
    31ea:	6b 83       	std	Y+3, r22	; 0x03
	_tscCallbackUserData = userData;
    31ec:	8b 81       	ldd	r24, Y+3	; 0x03
    31ee:	9c 81       	ldd	r25, Y+4	; 0x04
    31f0:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <_tscCallbackUserData+0x1>
    31f4:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <_tscCallbackUserData>
	_tscCallback = callback;
    31f8:	89 81       	ldd	r24, Y+1	; 0x01
    31fa:	9a 81       	ldd	r25, Y+2	; 0x02
    31fc:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <_tscCallback+0x1>
    3200:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <_tscCallback>
}
    3204:	00 00       	nop
    3206:	0f 90       	pop	r0
    3208:	0f 90       	pop	r0
    320a:	0f 90       	pop	r0
    320c:	0f 90       	pop	r0
    320e:	df 91       	pop	r29
    3210:	cf 91       	pop	r28
    3212:	08 95       	ret

00003214 <tscUnregisterCallbackMeasureFinished>:

void tscUnregisterCallbackMeasureFinished(void) {
    3214:	cf 93       	push	r28
    3216:	df 93       	push	r29
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62
	_tscCallbackUserData = NULL;
    321c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <_tscCallbackUserData+0x1>
    3220:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <_tscCallbackUserData>
	_tscCallback = NULL;
    3224:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <_tscCallback+0x1>
    3228:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <_tscCallback>
}
    322c:	00 00       	nop
    322e:	df 91       	pop	r29
    3230:	cf 91       	pop	r28
    3232:	08 95       	ret

00003234 <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    3234:	cf 93       	push	r28
    3236:	df 93       	push	r29
    3238:	cd b7       	in	r28, 0x3d	; 61
    323a:	de b7       	in	r29, 0x3e	; 62
    cli();
    323c:	f8 94       	cli
    return 1;
    323e:	81 e0       	ldi	r24, 0x01	; 1
}
    3240:	df 91       	pop	r29
    3242:	cf 91       	pop	r28
    3244:	08 95       	ret

00003246 <__iRestore>:
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    3246:	cf 93       	push	r28
    3248:	df 93       	push	r29
    324a:	00 d0       	rcall	.+0      	; 0x324c <__iRestore+0x6>
    324c:	cd b7       	in	r28, 0x3d	; 61
    324e:	de b7       	in	r29, 0x3e	; 62
    3250:	9a 83       	std	Y+2, r25	; 0x02
    3252:	89 83       	std	Y+1, r24	; 0x01
    SREG = *__s;
    3254:	8f e5       	ldi	r24, 0x5F	; 95
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	29 81       	ldd	r18, Y+1	; 0x01
    325a:	3a 81       	ldd	r19, Y+2	; 0x02
    325c:	f9 01       	movw	r30, r18
    325e:	20 81       	ld	r18, Z
    3260:	fc 01       	movw	r30, r24
    3262:	20 83       	st	Z, r18
    __asm__ volatile ("" ::: "memory");
}
    3264:	00 00       	nop
    3266:	0f 90       	pop	r0
    3268:	0f 90       	pop	r0
    326a:	df 91       	pop	r29
    326c:	cf 91       	pop	r28
    326e:	08 95       	ret

00003270 <rxStore>:
// Interrupt handler
void irqTx(void);
void irqRx(void);

// Internal RX/TX buffer operations
void rxStore(uint8_t c) {
    3270:	cf 93       	push	r28
    3272:	df 93       	push	r29
    3274:	1f 92       	push	r1
    3276:	cd b7       	in	r28, 0x3d	; 61
    3278:	de b7       	in	r29, 0x3e	; 62
    327a:	89 83       	std	Y+1, r24	; 0x01
    if (_rxTerminationChar == c) {
    327c:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
    3280:	89 81       	ldd	r24, Y+1	; 0x01
    3282:	98 17       	cp	r25, r24
    3284:	49 f4       	brne	.+18     	; 0x3298 <rxStore+0x28>
        _rxBufferLines++;
    3286:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <_rxBufferLines>
    328a:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <_rxBufferLines+0x1>
    328e:	01 96       	adiw	r24, 0x01	; 1
    3290:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <_rxBufferLines+0x1>
    3294:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <_rxBufferLines>
    }
    _rxBuffer[_rxBufferPutIndex] = c;
    3298:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <_rxBufferPutIndex>
    329c:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <_rxBufferPutIndex+0x1>
    32a0:	8b 5a       	subi	r24, 0xAB	; 171
    32a2:	9e 4f       	sbci	r25, 0xFE	; 254
    32a4:	29 81       	ldd	r18, Y+1	; 0x01
    32a6:	fc 01       	movw	r30, r24
    32a8:	20 83       	st	Z, r18
    _rxBufferPutIndex = (_rxBufferPutIndex + 1) % SERIAL_RX_BUFFER_SIZE;
    32aa:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <_rxBufferPutIndex>
    32ae:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <_rxBufferPutIndex+0x1>
    32b2:	01 96       	adiw	r24, 0x01	; 1
    32b4:	24 e1       	ldi	r18, 0x14	; 20
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	b9 01       	movw	r22, r18
    32ba:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <__divmodhi4>
    32be:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <_rxBufferPutIndex+0x1>
    32c2:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <_rxBufferPutIndex>
    _rxBufferLength++;
    32c6:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <_rxBufferLength>
    32ca:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <_rxBufferLength+0x1>
    32ce:	01 96       	adiw	r24, 0x01	; 1
    32d0:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <_rxBufferLength+0x1>
    32d4:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <_rxBufferLength>
}
    32d8:	00 00       	nop
    32da:	0f 90       	pop	r0
    32dc:	df 91       	pop	r29
    32de:	cf 91       	pop	r28
    32e0:	08 95       	ret

000032e2 <rxAvailable>:

int rxAvailable(void) {
    32e2:	cf 93       	push	r28
    32e4:	df 93       	push	r29
    32e6:	cd b7       	in	r28, 0x3d	; 61
    32e8:	de b7       	in	r29, 0x3e	; 62
    return _rxBufferLength;
    32ea:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <_rxBufferLength>
    32ee:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <_rxBufferLength+0x1>
}
    32f2:	df 91       	pop	r29
    32f4:	cf 91       	pop	r28
    32f6:	08 95       	ret

000032f8 <rxAvailableForWrite>:

int rxAvailableForWrite(void) {
    32f8:	cf 93       	push	r28
    32fa:	df 93       	push	r29
    32fc:	cd b7       	in	r28, 0x3d	; 61
    32fe:	de b7       	in	r29, 0x3e	; 62
    return SERIAL_RX_BUFFER_SIZE - _rxBufferLength;
    3300:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <_rxBufferLength>
    3304:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <_rxBufferLength+0x1>
    3308:	24 e1       	ldi	r18, 0x14	; 20
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	a9 01       	movw	r20, r18
    330e:	48 1b       	sub	r20, r24
    3310:	59 0b       	sbc	r21, r25
    3312:	ca 01       	movw	r24, r20
}
    3314:	df 91       	pop	r29
    3316:	cf 91       	pop	r28
    3318:	08 95       	ret

0000331a <rxPeek>:

int rxPeek(void) {
    331a:	cf 93       	push	r28
    331c:	df 93       	push	r29
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
    if (0 == _rxBufferLength) {
    3322:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <_rxBufferLength>
    3326:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <_rxBufferLength+0x1>
    332a:	89 2b       	or	r24, r25
    332c:	19 f4       	brne	.+6      	; 0x3334 <rxPeek+0x1a>
        return -1;
    332e:	8f ef       	ldi	r24, 0xFF	; 255
    3330:	9f ef       	ldi	r25, 0xFF	; 255
    3332:	0a c0       	rjmp	.+20     	; 0x3348 <rxPeek+0x2e>
    } else {
        return _rxBuffer[_rxBufferGetIndex];
    3334:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <_rxBufferGetIndex>
    3338:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <_rxBufferGetIndex+0x1>
    333c:	8b 5a       	subi	r24, 0xAB	; 171
    333e:	9e 4f       	sbci	r25, 0xFE	; 254
    3340:	fc 01       	movw	r30, r24
    3342:	80 81       	ld	r24, Z
    3344:	88 2f       	mov	r24, r24
    3346:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    3348:	df 91       	pop	r29
    334a:	cf 91       	pop	r28
    334c:	08 95       	ret

0000334e <rxRead>:

int rxRead(void) {
    334e:	cf 93       	push	r28
    3350:	df 93       	push	r29
    3352:	1f 92       	push	r1
    3354:	cd b7       	in	r28, 0x3d	; 61
    3356:	de b7       	in	r29, 0x3e	; 62
    if (0 == _rxBufferLength) {
    3358:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <_rxBufferLength>
    335c:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <_rxBufferLength+0x1>
    3360:	89 2b       	or	r24, r25
    3362:	19 f4       	brne	.+6      	; 0x336a <rxRead+0x1c>
        return -1;
    3364:	8f ef       	ldi	r24, 0xFF	; 255
    3366:	9f ef       	ldi	r25, 0xFF	; 255
    3368:	37 c0       	rjmp	.+110    	; 0x33d8 <rxRead+0x8a>
    } else {
        uint8_t c = _rxBuffer[_rxBufferGetIndex++];
    336a:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <_rxBufferGetIndex>
    336e:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <_rxBufferGetIndex+0x1>
    3372:	9c 01       	movw	r18, r24
    3374:	2f 5f       	subi	r18, 0xFF	; 255
    3376:	3f 4f       	sbci	r19, 0xFF	; 255
    3378:	30 93 6a 01 	sts	0x016A, r19	; 0x80016a <_rxBufferGetIndex+0x1>
    337c:	20 93 69 01 	sts	0x0169, r18	; 0x800169 <_rxBufferGetIndex>
    3380:	8b 5a       	subi	r24, 0xAB	; 171
    3382:	9e 4f       	sbci	r25, 0xFE	; 254
    3384:	fc 01       	movw	r30, r24
    3386:	80 81       	ld	r24, Z
    3388:	89 83       	std	Y+1, r24	; 0x01
        _rxBufferGetIndex %= SERIAL_RX_BUFFER_SIZE;
    338a:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <_rxBufferGetIndex>
    338e:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <_rxBufferGetIndex+0x1>
    3392:	24 e1       	ldi	r18, 0x14	; 20
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	b9 01       	movw	r22, r18
    3398:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <__divmodhi4>
    339c:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <_rxBufferGetIndex+0x1>
    33a0:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <_rxBufferGetIndex>
        _rxBufferLength--;
    33a4:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <_rxBufferLength>
    33a8:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <_rxBufferLength+0x1>
    33ac:	01 97       	sbiw	r24, 0x01	; 1
    33ae:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <_rxBufferLength+0x1>
    33b2:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <_rxBufferLength>
        if (_rxTerminationChar == c) {
    33b6:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
    33ba:	89 81       	ldd	r24, Y+1	; 0x01
    33bc:	98 17       	cp	r25, r24
    33be:	49 f4       	brne	.+18     	; 0x33d2 <rxRead+0x84>
            _rxBufferLines--;
    33c0:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <_rxBufferLines>
    33c4:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <_rxBufferLines+0x1>
    33c8:	01 97       	sbiw	r24, 0x01	; 1
    33ca:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <_rxBufferLines+0x1>
    33ce:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <_rxBufferLines>
        }
        return c;
    33d2:	89 81       	ldd	r24, Y+1	; 0x01
    33d4:	88 2f       	mov	r24, r24
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    33d8:	0f 90       	pop	r0
    33da:	df 91       	pop	r29
    33dc:	cf 91       	pop	r28
    33de:	08 95       	ret

000033e0 <rxFlush>:

void rxFlush(void) {
    33e0:	cf 93       	push	r28
    33e2:	df 93       	push	r29
    33e4:	cd b7       	in	r28, 0x3d	; 61
    33e6:	de b7       	in	r29, 0x3e	; 62
    _rxBufferLength = 0;
    33e8:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <_rxBufferLength+0x1>
    33ec:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <_rxBufferLength>
}
    33f0:	00 00       	nop
    33f2:	df 91       	pop	r29
    33f4:	cf 91       	pop	r28
    33f6:	08 95       	ret

000033f8 <txStore>:

void txStore(uint8_t c) {
    33f8:	cf 93       	push	r28
    33fa:	df 93       	push	r29
    33fc:	1f 92       	push	r1
    33fe:	cd b7       	in	r28, 0x3d	; 61
    3400:	de b7       	in	r29, 0x3e	; 62
    3402:	89 83       	std	Y+1, r24	; 0x01
    _txBuffer[_txBufferPutIndex] = c;
    3404:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <_txBufferPutIndex>
    3408:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <_txBufferPutIndex+0x1>
    340c:	8f 58       	subi	r24, 0x8F	; 143
    340e:	9e 4f       	sbci	r25, 0xFE	; 254
    3410:	29 81       	ldd	r18, Y+1	; 0x01
    3412:	fc 01       	movw	r30, r24
    3414:	20 83       	st	Z, r18
    _txBufferPutIndex = (_txBufferPutIndex + 1) % SERIAL_TX_BUFFER_SIZE;
    3416:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <_txBufferPutIndex>
    341a:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <_txBufferPutIndex+0x1>
    341e:	01 96       	adiw	r24, 0x01	; 1
    3420:	24 e1       	ldi	r18, 0x14	; 20
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	b9 01       	movw	r22, r18
    3426:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <__divmodhi4>
    342a:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <_txBufferPutIndex+0x1>
    342e:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <_txBufferPutIndex>
    _txBufferLength++;
    3432:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <_txBufferLength>
    3436:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <_txBufferLength+0x1>
    343a:	01 96       	adiw	r24, 0x01	; 1
    343c:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <_txBufferLength+0x1>
    3440:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <_txBufferLength>
}
    3444:	00 00       	nop
    3446:	0f 90       	pop	r0
    3448:	df 91       	pop	r29
    344a:	cf 91       	pop	r28
    344c:	08 95       	ret

0000344e <txAvailable>:

int txAvailable(void) {
    344e:	cf 93       	push	r28
    3450:	df 93       	push	r29
    3452:	cd b7       	in	r28, 0x3d	; 61
    3454:	de b7       	in	r29, 0x3e	; 62
    return _txBufferLength;
    3456:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <_txBufferLength>
    345a:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <_txBufferLength+0x1>
}
    345e:	df 91       	pop	r29
    3460:	cf 91       	pop	r28
    3462:	08 95       	ret

00003464 <txPeek>:

int txPeek(void) {
    3464:	cf 93       	push	r28
    3466:	df 93       	push	r29
    3468:	cd b7       	in	r28, 0x3d	; 61
    346a:	de b7       	in	r29, 0x3e	; 62
    if (0 == _txBufferLength) {
    346c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <_txBufferLength>
    3470:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <_txBufferLength+0x1>
    3474:	89 2b       	or	r24, r25
    3476:	19 f4       	brne	.+6      	; 0x347e <txPeek+0x1a>
        return -1;
    3478:	8f ef       	ldi	r24, 0xFF	; 255
    347a:	9f ef       	ldi	r25, 0xFF	; 255
    347c:	0a c0       	rjmp	.+20     	; 0x3492 <txPeek+0x2e>
    } else {
        return _txBuffer[_txBufferGetIndex];
    347e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <_txBufferGetIndex>
    3482:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <_txBufferGetIndex+0x1>
    3486:	8f 58       	subi	r24, 0x8F	; 143
    3488:	9e 4f       	sbci	r25, 0xFE	; 254
    348a:	fc 01       	movw	r30, r24
    348c:	80 81       	ld	r24, Z
    348e:	88 2f       	mov	r24, r24
    3490:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    3492:	df 91       	pop	r29
    3494:	cf 91       	pop	r28
    3496:	08 95       	ret

00003498 <txRead>:

int txRead(void) {
    3498:	cf 93       	push	r28
    349a:	df 93       	push	r29
    349c:	1f 92       	push	r1
    349e:	cd b7       	in	r28, 0x3d	; 61
    34a0:	de b7       	in	r29, 0x3e	; 62
    if (0 == _txBufferLength) {
    34a2:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <_txBufferLength>
    34a6:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <_txBufferLength+0x1>
    34aa:	89 2b       	or	r24, r25
    34ac:	19 f4       	brne	.+6      	; 0x34b4 <txRead+0x1c>
        return -1;
    34ae:	8f ef       	ldi	r24, 0xFF	; 255
    34b0:	9f ef       	ldi	r25, 0xFF	; 255
    34b2:	29 c0       	rjmp	.+82     	; 0x3506 <txRead+0x6e>
    } else {
        uint8_t c = _txBuffer[_txBufferGetIndex++];
    34b4:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <_txBufferGetIndex>
    34b8:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <_txBufferGetIndex+0x1>
    34bc:	9c 01       	movw	r18, r24
    34be:	2f 5f       	subi	r18, 0xFF	; 255
    34c0:	3f 4f       	sbci	r19, 0xFF	; 255
    34c2:	30 93 86 01 	sts	0x0186, r19	; 0x800186 <_txBufferGetIndex+0x1>
    34c6:	20 93 85 01 	sts	0x0185, r18	; 0x800185 <_txBufferGetIndex>
    34ca:	8f 58       	subi	r24, 0x8F	; 143
    34cc:	9e 4f       	sbci	r25, 0xFE	; 254
    34ce:	fc 01       	movw	r30, r24
    34d0:	80 81       	ld	r24, Z
    34d2:	89 83       	std	Y+1, r24	; 0x01
        _txBufferGetIndex %= SERIAL_TX_BUFFER_SIZE;
    34d4:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <_txBufferGetIndex>
    34d8:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <_txBufferGetIndex+0x1>
    34dc:	24 e1       	ldi	r18, 0x14	; 20
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	b9 01       	movw	r22, r18
    34e2:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <__divmodhi4>
    34e6:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <_txBufferGetIndex+0x1>
    34ea:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <_txBufferGetIndex>
        _txBufferLength--;
    34ee:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <_txBufferLength>
    34f2:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <_txBufferLength+0x1>
    34f6:	01 97       	sbiw	r24, 0x01	; 1
    34f8:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <_txBufferLength+0x1>
    34fc:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <_txBufferLength>
        return c;
    3500:	89 81       	ldd	r24, Y+1	; 0x01
    3502:	88 2f       	mov	r24, r24
    3504:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    3506:	0f 90       	pop	r0
    3508:	df 91       	pop	r29
    350a:	cf 91       	pop	r28
    350c:	08 95       	ret

0000350e <txFlush>:

void txFlush(void) {
    350e:	cf 93       	push	r28
    3510:	df 93       	push	r29
    3512:	cd b7       	in	r28, 0x3d	; 61
    3514:	de b7       	in	r29, 0x3e	; 62
    _txBufferLength = 0;
    3516:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <_txBufferLength+0x1>
    351a:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <_txBufferLength>
}
    351e:	00 00       	nop
    3520:	df 91       	pop	r29
    3522:	cf 91       	pop	r28
    3524:	08 95       	ret

00003526 <irqTx>:

// Interrupt handler
void irqTx(void) {
    3526:	cf 93       	push	r28
    3528:	df 93       	push	r29
    352a:	1f 92       	push	r1
    352c:	cd b7       	in	r28, 0x3d	; 61
    352e:	de b7       	in	r29, 0x3e	; 62
    dbToggle(7);
    3530:	87 e0       	ldi	r24, 0x07	; 7
    3532:	0e 94 9a 06 	call	0xd34	; 0xd34 <dbToggle>
    // If interrupts are enabled, there must be more data in the output
    // buffer. Send the next byte
    if (txAvailable() > 0) {
    3536:	0e 94 27 1a 	call	0x344e	; 0x344e <txAvailable>
    353a:	18 16       	cp	r1, r24
    353c:	19 06       	cpc	r1, r25
    353e:	54 f4       	brge	.+20     	; 0x3554 <irqTx+0x2e>
        unsigned char c = (unsigned char )txRead();
    3540:	0e 94 4c 1a 	call	0x3498	; 0x3498 <txRead>
    3544:	89 83       	std	Y+1, r24	; 0x01
        *_udr = c;
    3546:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <_udr>
    354a:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <_udr+0x1>
    354e:	29 81       	ldd	r18, Y+1	; 0x01
    3550:	fc 01       	movw	r30, r24
    3552:	20 83       	st	Z, r18

    // clear the TXC bit -- "can be cleared by writing a one to its bit
    // location". This makes sure flush() won't return until the bytes
    // actually got written. Other r/w bits are preserved, and zeros
    // written to the rest.
    *_ucsra = ((*_ucsra) & (_BV(U2X) | _BV(MPCM))) | _BV(TXC);
    3554:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <_ucsra>
    3558:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <_ucsra+0x1>
    355c:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <_ucsra>
    3560:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <_ucsra+0x1>
    3564:	f9 01       	movw	r30, r18
    3566:	20 81       	ld	r18, Z
    3568:	23 70       	andi	r18, 0x03	; 3
    356a:	20 64       	ori	r18, 0x40	; 64
    356c:	fc 01       	movw	r30, r24
    356e:	20 83       	st	Z, r18
    if (txAvailable() == 0) {
    3570:	0e 94 27 1a 	call	0x344e	; 0x344e <txAvailable>
    3574:	89 2b       	or	r24, r25
    3576:	49 f4       	brne	.+18     	; 0x358a <irqTx+0x64>
        // if buffer empty - disable interrupts
        UCSRB &= ~(1<<UDRIE);
    3578:	8a e2       	ldi	r24, 0x2A	; 42
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	2a e2       	ldi	r18, 0x2A	; 42
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	f9 01       	movw	r30, r18
    3582:	20 81       	ld	r18, Z
    3584:	2f 7d       	andi	r18, 0xDF	; 223
    3586:	fc 01       	movw	r30, r24
    3588:	20 83       	st	Z, r18
    }
}
    358a:	00 00       	nop
    358c:	0f 90       	pop	r0
    358e:	df 91       	pop	r29
    3590:	cf 91       	pop	r28
    3592:	08 95       	ret

00003594 <irqRx>:

void irqRx(void) {
    3594:	cf 93       	push	r28
    3596:	df 93       	push	r29
    3598:	1f 92       	push	r1
    359a:	cd b7       	in	r28, 0x3d	; 61
    359c:	de b7       	in	r29, 0x3e	; 62
    if (bit_is_clear(*_ucsra, UPE)) {
    359e:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <_ucsra>
    35a2:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <_ucsra+0x1>
    35a6:	fc 01       	movw	r30, r24
    35a8:	80 81       	ld	r24, Z
    35aa:	88 2f       	mov	r24, r24
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	84 70       	andi	r24, 0x04	; 4
    35b0:	99 27       	eor	r25, r25
    35b2:	89 2b       	or	r24, r25
    35b4:	99 f4       	brne	.+38     	; 0x35dc <irqRx+0x48>
        // No Parity error, read byte and store it in the buffer if there is room
        unsigned char c = *_udr;
    35b6:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <_udr>
    35ba:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <_udr+0x1>
    35be:	fc 01       	movw	r30, r24
    35c0:	80 81       	ld	r24, Z
    35c2:	89 83       	std	Y+1, r24	; 0x01
        // if we should be storing the received character into the location
        // just before the tail (meaning that the head would advance to the
        // current location of the tail), we're about to overflow the buffer
        // and so we don't write the character or advance the head.
        if (rxAvailableForWrite() > 0) {
    35c4:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <rxAvailableForWrite>
    35c8:	18 16       	cp	r1, r24
    35ca:	19 06       	cpc	r1, r25
    35cc:	24 f4       	brge	.+8      	; 0x35d6 <irqRx+0x42>
            rxStore(c);
    35ce:	89 81       	ldd	r24, Y+1	; 0x01
    35d0:	0e 94 38 19 	call	0x3270	; 0x3270 <rxStore>
            // Parity error, read byte but discard it
            // *_udr;
            _rxBufferOverflow = true;
        }
    }
}
    35d4:	03 c0       	rjmp	.+6      	; 0x35dc <irqRx+0x48>
        if (rxAvailableForWrite() > 0) {
            rxStore(c);
        } else {
            // Parity error, read byte but discard it
            // *_udr;
            _rxBufferOverflow = true;
    35d6:	81 e0       	ldi	r24, 0x01	; 1
    35d8:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <_rxBufferOverflow>
        }
    }
}
    35dc:	00 00       	nop
    35de:	0f 90       	pop	r0
    35e0:	df 91       	pop	r29
    35e2:	cf 91       	pop	r28
    35e4:	08 95       	ret

000035e6 <serSetTerminationCharacter>:

// Implementation
void serSetTerminationCharacter(unsigned char terminator) {
    35e6:	cf 93       	push	r28
    35e8:	df 93       	push	r29
    35ea:	1f 92       	push	r1
    35ec:	cd b7       	in	r28, 0x3d	; 61
    35ee:	de b7       	in	r29, 0x3e	; 62
    35f0:	89 83       	std	Y+1, r24	; 0x01
	_rxTerminationChar = terminator;
    35f2:	89 81       	ldd	r24, Y+1	; 0x01
    35f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
}
    35f8:	00 00       	nop
    35fa:	0f 90       	pop	r0
    35fc:	df 91       	pop	r29
    35fe:	cf 91       	pop	r28
    3600:	08 95       	ret

00003602 <serSetup>:

void serSetup(
volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
volatile uint8_t *ucsrc, volatile uint8_t *udr) {
    3602:	ef 92       	push	r14
    3604:	ff 92       	push	r15
    3606:	0f 93       	push	r16
    3608:	1f 93       	push	r17
    360a:	cf 93       	push	r28
    360c:	df 93       	push	r29
    360e:	cd b7       	in	r28, 0x3d	; 61
    3610:	de b7       	in	r29, 0x3e	; 62
    3612:	2c 97       	sbiw	r28, 0x0c	; 12
    3614:	0f b6       	in	r0, 0x3f	; 63
    3616:	f8 94       	cli
    3618:	de bf       	out	0x3e, r29	; 62
    361a:	0f be       	out	0x3f, r0	; 63
    361c:	cd bf       	out	0x3d, r28	; 61
    361e:	9a 83       	std	Y+2, r25	; 0x02
    3620:	89 83       	std	Y+1, r24	; 0x01
    3622:	7c 83       	std	Y+4, r23	; 0x04
    3624:	6b 83       	std	Y+3, r22	; 0x03
    3626:	5e 83       	std	Y+6, r21	; 0x06
    3628:	4d 83       	std	Y+5, r20	; 0x05
    362a:	38 87       	std	Y+8, r19	; 0x08
    362c:	2f 83       	std	Y+7, r18	; 0x07
    362e:	1a 87       	std	Y+10, r17	; 0x0a
    3630:	09 87       	std	Y+9, r16	; 0x09
    3632:	fc 86       	std	Y+12, r15	; 0x0c
    3634:	eb 86       	std	Y+11, r14	; 0x0b
    _ubrrh = ubrrh;
    3636:	89 81       	ldd	r24, Y+1	; 0x01
    3638:	9a 81       	ldd	r25, Y+2	; 0x02
    363a:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <_ubrrh+0x1>
    363e:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <_ubrrh>
    _ubrrl = ubrrl;
    3642:	8b 81       	ldd	r24, Y+3	; 0x03
    3644:	9c 81       	ldd	r25, Y+4	; 0x04
    3646:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <_ubrrl+0x1>
    364a:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <_ubrrl>
    _ucsra = ucsra;
    364e:	8d 81       	ldd	r24, Y+5	; 0x05
    3650:	9e 81       	ldd	r25, Y+6	; 0x06
    3652:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <_ucsra+0x1>
    3656:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <_ucsra>
    _ucsrb = ucsrb;
    365a:	8f 81       	ldd	r24, Y+7	; 0x07
    365c:	98 85       	ldd	r25, Y+8	; 0x08
    365e:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <_ucsrb+0x1>
    3662:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <_ucsrb>
    _ucsrc = ucsrc;
    3666:	89 85       	ldd	r24, Y+9	; 0x09
    3668:	9a 85       	ldd	r25, Y+10	; 0x0a
    366a:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <_ucsrc+0x1>
    366e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <_ucsrc>
    _udr = udr;
    3672:	8b 85       	ldd	r24, Y+11	; 0x0b
    3674:	9c 85       	ldd	r25, Y+12	; 0x0c
    3676:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <_udr+0x1>
    367a:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <_udr>
}
    367e:	00 00       	nop
    3680:	2c 96       	adiw	r28, 0x0c	; 12
    3682:	0f b6       	in	r0, 0x3f	; 63
    3684:	f8 94       	cli
    3686:	de bf       	out	0x3e, r29	; 62
    3688:	0f be       	out	0x3f, r0	; 63
    368a:	cd bf       	out	0x3d, r28	; 61
    368c:	df 91       	pop	r29
    368e:	cf 91       	pop	r28
    3690:	1f 91       	pop	r17
    3692:	0f 91       	pop	r16
    3694:	ff 90       	pop	r15
    3696:	ef 90       	pop	r14
    3698:	08 95       	ret

0000369a <serInitComplete>:

void serInitComplete(unsigned long baud, uint8_t config) {
    369a:	ef 92       	push	r14
    369c:	ff 92       	push	r15
    369e:	0f 93       	push	r16
    36a0:	1f 93       	push	r17
    36a2:	cf 93       	push	r28
    36a4:	df 93       	push	r29
    36a6:	cd b7       	in	r28, 0x3d	; 61
    36a8:	de b7       	in	r29, 0x3e	; 62
    36aa:	27 97       	sbiw	r28, 0x07	; 7
    36ac:	0f b6       	in	r0, 0x3f	; 63
    36ae:	f8 94       	cli
    36b0:	de bf       	out	0x3e, r29	; 62
    36b2:	0f be       	out	0x3f, r0	; 63
    36b4:	cd bf       	out	0x3d, r28	; 61
    36b6:	6b 83       	std	Y+3, r22	; 0x03
    36b8:	7c 83       	std	Y+4, r23	; 0x04
    36ba:	8d 83       	std	Y+5, r24	; 0x05
    36bc:	9e 83       	std	Y+6, r25	; 0x06
    36be:	4f 83       	std	Y+7, r20	; 0x07
    serSetup(&UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR);
    36c0:	0f 2e       	mov	r0, r31
    36c2:	fc e2       	ldi	r31, 0x2C	; 44
    36c4:	ef 2e       	mov	r14, r31
    36c6:	f1 2c       	mov	r15, r1
    36c8:	f0 2d       	mov	r31, r0
    36ca:	00 e4       	ldi	r16, 0x40	; 64
    36cc:	10 e0       	ldi	r17, 0x00	; 0
    36ce:	2a e2       	ldi	r18, 0x2A	; 42
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	4b e2       	ldi	r20, 0x2B	; 43
    36d4:	50 e0       	ldi	r21, 0x00	; 0
    36d6:	69 e2       	ldi	r22, 0x29	; 41
    36d8:	70 e0       	ldi	r23, 0x00	; 0
    36da:	80 e4       	ldi	r24, 0x40	; 64
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	0e 94 01 1b 	call	0x3602	; 0x3602 <serSetup>
    _written = false;
    36e2:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <_written>

	#define __UBRR F_CPU/16/UART_BAUD-1 
	uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    36e6:	80 e0       	ldi	r24, 0x00	; 0
    36e8:	90 e3       	ldi	r25, 0x30	; 48
    36ea:	aa e2       	ldi	r26, 0x2A	; 42
    36ec:	b0 e0       	ldi	r27, 0x00	; 0
    36ee:	2b 81       	ldd	r18, Y+3	; 0x03
    36f0:	3c 81       	ldd	r19, Y+4	; 0x04
    36f2:	4d 81       	ldd	r20, Y+5	; 0x05
    36f4:	5e 81       	ldd	r21, Y+6	; 0x06
    36f6:	bc 01       	movw	r22, r24
    36f8:	cd 01       	movw	r24, r26
    36fa:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <__udivmodsi4>
    36fe:	da 01       	movw	r26, r20
    3700:	c9 01       	movw	r24, r18
    3702:	01 97       	sbiw	r24, 0x01	; 1
    3704:	a1 09       	sbc	r26, r1
    3706:	b1 09       	sbc	r27, r1
    3708:	b6 95       	lsr	r27
    370a:	a7 95       	ror	r26
    370c:	97 95       	ror	r25
    370e:	87 95       	ror	r24
    3710:	9a 83       	std	Y+2, r25	; 0x02
    3712:	89 83       	std	Y+1, r24	; 0x01
	if (baud_setting > 0xFFF) {
    3714:	89 81       	ldd	r24, Y+1	; 0x01
    3716:	9a 81       	ldd	r25, Y+2	; 0x02
    3718:	81 15       	cp	r24, r1
    371a:	90 41       	sbci	r25, 0x10	; 16
    371c:	a0 f0       	brcs	.+40     	; 0x3746 <serInitComplete+0xac>
		baud_setting /= 2;
    371e:	89 81       	ldd	r24, Y+1	; 0x01
    3720:	9a 81       	ldd	r25, Y+2	; 0x02
    3722:	96 95       	lsr	r25
    3724:	87 95       	ror	r24
    3726:	9a 83       	std	Y+2, r25	; 0x02
    3728:	89 83       	std	Y+1, r24	; 0x01
	    *_ucsra &= ~_BV(U2X);
    372a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <_ucsra>
    372e:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <_ucsra+0x1>
    3732:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <_ucsra>
    3736:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <_ucsra+0x1>
    373a:	f9 01       	movw	r30, r18
    373c:	20 81       	ld	r18, Z
    373e:	2d 7f       	andi	r18, 0xFD	; 253
    3740:	fc 01       	movw	r30, r24
    3742:	20 83       	st	Z, r18
    3744:	0d c0       	rjmp	.+26     	; 0x3760 <serInitComplete+0xc6>
	} else {
	    *_ucsra |= _BV(U2X);
    3746:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <_ucsra>
    374a:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <_ucsra+0x1>
    374e:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <_ucsra>
    3752:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <_ucsra+0x1>
    3756:	f9 01       	movw	r30, r18
    3758:	20 81       	ld	r18, Z
    375a:	22 60       	ori	r18, 0x02	; 2
    375c:	fc 01       	movw	r30, r24
    375e:	20 83       	st	Z, r18
	}

    *_ubrrh =  baud_setting >> 8;
    3760:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <_ubrrh>
    3764:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <_ubrrh+0x1>
    3768:	29 81       	ldd	r18, Y+1	; 0x01
    376a:	3a 81       	ldd	r19, Y+2	; 0x02
    376c:	23 2f       	mov	r18, r19
    376e:	33 27       	eor	r19, r19
    3770:	fc 01       	movw	r30, r24
    3772:	20 83       	st	Z, r18
    *_ubrrl =  baud_setting & 0xFF;
    3774:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <_ubrrl>
    3778:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <_ubrrl+0x1>
    377c:	29 81       	ldd	r18, Y+1	; 0x01
    377e:	fc 01       	movw	r30, r24
    3780:	20 83       	st	Z, r18

#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega16__) || defined(__AVR_ATmega32__)
    config |= _BV(URSEL); // select UCSRC register (shared with UBRRH)
    3782:	8f 81       	ldd	r24, Y+7	; 0x07
    3784:	80 68       	ori	r24, 0x80	; 128
    3786:	8f 83       	std	Y+7, r24	; 0x07
#endif
    *_ucsrc = config;
    3788:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <_ucsrc>
    378c:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <_ucsrc+0x1>
    3790:	2f 81       	ldd	r18, Y+7	; 0x07
    3792:	fc 01       	movw	r30, r24
    3794:	20 83       	st	Z, r18

    *_ucsrb |= (_BV(RXEN) | _BV(TXEN) | _BV(RXCIE));
    3796:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <_ucsrb>
    379a:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <_ucsrb+0x1>
    379e:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <_ucsrb>
    37a2:	30 91 4e 01 	lds	r19, 0x014E	; 0x80014e <_ucsrb+0x1>
    37a6:	f9 01       	movw	r30, r18
    37a8:	20 81       	ld	r18, Z
    37aa:	28 69       	ori	r18, 0x98	; 152
    37ac:	fc 01       	movw	r30, r24
    37ae:	20 83       	st	Z, r18
}
    37b0:	00 00       	nop
    37b2:	27 96       	adiw	r28, 0x07	; 7
    37b4:	0f b6       	in	r0, 0x3f	; 63
    37b6:	f8 94       	cli
    37b8:	de bf       	out	0x3e, r29	; 62
    37ba:	0f be       	out	0x3f, r0	; 63
    37bc:	cd bf       	out	0x3d, r28	; 61
    37be:	df 91       	pop	r29
    37c0:	cf 91       	pop	r28
    37c2:	1f 91       	pop	r17
    37c4:	0f 91       	pop	r16
    37c6:	ff 90       	pop	r15
    37c8:	ef 90       	pop	r14
    37ca:	08 95       	ret

000037cc <serInit>:

void serInit(unsigned long baud) {
    37cc:	cf 93       	push	r28
    37ce:	df 93       	push	r29
    37d0:	00 d0       	rcall	.+0      	; 0x37d2 <serInit+0x6>
    37d2:	00 d0       	rcall	.+0      	; 0x37d4 <serInit+0x8>
    37d4:	cd b7       	in	r28, 0x3d	; 61
    37d6:	de b7       	in	r29, 0x3e	; 62
    37d8:	69 83       	std	Y+1, r22	; 0x01
    37da:	7a 83       	std	Y+2, r23	; 0x02
    37dc:	8b 83       	std	Y+3, r24	; 0x03
    37de:	9c 83       	std	Y+4, r25	; 0x04
    serInitComplete(baud, SERIAL_8N1);
    37e0:	89 81       	ldd	r24, Y+1	; 0x01
    37e2:	9a 81       	ldd	r25, Y+2	; 0x02
    37e4:	ab 81       	ldd	r26, Y+3	; 0x03
    37e6:	bc 81       	ldd	r27, Y+4	; 0x04
    37e8:	46 e0       	ldi	r20, 0x06	; 6
    37ea:	bc 01       	movw	r22, r24
    37ec:	cd 01       	movw	r24, r26
    37ee:	0e 94 4d 1b 	call	0x369a	; 0x369a <serInitComplete>
}
    37f2:	00 00       	nop
    37f4:	0f 90       	pop	r0
    37f6:	0f 90       	pop	r0
    37f8:	0f 90       	pop	r0
    37fa:	0f 90       	pop	r0
    37fc:	df 91       	pop	r29
    37fe:	cf 91       	pop	r28
    3800:	08 95       	ret

00003802 <serFlush>:

void serFlush(void) {
    3802:	cf 93       	push	r28
    3804:	df 93       	push	r29
    3806:	cd b7       	in	r28, 0x3d	; 61
    3808:	de b7       	in	r29, 0x3e	; 62
    // If we have never written a byte, no need to flush. This special
    // case is needed since there is no way to force the TXC (transmit
    // complete) bit to 1 during initialization
    if (false == _written) {
    380a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <_written>
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	89 27       	eor	r24, r25
    3812:	88 23       	and	r24, r24
    3814:	d1 f5       	brne	.+116    	; 0x388a <serFlush+0x88>
        return;
    }

    while (bit_is_set(*_ucsrb, UDRIE) || bit_is_clear(*_ucsra, TXC)) {
    3816:	20 c0       	rjmp	.+64     	; 0x3858 <serFlush+0x56>
        if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE)) {
    3818:	8f e5       	ldi	r24, 0x5F	; 95
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	fc 01       	movw	r30, r24
    381e:	80 81       	ld	r24, Z
    3820:	88 23       	and	r24, r24
    3822:	d4 f0       	brlt	.+52     	; 0x3858 <serFlush+0x56>
    3824:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <_ucsrb>
    3828:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <_ucsrb+0x1>
    382c:	fc 01       	movw	r30, r24
    382e:	80 81       	ld	r24, Z
    3830:	88 2f       	mov	r24, r24
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	80 72       	andi	r24, 0x20	; 32
    3836:	99 27       	eor	r25, r25
    3838:	89 2b       	or	r24, r25
    383a:	71 f0       	breq	.+28     	; 0x3858 <serFlush+0x56>
            // Interrupts are globally disabled, but the DR empty
            // interrupt should be enabled, so poll the DR empty flag to
            // prevent deadlock
            if (bit_is_set(*_ucsra, UDRE)) {
    383c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <_ucsra>
    3840:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <_ucsra+0x1>
    3844:	fc 01       	movw	r30, r24
    3846:	80 81       	ld	r24, Z
    3848:	88 2f       	mov	r24, r24
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	80 72       	andi	r24, 0x20	; 32
    384e:	99 27       	eor	r25, r25
    3850:	89 2b       	or	r24, r25
    3852:	11 f0       	breq	.+4      	; 0x3858 <serFlush+0x56>
                irqTx();
    3854:	0e 94 93 1a 	call	0x3526	; 0x3526 <irqTx>
    // complete) bit to 1 during initialization
    if (false == _written) {
        return;
    }

    while (bit_is_set(*_ucsrb, UDRIE) || bit_is_clear(*_ucsra, TXC)) {
    3858:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <_ucsrb>
    385c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <_ucsrb+0x1>
    3860:	fc 01       	movw	r30, r24
    3862:	80 81       	ld	r24, Z
    3864:	88 2f       	mov	r24, r24
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	80 72       	andi	r24, 0x20	; 32
    386a:	99 27       	eor	r25, r25
    386c:	89 2b       	or	r24, r25
    386e:	a1 f6       	brne	.-88     	; 0x3818 <serFlush+0x16>
    3870:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <_ucsra>
    3874:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <_ucsra+0x1>
    3878:	fc 01       	movw	r30, r24
    387a:	80 81       	ld	r24, Z
    387c:	88 2f       	mov	r24, r24
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	80 74       	andi	r24, 0x40	; 64
    3882:	99 27       	eor	r25, r25
    3884:	89 2b       	or	r24, r25
    3886:	41 f2       	breq	.-112    	; 0x3818 <serFlush+0x16>
    3888:	01 c0       	rjmp	.+2      	; 0x388c <serFlush+0x8a>
void serFlush(void) {
    // If we have never written a byte, no need to flush. This special
    // case is needed since there is no way to force the TXC (transmit
    // complete) bit to 1 during initialization
    if (false == _written) {
        return;
    388a:	00 00       	nop
            if (bit_is_set(*_ucsra, UDRE)) {
                irqTx();
            }
        }
    }
}
    388c:	df 91       	pop	r29
    388e:	cf 91       	pop	r28
    3890:	08 95       	ret

00003892 <serEnd>:

void serEnd(void) {
    3892:	cf 93       	push	r28
    3894:	df 93       	push	r29
    3896:	cd b7       	in	r28, 0x3d	; 61
    3898:	de b7       	in	r29, 0x3e	; 62
    // wait for transmission of outgoing data
    serFlush();
    389a:	0e 94 01 1c 	call	0x3802	; 0x3802 <serFlush>
    *_ucsrb &= ~_BV(RXEN);
    389e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <_ucsrb>
    38a2:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <_ucsrb+0x1>
    38a6:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <_ucsrb>
    38aa:	30 91 4e 01 	lds	r19, 0x014E	; 0x80014e <_ucsrb+0x1>
    38ae:	f9 01       	movw	r30, r18
    38b0:	20 81       	ld	r18, Z
    38b2:	2f 7e       	andi	r18, 0xEF	; 239
    38b4:	fc 01       	movw	r30, r24
    38b6:	20 83       	st	Z, r18
    *_ucsrb &= ~_BV(TXEN);
    38b8:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <_ucsrb>
    38bc:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <_ucsrb+0x1>
    38c0:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <_ucsrb>
    38c4:	30 91 4e 01 	lds	r19, 0x014E	; 0x80014e <_ucsrb+0x1>
    38c8:	f9 01       	movw	r30, r18
    38ca:	20 81       	ld	r18, Z
    38cc:	27 7f       	andi	r18, 0xF7	; 247
    38ce:	fc 01       	movw	r30, r24
    38d0:	20 83       	st	Z, r18
    *_ucsrb &= ~_BV(RXCIE);
    38d2:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <_ucsrb>
    38d6:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <_ucsrb+0x1>
    38da:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <_ucsrb>
    38de:	30 91 4e 01 	lds	r19, 0x014E	; 0x80014e <_ucsrb+0x1>
    38e2:	f9 01       	movw	r30, r18
    38e4:	20 81       	ld	r18, Z
    38e6:	2f 77       	andi	r18, 0x7F	; 127
    38e8:	fc 01       	movw	r30, r24
    38ea:	20 83       	st	Z, r18

    rxFlush();
    38ec:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <rxFlush>
}
    38f0:	00 00       	nop
    38f2:	df 91       	pop	r29
    38f4:	cf 91       	pop	r28
    38f6:	08 95       	ret

000038f8 <serAvailable>:

int serAvailable(void) {
    38f8:	cf 93       	push	r28
    38fa:	df 93       	push	r29
    38fc:	cd b7       	in	r28, 0x3d	; 61
    38fe:	de b7       	in	r29, 0x3e	; 62
    return rxAvailable();
    3900:	0e 94 71 19 	call	0x32e2	; 0x32e2 <rxAvailable>
}
    3904:	df 91       	pop	r29
    3906:	cf 91       	pop	r28
    3908:	08 95       	ret

0000390a <serPeek>:

int serPeek(void) {
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
    return rxPeek();
    3912:	0e 94 8d 19 	call	0x331a	; 0x331a <rxPeek>
}
    3916:	df 91       	pop	r29
    3918:	cf 91       	pop	r28
    391a:	08 95       	ret

0000391c <serRead>:

int serRead(void) {
    391c:	cf 93       	push	r28
    391e:	df 93       	push	r29
    3920:	cd b7       	in	r28, 0x3d	; 61
    3922:	de b7       	in	r29, 0x3e	; 62
    return rxRead();
    3924:	0e 94 a7 19 	call	0x334e	; 0x334e <rxRead>
}
    3928:	df 91       	pop	r29
    392a:	cf 91       	pop	r28
    392c:	08 95       	ret

0000392e <serAvailableLines>:

int serAvailableLines(void) {
    392e:	cf 93       	push	r28
    3930:	df 93       	push	r29
    3932:	cd b7       	in	r28, 0x3d	; 61
    3934:	de b7       	in	r29, 0x3e	; 62
    return _rxBufferLines;
    3936:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <_rxBufferLines>
    393a:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <_rxBufferLines+0x1>
}
    393e:	df 91       	pop	r29
    3940:	cf 91       	pop	r28
    3942:	08 95       	ret

00003944 <serReadLine>:

void serReadLine(char *buf, uint8_t maxLen) {
    3944:	cf 93       	push	r28
    3946:	df 93       	push	r29
    3948:	00 d0       	rcall	.+0      	; 0x394a <serReadLine+0x6>
    394a:	00 d0       	rcall	.+0      	; 0x394c <serReadLine+0x8>
    394c:	cd b7       	in	r28, 0x3d	; 61
    394e:	de b7       	in	r29, 0x3e	; 62
    3950:	9b 83       	std	Y+3, r25	; 0x03
    3952:	8a 83       	std	Y+2, r24	; 0x02
    3954:	6c 83       	std	Y+4, r22	; 0x04
    if (serAvailableLines() > 0) {
    3956:	0e 94 97 1c 	call	0x392e	; 0x392e <serAvailableLines>
    395a:	18 16       	cp	r1, r24
    395c:	19 06       	cpc	r1, r25
    395e:	ac f5       	brge	.+106    	; 0x39ca <serReadLine+0x86>
        char c = 0;
    3960:	19 82       	std	Y+1, r1	; 0x01
        while (maxLen-- > 0) {
    3962:	2c c0       	rjmp	.+88     	; 0x39bc <serReadLine+0x78>
            c = rxRead();
    3964:	0e 94 a7 19 	call	0x334e	; 0x334e <rxRead>
    3968:	89 83       	std	Y+1, r24	; 0x01
            if ('\n' == c) {
    396a:	89 81       	ldd	r24, Y+1	; 0x01
    396c:	8a 30       	cpi	r24, 0x0A	; 10
    396e:	51 f4       	brne	.+20     	; 0x3984 <serReadLine+0x40>
                *buf++ = 0;
    3970:	8a 81       	ldd	r24, Y+2	; 0x02
    3972:	9b 81       	ldd	r25, Y+3	; 0x03
    3974:	9c 01       	movw	r18, r24
    3976:	2f 5f       	subi	r18, 0xFF	; 255
    3978:	3f 4f       	sbci	r19, 0xFF	; 255
    397a:	3b 83       	std	Y+3, r19	; 0x03
    397c:	2a 83       	std	Y+2, r18	; 0x02
    397e:	fc 01       	movw	r30, r24
    3980:	10 82       	st	Z, r1
    3982:	1c c0       	rjmp	.+56     	; 0x39bc <serReadLine+0x78>
            } else if ('\r' == c) {
    3984:	89 81       	ldd	r24, Y+1	; 0x01
    3986:	8d 30       	cpi	r24, 0x0D	; 13
    3988:	59 f4       	brne	.+22     	; 0x39a0 <serReadLine+0x5c>
                *buf++ = 0;
    398a:	8a 81       	ldd	r24, Y+2	; 0x02
    398c:	9b 81       	ldd	r25, Y+3	; 0x03
    398e:	9c 01       	movw	r18, r24
    3990:	2f 5f       	subi	r18, 0xFF	; 255
    3992:	3f 4f       	sbci	r19, 0xFF	; 255
    3994:	3b 83       	std	Y+3, r19	; 0x03
    3996:	2a 83       	std	Y+2, r18	; 0x02
    3998:	fc 01       	movw	r30, r24
    399a:	10 82       	st	Z, r1
                break;
    399c:	00 00       	nop
    } else if (true == _rxBufferOverflow) {
        // protect situation when buffer overflow happened
        // in this case data is corrupted anyway
        rxFlush();
    }
}
    399e:	1b c0       	rjmp	.+54     	; 0x39d6 <serReadLine+0x92>
            if ('\n' == c) {
                *buf++ = 0;
            } else if ('\r' == c) {
                *buf++ = 0;
                break;
            } else if (0 == c) {
    39a0:	89 81       	ldd	r24, Y+1	; 0x01
    39a2:	88 23       	and	r24, r24
    39a4:	09 f4       	brne	.+2      	; 0x39a8 <serReadLine+0x64>
                continue;
    39a6:	0a c0       	rjmp	.+20     	; 0x39bc <serReadLine+0x78>
            } else {
                *buf++ = c;
    39a8:	8a 81       	ldd	r24, Y+2	; 0x02
    39aa:	9b 81       	ldd	r25, Y+3	; 0x03
    39ac:	9c 01       	movw	r18, r24
    39ae:	2f 5f       	subi	r18, 0xFF	; 255
    39b0:	3f 4f       	sbci	r19, 0xFF	; 255
    39b2:	3b 83       	std	Y+3, r19	; 0x03
    39b4:	2a 83       	std	Y+2, r18	; 0x02
    39b6:	29 81       	ldd	r18, Y+1	; 0x01
    39b8:	fc 01       	movw	r30, r24
    39ba:	20 83       	st	Z, r18
}

void serReadLine(char *buf, uint8_t maxLen) {
    if (serAvailableLines() > 0) {
        char c = 0;
        while (maxLen-- > 0) {
    39bc:	8c 81       	ldd	r24, Y+4	; 0x04
    39be:	9f ef       	ldi	r25, 0xFF	; 255
    39c0:	98 0f       	add	r25, r24
    39c2:	9c 83       	std	Y+4, r25	; 0x04
    39c4:	88 23       	and	r24, r24
    39c6:	71 f6       	brne	.-100    	; 0x3964 <serReadLine+0x20>
    } else if (true == _rxBufferOverflow) {
        // protect situation when buffer overflow happened
        // in this case data is corrupted anyway
        rxFlush();
    }
}
    39c8:	06 c0       	rjmp	.+12     	; 0x39d6 <serReadLine+0x92>
                continue;
            } else {
                *buf++ = c;
            }
        }
    } else if (true == _rxBufferOverflow) {
    39ca:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <_rxBufferOverflow>
    39ce:	88 23       	and	r24, r24
    39d0:	11 f0       	breq	.+4      	; 0x39d6 <serReadLine+0x92>
        // protect situation when buffer overflow happened
        // in this case data is corrupted anyway
        rxFlush();
    39d2:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <rxFlush>
    }
}
    39d6:	00 00       	nop
    39d8:	0f 90       	pop	r0
    39da:	0f 90       	pop	r0
    39dc:	0f 90       	pop	r0
    39de:	0f 90       	pop	r0
    39e0:	df 91       	pop	r29
    39e2:	cf 91       	pop	r28
    39e4:	08 95       	ret

000039e6 <serAvailableForWrite>:


int serAvailableForWrite(void) {
    39e6:	cf 93       	push	r28
    39e8:	df 93       	push	r29
    39ea:	cd b7       	in	r28, 0x3d	; 61
    39ec:	de b7       	in	r29, 0x3e	; 62
    return SERIAL_TX_BUFFER_SIZE - _txBufferLength;
    39ee:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <_txBufferLength>
    39f2:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <_txBufferLength+0x1>
    39f6:	24 e1       	ldi	r18, 0x14	; 20
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	a9 01       	movw	r20, r18
    39fc:	48 1b       	sub	r20, r24
    39fe:	59 0b       	sbc	r21, r25
    3a00:	ca 01       	movw	r24, r20
}
    3a02:	df 91       	pop	r29
    3a04:	cf 91       	pop	r28
    3a06:	08 95       	ret

00003a08 <serWriteChar>:

size_t serWriteChar(uint8_t c) {
    3a08:	cf 93       	push	r28
    3a0a:	df 93       	push	r29
    3a0c:	cd b7       	in	r28, 0x3d	; 61
    3a0e:	de b7       	in	r29, 0x3e	; 62
    3a10:	2a 97       	sbiw	r28, 0x0a	; 10
    3a12:	0f b6       	in	r0, 0x3f	; 63
    3a14:	f8 94       	cli
    3a16:	de bf       	out	0x3e, r29	; 62
    3a18:	0f be       	out	0x3f, r0	; 63
    3a1a:	cd bf       	out	0x3d, r28	; 61
    3a1c:	8a 87       	std	Y+10, r24	; 0x0a
#if 1
	char buf[5];
	if (0xEF == c) {
    3a1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a20:	8f 3e       	cpi	r24, 0xEF	; 239
    3a22:	41 f4       	brne	.+16     	; 0x3a34 <serWriteChar+0x2c>
		lcdWrite('<');
    3a24:	8c e3       	ldi	r24, 0x3C	; 60
    3a26:	0e 94 1e 14 	call	0x283c	; 0x283c <lcdWrite>
		lcdSetCursor(0, 0);
    3a2a:	60 e0       	ldi	r22, 0x00	; 0
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	0e 94 12 13 	call	0x2624	; 0x2624 <lcdSetCursor>
    3a32:	1d c0       	rjmp	.+58     	; 0x3a6e <serWriteChar+0x66>
		} else if (0x7E == c) {
    3a34:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a36:	8e 37       	cpi	r24, 0x7E	; 126
    3a38:	21 f4       	brne	.+8      	; 0x3a42 <serWriteChar+0x3a>
		lcdWrite('>');
    3a3a:	8e e3       	ldi	r24, 0x3E	; 62
    3a3c:	0e 94 1e 14 	call	0x283c	; 0x283c <lcdWrite>
    3a40:	16 c0       	rjmp	.+44     	; 0x3a6e <serWriteChar+0x66>
		} else if (0x00 == c) {
    3a42:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a44:	88 23       	and	r24, r24
    3a46:	21 f4       	brne	.+8      	; 0x3a50 <serWriteChar+0x48>
		lcdWrite('.');
    3a48:	8e e2       	ldi	r24, 0x2E	; 46
    3a4a:	0e 94 1e 14 	call	0x283c	; 0x283c <lcdWrite>
    3a4e:	0f c0       	rjmp	.+30     	; 0x3a6e <serWriteChar+0x66>
		} else {
		itoa(c, buf, 16);
    3a50:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a52:	88 2f       	mov	r24, r24
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	9e 01       	movw	r18, r28
    3a58:	2d 5f       	subi	r18, 0xFD	; 253
    3a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a5c:	40 e1       	ldi	r20, 0x10	; 16
    3a5e:	50 e0       	ldi	r21, 0x00	; 0
    3a60:	b9 01       	movw	r22, r18
    3a62:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <itoa>
		lcdPrint(buf);
    3a66:	ce 01       	movw	r24, r28
    3a68:	03 96       	adiw	r24, 0x03	; 3
    3a6a:	0e 94 b2 13 	call	0x2764	; 0x2764 <lcdPrint>
	}
#endif
    _written = true;
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <_written>
    // If the buffer and the data register is empty, just write the byte
    // to the data register and be done. This shortcut helps
    // significantly improve the effective data-rate at high (> 500kbit/s)
    // bit-rates, where interrupt overhead becomes a slowdown.
    if (0 == txAvailable() && bit_is_set(*_ucsra, UDRE)) {
    3a74:	0e 94 27 1a 	call	0x344e	; 0x344e <txAvailable>
    3a78:	89 2b       	or	r24, r25
    3a7a:	09 f0       	breq	.+2      	; 0x3a7e <serWriteChar+0x76>
    3a7c:	49 c0       	rjmp	.+146    	; 0x3b10 <serWriteChar+0x108>
    3a7e:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <_ucsra>
    3a82:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <_ucsra+0x1>
    3a86:	fc 01       	movw	r30, r24
    3a88:	80 81       	ld	r24, Z
    3a8a:	88 2f       	mov	r24, r24
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	80 72       	andi	r24, 0x20	; 32
    3a90:	99 27       	eor	r25, r25
    3a92:	89 2b       	or	r24, r25
    3a94:	e9 f1       	breq	.+122    	; 0x3b10 <serWriteChar+0x108>
        // So writing UDR must happen first.
        // Writing UDR and clearing TC must be done atomically, otherwise
        // interrupts might delay the TXC clear so the byte written to UDR
        // is transmitted (setting TXC) before clearing TXC. Then TXC will
        // be cleared when no bytes are left, causing flush() to hang
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3a96:	8f e5       	ldi	r24, 0x5F	; 95
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	fc 01       	movw	r30, r24
    3a9c:	80 81       	ld	r24, Z
    3a9e:	88 87       	std	Y+8, r24	; 0x08
    3aa0:	0e 94 1a 19 	call	0x3234	; 0x3234 <__iCliRetVal>
    3aa4:	89 83       	std	Y+1, r24	; 0x01
    3aa6:	16 c0       	rjmp	.+44     	; 0x3ad4 <serWriteChar+0xcc>
            *_udr = c;
    3aa8:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <_udr>
    3aac:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <_udr+0x1>
    3ab0:	2a 85       	ldd	r18, Y+10	; 0x0a
    3ab2:	fc 01       	movw	r30, r24
    3ab4:	20 83       	st	Z, r18
            *_ucsra = ((*_ucsra) & (_BV(U2X) | _BV(MPCM))) | _BV(TXC);
    3ab6:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <_ucsra>
    3aba:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <_ucsra+0x1>
    3abe:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <_ucsra>
    3ac2:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <_ucsra+0x1>
    3ac6:	f9 01       	movw	r30, r18
    3ac8:	20 81       	ld	r18, Z
    3aca:	23 70       	andi	r18, 0x03	; 3
    3acc:	20 64       	ori	r18, 0x40	; 64
    3ace:	fc 01       	movw	r30, r24
    3ad0:	20 83       	st	Z, r18
        // So writing UDR must happen first.
        // Writing UDR and clearing TC must be done atomically, otherwise
        // interrupts might delay the TXC clear so the byte written to UDR
        // is transmitted (setting TXC) before clearing TXC. Then TXC will
        // be cleared when no bytes are left, causing flush() to hang
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3ad2:	19 82       	std	Y+1, r1	; 0x01
    3ad4:	89 81       	ldd	r24, Y+1	; 0x01
    3ad6:	88 23       	and	r24, r24
    3ad8:	39 f7       	brne	.-50     	; 0x3aa8 <serWriteChar+0xa0>
    3ada:	ce 01       	movw	r24, r28
    3adc:	08 96       	adiw	r24, 0x08	; 8
    3ade:	0e 94 23 19 	call	0x3246	; 0x3246 <__iRestore>
            *_udr = c;
            *_ucsra = ((*_ucsra) & (_BV(U2X) | _BV(MPCM))) | _BV(TXC);
        }
    return 1;
    3ae2:	81 e0       	ldi	r24, 0x01	; 1
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	3b c0       	rjmp	.+118    	; 0x3b5e <serWriteChar+0x156>
    }
    // If the output buffer is full, there's nothing for it other than to
    // wait for the interrupt handler to empty it a bit
    while (serAvailableForWrite() == 0) {
        if (bit_is_clear(SREG, SREG_I)) {
    3ae8:	8f e5       	ldi	r24, 0x5F	; 95
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	fc 01       	movw	r30, r24
    3aee:	80 81       	ld	r24, Z
    3af0:	88 23       	and	r24, r24
    3af2:	74 f0       	brlt	.+28     	; 0x3b10 <serWriteChar+0x108>
            // Interrupts are disabled, so we'll have to poll the data
            // register empty flag ourselves. If it is set, pretend an
            // interrupt has happened and call the handler to free up
            // space for us.
            if(bit_is_set(*_ucsra, UDRE)) {
    3af4:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <_ucsra>
    3af8:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <_ucsra+0x1>
    3afc:	fc 01       	movw	r30, r24
    3afe:	80 81       	ld	r24, Z
    3b00:	88 2f       	mov	r24, r24
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	80 72       	andi	r24, 0x20	; 32
    3b06:	99 27       	eor	r25, r25
    3b08:	89 2b       	or	r24, r25
    3b0a:	11 f0       	breq	.+4      	; 0x3b10 <serWriteChar+0x108>
                irqTx();
    3b0c:	0e 94 93 1a 	call	0x3526	; 0x3526 <irqTx>
        }
    return 1;
    }
    // If the output buffer is full, there's nothing for it other than to
    // wait for the interrupt handler to empty it a bit
    while (serAvailableForWrite() == 0) {
    3b10:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <serAvailableForWrite>
    3b14:	89 2b       	or	r24, r25
    3b16:	41 f3       	breq	.-48     	; 0x3ae8 <serWriteChar+0xe0>
            } else {
                // nop, the interrupt handler will free up space for us
            }
        }
    }
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3b18:	8f e5       	ldi	r24, 0x5F	; 95
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	fc 01       	movw	r30, r24
    3b1e:	80 81       	ld	r24, Z
    3b20:	89 87       	std	Y+9, r24	; 0x09
    3b22:	0e 94 1a 19 	call	0x3234	; 0x3234 <__iCliRetVal>
    3b26:	8a 83       	std	Y+2, r24	; 0x02
    3b28:	11 c0       	rjmp	.+34     	; 0x3b4c <serWriteChar+0x144>
        // make atomic to prevent execution of ISR between adding
        // new character to the buffer and setting the interrupt flag
        // resulting in buffer retransmission
        txStore(c);
    3b2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b2c:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <txStore>
        // enable interrupts
        *_ucsrb |= _BV(UDRIE);
    3b30:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <_ucsrb>
    3b34:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <_ucsrb+0x1>
    3b38:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <_ucsrb>
    3b3c:	30 91 4e 01 	lds	r19, 0x014E	; 0x80014e <_ucsrb+0x1>
    3b40:	f9 01       	movw	r30, r18
    3b42:	20 81       	ld	r18, Z
    3b44:	20 62       	ori	r18, 0x20	; 32
    3b46:	fc 01       	movw	r30, r24
    3b48:	20 83       	st	Z, r18
            } else {
                // nop, the interrupt handler will free up space for us
            }
        }
    }
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3b4a:	1a 82       	std	Y+2, r1	; 0x02
    3b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4e:	88 23       	and	r24, r24
    3b50:	61 f7       	brne	.-40     	; 0x3b2a <serWriteChar+0x122>
    3b52:	ce 01       	movw	r24, r28
    3b54:	09 96       	adiw	r24, 0x09	; 9
    3b56:	0e 94 23 19 	call	0x3246	; 0x3246 <__iRestore>
        // resulting in buffer retransmission
        txStore(c);
        // enable interrupts
        *_ucsrb |= _BV(UDRIE);
    }
    return 1;
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
}
    3b5e:	2a 96       	adiw	r28, 0x0a	; 10
    3b60:	0f b6       	in	r0, 0x3f	; 63
    3b62:	f8 94       	cli
    3b64:	de bf       	out	0x3e, r29	; 62
    3b66:	0f be       	out	0x3f, r0	; 63
    3b68:	cd bf       	out	0x3d, r28	; 61
    3b6a:	df 91       	pop	r29
    3b6c:	cf 91       	pop	r28
    3b6e:	08 95       	ret

00003b70 <serPrintString>:

void serPrintString(const char *str) {
    3b70:	cf 93       	push	r28
    3b72:	df 93       	push	r29
    3b74:	00 d0       	rcall	.+0      	; 0x3b76 <serPrintString+0x6>
    3b76:	00 d0       	rcall	.+0      	; 0x3b78 <serPrintString+0x8>
    3b78:	cd b7       	in	r28, 0x3d	; 61
    3b7a:	de b7       	in	r29, 0x3e	; 62
    3b7c:	9c 83       	std	Y+4, r25	; 0x04
    3b7e:	8b 83       	std	Y+3, r24	; 0x03
    const unsigned char *strTmp = (const unsigned char *) str;
    3b80:	8b 81       	ldd	r24, Y+3	; 0x03
    3b82:	9c 81       	ldd	r25, Y+4	; 0x04
    3b84:	9a 83       	std	Y+2, r25	; 0x02
    3b86:	89 83       	std	Y+1, r24	; 0x01
    while (0 != *strTmp) {
    3b88:	0b c0       	rjmp	.+22     	; 0x3ba0 <serPrintString+0x30>
        serWriteChar(*strTmp++);
    3b8a:	89 81       	ldd	r24, Y+1	; 0x01
    3b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b8e:	9c 01       	movw	r18, r24
    3b90:	2f 5f       	subi	r18, 0xFF	; 255
    3b92:	3f 4f       	sbci	r19, 0xFF	; 255
    3b94:	3a 83       	std	Y+2, r19	; 0x02
    3b96:	29 83       	std	Y+1, r18	; 0x01
    3b98:	fc 01       	movw	r30, r24
    3b9a:	80 81       	ld	r24, Z
    3b9c:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <serWriteChar>
    return 1;
}

void serPrintString(const char *str) {
    const unsigned char *strTmp = (const unsigned char *) str;
    while (0 != *strTmp) {
    3ba0:	89 81       	ldd	r24, Y+1	; 0x01
    3ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba4:	fc 01       	movw	r30, r24
    3ba6:	80 81       	ld	r24, Z
    3ba8:	88 23       	and	r24, r24
    3baa:	79 f7       	brne	.-34     	; 0x3b8a <serPrintString+0x1a>
        serWriteChar(*strTmp++);
    }
}
    3bac:	00 00       	nop
    3bae:	0f 90       	pop	r0
    3bb0:	0f 90       	pop	r0
    3bb2:	0f 90       	pop	r0
    3bb4:	0f 90       	pop	r0
    3bb6:	df 91       	pop	r29
    3bb8:	cf 91       	pop	r28
    3bba:	08 95       	ret

00003bbc <serPrintString_P>:

void serPrintString_P(const char *str) {
    3bbc:	1f 93       	push	r17
    3bbe:	cf 93       	push	r28
    3bc0:	df 93       	push	r29
    3bc2:	cd b7       	in	r28, 0x3d	; 61
    3bc4:	de b7       	in	r29, 0x3e	; 62
    3bc6:	27 97       	sbiw	r28, 0x07	; 7
    3bc8:	0f b6       	in	r0, 0x3f	; 63
    3bca:	f8 94       	cli
    3bcc:	de bf       	out	0x3e, r29	; 62
    3bce:	0f be       	out	0x3f, r0	; 63
    3bd0:	cd bf       	out	0x3d, r28	; 61
    3bd2:	9f 83       	std	Y+7, r25	; 0x07
    3bd4:	8e 83       	std	Y+6, r24	; 0x06
    register char c = 0;
    3bd6:	10 e0       	ldi	r17, 0x00	; 0
    const unsigned char *strTmp = (const unsigned char *) str;
    3bd8:	8e 81       	ldd	r24, Y+6	; 0x06
    3bda:	9f 81       	ldd	r25, Y+7	; 0x07
    3bdc:	9a 83       	std	Y+2, r25	; 0x02
    3bde:	89 83       	std	Y+1, r24	; 0x01
    while (0 != (c = pgm_read_byte(strTmp++))) {
    3be0:	03 c0       	rjmp	.+6      	; 0x3be8 <serPrintString_P+0x2c>
        serWriteChar(c);
    3be2:	81 2f       	mov	r24, r17
    3be4:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <serWriteChar>
}

void serPrintString_P(const char *str) {
    register char c = 0;
    const unsigned char *strTmp = (const unsigned char *) str;
    while (0 != (c = pgm_read_byte(strTmp++))) {
    3be8:	89 81       	ldd	r24, Y+1	; 0x01
    3bea:	9a 81       	ldd	r25, Y+2	; 0x02
    3bec:	9c 01       	movw	r18, r24
    3bee:	2f 5f       	subi	r18, 0xFF	; 255
    3bf0:	3f 4f       	sbci	r19, 0xFF	; 255
    3bf2:	3a 83       	std	Y+2, r19	; 0x02
    3bf4:	29 83       	std	Y+1, r18	; 0x01
    3bf6:	9c 83       	std	Y+4, r25	; 0x04
    3bf8:	8b 83       	std	Y+3, r24	; 0x03
    3bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    3bfe:	fc 01       	movw	r30, r24
    3c00:	84 91       	lpm	r24, Z
    3c02:	8d 83       	std	Y+5, r24	; 0x05
    3c04:	8d 81       	ldd	r24, Y+5	; 0x05
    3c06:	18 2f       	mov	r17, r24
    3c08:	11 23       	and	r17, r17
    3c0a:	59 f7       	brne	.-42     	; 0x3be2 <serPrintString_P+0x26>
        serWriteChar(c);
    }
}
    3c0c:	00 00       	nop
    3c0e:	27 96       	adiw	r28, 0x07	; 7
    3c10:	0f b6       	in	r0, 0x3f	; 63
    3c12:	f8 94       	cli
    3c14:	de bf       	out	0x3e, r29	; 62
    3c16:	0f be       	out	0x3f, r0	; 63
    3c18:	cd bf       	out	0x3d, r28	; 61
    3c1a:	df 91       	pop	r29
    3c1c:	cf 91       	pop	r28
    3c1e:	1f 91       	pop	r17
    3c20:	08 95       	ret

00003c22 <serPrintLn>:

void serPrintLn(void) {
    3c22:	cf 93       	push	r28
    3c24:	df 93       	push	r29
    3c26:	cd b7       	in	r28, 0x3d	; 61
    3c28:	de b7       	in	r29, 0x3e	; 62
    serPrintString_P(_strCrLf);
    3c2a:	83 ee       	ldi	r24, 0xE3	; 227
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <serPrintString_P>
}
    3c32:	00 00       	nop
    3c34:	df 91       	pop	r29
    3c36:	cf 91       	pop	r28
    3c38:	08 95       	ret

00003c3a <serPrintLnString>:

void serPrintLnString(const char *str) {
    3c3a:	cf 93       	push	r28
    3c3c:	df 93       	push	r29
    3c3e:	00 d0       	rcall	.+0      	; 0x3c40 <serPrintLnString+0x6>
    3c40:	cd b7       	in	r28, 0x3d	; 61
    3c42:	de b7       	in	r29, 0x3e	; 62
    3c44:	9a 83       	std	Y+2, r25	; 0x02
    3c46:	89 83       	std	Y+1, r24	; 0x01
    serPrintString(str);
    3c48:	89 81       	ldd	r24, Y+1	; 0x01
    3c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c4c:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <serPrintString>
    serPrintLn();
    3c50:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <serPrintLn>
}
    3c54:	00 00       	nop
    3c56:	0f 90       	pop	r0
    3c58:	0f 90       	pop	r0
    3c5a:	df 91       	pop	r29
    3c5c:	cf 91       	pop	r28
    3c5e:	08 95       	ret

00003c60 <serPrintLnString_P>:

void serPrintLnString_P(const char *str) {
    3c60:	cf 93       	push	r28
    3c62:	df 93       	push	r29
    3c64:	00 d0       	rcall	.+0      	; 0x3c66 <serPrintLnString_P+0x6>
    3c66:	cd b7       	in	r28, 0x3d	; 61
    3c68:	de b7       	in	r29, 0x3e	; 62
    3c6a:	9a 83       	std	Y+2, r25	; 0x02
    3c6c:	89 83       	std	Y+1, r24	; 0x01
    serPrintString_P(str);
    3c6e:	89 81       	ldd	r24, Y+1	; 0x01
    3c70:	9a 81       	ldd	r25, Y+2	; 0x02
    3c72:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <serPrintString_P>
    serPrintLn();
    3c76:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <serPrintLn>
}
    3c7a:	00 00       	nop
    3c7c:	0f 90       	pop	r0
    3c7e:	0f 90       	pop	r0
    3c80:	df 91       	pop	r29
    3c82:	cf 91       	pop	r28
    3c84:	08 95       	ret

00003c86 <serPrintNumber>:

void serPrintNumber(unsigned long n, uint8_t base) {
    3c86:	cf 93       	push	r28
    3c88:	df 93       	push	r29
    3c8a:	cd b7       	in	r28, 0x3d	; 61
    3c8c:	de b7       	in	r29, 0x3e	; 62
    3c8e:	ad 97       	sbiw	r28, 0x2d	; 45
    3c90:	0f b6       	in	r0, 0x3f	; 63
    3c92:	f8 94       	cli
    3c94:	de bf       	out	0x3e, r29	; 62
    3c96:	0f be       	out	0x3f, r0	; 63
    3c98:	cd bf       	out	0x3d, r28	; 61
    3c9a:	69 a7       	std	Y+41, r22	; 0x29
    3c9c:	7a a7       	std	Y+42, r23	; 0x2a
    3c9e:	8b a7       	std	Y+43, r24	; 0x2b
    3ca0:	9c a7       	std	Y+44, r25	; 0x2c
    3ca2:	4d a7       	std	Y+45, r20	; 0x2d
    char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
    char *str = &buf[sizeof(buf) - 1];
    3ca4:	ce 01       	movw	r24, r28
    3ca6:	08 96       	adiw	r24, 0x08	; 8
    3ca8:	80 96       	adiw	r24, 0x20	; 32
    3caa:	9a 83       	std	Y+2, r25	; 0x02
    3cac:	89 83       	std	Y+1, r24	; 0x01

    *str = '\0';
    3cae:	89 81       	ldd	r24, Y+1	; 0x01
    3cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    3cb2:	fc 01       	movw	r30, r24
    3cb4:	10 82       	st	Z, r1
    // prevent crash if called with base == 1

    if(base < 2) {
    3cb6:	8d a5       	ldd	r24, Y+45	; 0x2d
    3cb8:	82 30       	cpi	r24, 0x02	; 2
    3cba:	10 f4       	brcc	.+4      	; 0x3cc0 <serPrintNumber+0x3a>
        base = 10;
    3cbc:	8a e0       	ldi	r24, 0x0A	; 10
    3cbe:	8d a7       	std	Y+45, r24	; 0x2d
    }

    do {
        unsigned long m = n;
    3cc0:	89 a5       	ldd	r24, Y+41	; 0x29
    3cc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3cc4:	ab a5       	ldd	r26, Y+43	; 0x2b
    3cc6:	bc a5       	ldd	r27, Y+44	; 0x2c
    3cc8:	8b 83       	std	Y+3, r24	; 0x03
    3cca:	9c 83       	std	Y+4, r25	; 0x04
    3ccc:	ad 83       	std	Y+5, r26	; 0x05
    3cce:	be 83       	std	Y+6, r27	; 0x06
        n /= base;
    3cd0:	8d a5       	ldd	r24, Y+45	; 0x2d
    3cd2:	28 2f       	mov	r18, r24
    3cd4:	30 e0       	ldi	r19, 0x00	; 0
    3cd6:	40 e0       	ldi	r20, 0x00	; 0
    3cd8:	50 e0       	ldi	r21, 0x00	; 0
    3cda:	89 a5       	ldd	r24, Y+41	; 0x29
    3cdc:	9a a5       	ldd	r25, Y+42	; 0x2a
    3cde:	ab a5       	ldd	r26, Y+43	; 0x2b
    3ce0:	bc a5       	ldd	r27, Y+44	; 0x2c
    3ce2:	bc 01       	movw	r22, r24
    3ce4:	cd 01       	movw	r24, r26
    3ce6:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <__udivmodsi4>
    3cea:	da 01       	movw	r26, r20
    3cec:	c9 01       	movw	r24, r18
    3cee:	89 a7       	std	Y+41, r24	; 0x29
    3cf0:	9a a7       	std	Y+42, r25	; 0x2a
    3cf2:	ab a7       	std	Y+43, r26	; 0x2b
    3cf4:	bc a7       	std	Y+44, r27	; 0x2c
        char c = m - base * n;
    3cf6:	9b 81       	ldd	r25, Y+3	; 0x03
    3cf8:	29 a5       	ldd	r18, Y+41	; 0x29
    3cfa:	8d a5       	ldd	r24, Y+45	; 0x2d
    3cfc:	28 9f       	mul	r18, r24
    3cfe:	80 2d       	mov	r24, r0
    3d00:	11 24       	eor	r1, r1
    3d02:	f9 2f       	mov	r31, r25
    3d04:	f8 1b       	sub	r31, r24
    3d06:	8f 2f       	mov	r24, r31
    3d08:	8f 83       	std	Y+7, r24	; 0x07
        *--str = (c < 10 ? c + '0' : c + 'A' - 10);
    3d0a:	89 81       	ldd	r24, Y+1	; 0x01
    3d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d0e:	01 97       	sbiw	r24, 0x01	; 1
    3d10:	9a 83       	std	Y+2, r25	; 0x02
    3d12:	89 83       	std	Y+1, r24	; 0x01
    3d14:	8f 81       	ldd	r24, Y+7	; 0x07
    3d16:	8a 30       	cpi	r24, 0x0A	; 10
    3d18:	20 f4       	brcc	.+8      	; 0x3d22 <serPrintNumber+0x9c>
    3d1a:	8f 81       	ldd	r24, Y+7	; 0x07
    3d1c:	20 e3       	ldi	r18, 0x30	; 48
    3d1e:	28 0f       	add	r18, r24
    3d20:	03 c0       	rjmp	.+6      	; 0x3d28 <serPrintNumber+0xa2>
    3d22:	8f 81       	ldd	r24, Y+7	; 0x07
    3d24:	27 e3       	ldi	r18, 0x37	; 55
    3d26:	28 0f       	add	r18, r24
    3d28:	89 81       	ldd	r24, Y+1	; 0x01
    3d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d2c:	fc 01       	movw	r30, r24
    3d2e:	20 83       	st	Z, r18
    } while (0 != n);
    3d30:	89 a5       	ldd	r24, Y+41	; 0x29
    3d32:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d34:	ab a5       	ldd	r26, Y+43	; 0x2b
    3d36:	bc a5       	ldd	r27, Y+44	; 0x2c
    3d38:	89 2b       	or	r24, r25
    3d3a:	8a 2b       	or	r24, r26
    3d3c:	8b 2b       	or	r24, r27
    3d3e:	09 f0       	breq	.+2      	; 0x3d42 <serPrintNumber+0xbc>
    3d40:	bf cf       	rjmp	.-130    	; 0x3cc0 <serPrintNumber+0x3a>
}
    3d42:	00 00       	nop
    3d44:	ad 96       	adiw	r28, 0x2d	; 45
    3d46:	0f b6       	in	r0, 0x3f	; 63
    3d48:	f8 94       	cli
    3d4a:	de bf       	out	0x3e, r29	; 62
    3d4c:	0f be       	out	0x3f, r0	; 63
    3d4e:	cd bf       	out	0x3d, r28	; 61
    3d50:	df 91       	pop	r29
    3d52:	cf 91       	pop	r28
    3d54:	08 95       	ret

00003d56 <serPrintHex>:

void serPrintHex(unsigned long n) {
    3d56:	cf 93       	push	r28
    3d58:	df 93       	push	r29
    3d5a:	00 d0       	rcall	.+0      	; 0x3d5c <serPrintHex+0x6>
    3d5c:	00 d0       	rcall	.+0      	; 0x3d5e <serPrintHex+0x8>
    3d5e:	cd b7       	in	r28, 0x3d	; 61
    3d60:	de b7       	in	r29, 0x3e	; 62
    3d62:	69 83       	std	Y+1, r22	; 0x01
    3d64:	7a 83       	std	Y+2, r23	; 0x02
    3d66:	8b 83       	std	Y+3, r24	; 0x03
    3d68:	9c 83       	std	Y+4, r25	; 0x04
    serPrintLnString_P(_strPrefixHex);
    3d6a:	86 ee       	ldi	r24, 0xE6	; 230
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <serPrintLnString_P>
    serPrintNumber(n, SERIAL_STR_HEX);
    3d72:	89 81       	ldd	r24, Y+1	; 0x01
    3d74:	9a 81       	ldd	r25, Y+2	; 0x02
    3d76:	ab 81       	ldd	r26, Y+3	; 0x03
    3d78:	bc 81       	ldd	r27, Y+4	; 0x04
    3d7a:	40 e1       	ldi	r20, 0x10	; 16
    3d7c:	bc 01       	movw	r22, r24
    3d7e:	cd 01       	movw	r24, r26
    3d80:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <serPrintNumber>
}
    3d84:	00 00       	nop
    3d86:	0f 90       	pop	r0
    3d88:	0f 90       	pop	r0
    3d8a:	0f 90       	pop	r0
    3d8c:	0f 90       	pop	r0
    3d8e:	df 91       	pop	r29
    3d90:	cf 91       	pop	r28
    3d92:	08 95       	ret

00003d94 <serPrintDec>:

void serPrintDec(unsigned long n) {
    3d94:	cf 93       	push	r28
    3d96:	df 93       	push	r29
    3d98:	00 d0       	rcall	.+0      	; 0x3d9a <serPrintDec+0x6>
    3d9a:	00 d0       	rcall	.+0      	; 0x3d9c <serPrintDec+0x8>
    3d9c:	cd b7       	in	r28, 0x3d	; 61
    3d9e:	de b7       	in	r29, 0x3e	; 62
    3da0:	69 83       	std	Y+1, r22	; 0x01
    3da2:	7a 83       	std	Y+2, r23	; 0x02
    3da4:	8b 83       	std	Y+3, r24	; 0x03
    3da6:	9c 83       	std	Y+4, r25	; 0x04
    serPrintNumber(n, SERIAL_STR_DEC);
    3da8:	89 81       	ldd	r24, Y+1	; 0x01
    3daa:	9a 81       	ldd	r25, Y+2	; 0x02
    3dac:	ab 81       	ldd	r26, Y+3	; 0x03
    3dae:	bc 81       	ldd	r27, Y+4	; 0x04
    3db0:	4a e0       	ldi	r20, 0x0A	; 10
    3db2:	bc 01       	movw	r22, r24
    3db4:	cd 01       	movw	r24, r26
    3db6:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <serPrintNumber>
}
    3dba:	00 00       	nop
    3dbc:	0f 90       	pop	r0
    3dbe:	0f 90       	pop	r0
    3dc0:	0f 90       	pop	r0
    3dc2:	0f 90       	pop	r0
    3dc4:	df 91       	pop	r29
    3dc6:	cf 91       	pop	r28
    3dc8:	08 95       	ret

00003dca <serPrintOct>:

void serPrintOct(unsigned long n) {
    3dca:	cf 93       	push	r28
    3dcc:	df 93       	push	r29
    3dce:	00 d0       	rcall	.+0      	; 0x3dd0 <serPrintOct+0x6>
    3dd0:	00 d0       	rcall	.+0      	; 0x3dd2 <serPrintOct+0x8>
    3dd2:	cd b7       	in	r28, 0x3d	; 61
    3dd4:	de b7       	in	r29, 0x3e	; 62
    3dd6:	69 83       	std	Y+1, r22	; 0x01
    3dd8:	7a 83       	std	Y+2, r23	; 0x02
    3dda:	8b 83       	std	Y+3, r24	; 0x03
    3ddc:	9c 83       	std	Y+4, r25	; 0x04
    serPrintLnString_P(_strPrefixHex);
    3dde:	86 ee       	ldi	r24, 0xE6	; 230
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <serPrintLnString_P>
    serPrintNumber(n, SERIAL_STR_HEX);
    3de6:	89 81       	ldd	r24, Y+1	; 0x01
    3de8:	9a 81       	ldd	r25, Y+2	; 0x02
    3dea:	ab 81       	ldd	r26, Y+3	; 0x03
    3dec:	bc 81       	ldd	r27, Y+4	; 0x04
    3dee:	40 e1       	ldi	r20, 0x10	; 16
    3df0:	bc 01       	movw	r22, r24
    3df2:	cd 01       	movw	r24, r26
    3df4:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <serPrintNumber>
}
    3df8:	00 00       	nop
    3dfa:	0f 90       	pop	r0
    3dfc:	0f 90       	pop	r0
    3dfe:	0f 90       	pop	r0
    3e00:	0f 90       	pop	r0
    3e02:	df 91       	pop	r29
    3e04:	cf 91       	pop	r28
    3e06:	08 95       	ret

00003e08 <serSendBinary>:

void serSendBinary(const uint8_t *buf, uint8_t len) {
    3e08:	cf 93       	push	r28
    3e0a:	df 93       	push	r29
    3e0c:	00 d0       	rcall	.+0      	; 0x3e0e <serSendBinary+0x6>
    3e0e:	00 d0       	rcall	.+0      	; 0x3e10 <serSendBinary+0x8>
    3e10:	1f 92       	push	r1
    3e12:	cd b7       	in	r28, 0x3d	; 61
    3e14:	de b7       	in	r29, 0x3e	; 62
    3e16:	9c 83       	std	Y+4, r25	; 0x04
    3e18:	8b 83       	std	Y+3, r24	; 0x03
    3e1a:	6d 83       	std	Y+5, r22	; 0x05
    for (int i = 0; i < len; i++) {
    3e1c:	1a 82       	std	Y+2, r1	; 0x02
    3e1e:	19 82       	std	Y+1, r1	; 0x01
    3e20:	0f c0       	rjmp	.+30     	; 0x3e40 <serSendBinary+0x38>
        serWriteChar((unsigned char)buf[i]);
    3e22:	89 81       	ldd	r24, Y+1	; 0x01
    3e24:	9a 81       	ldd	r25, Y+2	; 0x02
    3e26:	2b 81       	ldd	r18, Y+3	; 0x03
    3e28:	3c 81       	ldd	r19, Y+4	; 0x04
    3e2a:	82 0f       	add	r24, r18
    3e2c:	93 1f       	adc	r25, r19
    3e2e:	fc 01       	movw	r30, r24
    3e30:	80 81       	ld	r24, Z
    3e32:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <serWriteChar>
    serPrintLnString_P(_strPrefixHex);
    serPrintNumber(n, SERIAL_STR_HEX);
}

void serSendBinary(const uint8_t *buf, uint8_t len) {
    for (int i = 0; i < len; i++) {
    3e36:	89 81       	ldd	r24, Y+1	; 0x01
    3e38:	9a 81       	ldd	r25, Y+2	; 0x02
    3e3a:	01 96       	adiw	r24, 0x01	; 1
    3e3c:	9a 83       	std	Y+2, r25	; 0x02
    3e3e:	89 83       	std	Y+1, r24	; 0x01
    3e40:	8d 81       	ldd	r24, Y+5	; 0x05
    3e42:	28 2f       	mov	r18, r24
    3e44:	30 e0       	ldi	r19, 0x00	; 0
    3e46:	89 81       	ldd	r24, Y+1	; 0x01
    3e48:	9a 81       	ldd	r25, Y+2	; 0x02
    3e4a:	82 17       	cp	r24, r18
    3e4c:	93 07       	cpc	r25, r19
    3e4e:	4c f3       	brlt	.-46     	; 0x3e22 <serSendBinary+0x1a>
        serWriteChar((unsigned char)buf[i]);
    }
}
    3e50:	00 00       	nop
    3e52:	0f 90       	pop	r0
    3e54:	0f 90       	pop	r0
    3e56:	0f 90       	pop	r0
    3e58:	0f 90       	pop	r0
    3e5a:	0f 90       	pop	r0
    3e5c:	df 91       	pop	r29
    3e5e:	cf 91       	pop	r28
    3e60:	08 95       	ret

00003e62 <__vector_13>:

ISR( USART_RXC_vect ) {
    3e62:	1f 92       	push	r1
    3e64:	0f 92       	push	r0
    3e66:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    3e6a:	0f 92       	push	r0
    3e6c:	11 24       	eor	r1, r1
    3e6e:	2f 93       	push	r18
    3e70:	3f 93       	push	r19
    3e72:	4f 93       	push	r20
    3e74:	5f 93       	push	r21
    3e76:	6f 93       	push	r22
    3e78:	7f 93       	push	r23
    3e7a:	8f 93       	push	r24
    3e7c:	9f 93       	push	r25
    3e7e:	af 93       	push	r26
    3e80:	bf 93       	push	r27
    3e82:	ef 93       	push	r30
    3e84:	ff 93       	push	r31
    3e86:	cf 93       	push	r28
    3e88:	df 93       	push	r29
    3e8a:	cd b7       	in	r28, 0x3d	; 61
    3e8c:	de b7       	in	r29, 0x3e	; 62
    irqRx();
    3e8e:	0e 94 ca 1a 	call	0x3594	; 0x3594 <irqRx>
}
    3e92:	00 00       	nop
    3e94:	df 91       	pop	r29
    3e96:	cf 91       	pop	r28
    3e98:	ff 91       	pop	r31
    3e9a:	ef 91       	pop	r30
    3e9c:	bf 91       	pop	r27
    3e9e:	af 91       	pop	r26
    3ea0:	9f 91       	pop	r25
    3ea2:	8f 91       	pop	r24
    3ea4:	7f 91       	pop	r23
    3ea6:	6f 91       	pop	r22
    3ea8:	5f 91       	pop	r21
    3eaa:	4f 91       	pop	r20
    3eac:	3f 91       	pop	r19
    3eae:	2f 91       	pop	r18
    3eb0:	0f 90       	pop	r0
    3eb2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    3eb6:	0f 90       	pop	r0
    3eb8:	1f 90       	pop	r1
    3eba:	18 95       	reti

00003ebc <__vector_14>:

ISR( USART_UDRE_vect ) {
    3ebc:	1f 92       	push	r1
    3ebe:	0f 92       	push	r0
    3ec0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    3ec4:	0f 92       	push	r0
    3ec6:	11 24       	eor	r1, r1
    3ec8:	2f 93       	push	r18
    3eca:	3f 93       	push	r19
    3ecc:	4f 93       	push	r20
    3ece:	5f 93       	push	r21
    3ed0:	6f 93       	push	r22
    3ed2:	7f 93       	push	r23
    3ed4:	8f 93       	push	r24
    3ed6:	9f 93       	push	r25
    3ed8:	af 93       	push	r26
    3eda:	bf 93       	push	r27
    3edc:	ef 93       	push	r30
    3ede:	ff 93       	push	r31
    3ee0:	cf 93       	push	r28
    3ee2:	df 93       	push	r29
    3ee4:	cd b7       	in	r28, 0x3d	; 61
    3ee6:	de b7       	in	r29, 0x3e	; 62
    irqTx();
    3ee8:	0e 94 93 1a 	call	0x3526	; 0x3526 <irqTx>
    3eec:	00 00       	nop
    3eee:	df 91       	pop	r29
    3ef0:	cf 91       	pop	r28
    3ef2:	ff 91       	pop	r31
    3ef4:	ef 91       	pop	r30
    3ef6:	bf 91       	pop	r27
    3ef8:	af 91       	pop	r26
    3efa:	9f 91       	pop	r25
    3efc:	8f 91       	pop	r24
    3efe:	7f 91       	pop	r23
    3f00:	6f 91       	pop	r22
    3f02:	5f 91       	pop	r21
    3f04:	4f 91       	pop	r20
    3f06:	3f 91       	pop	r19
    3f08:	2f 91       	pop	r18
    3f0a:	0f 90       	pop	r0
    3f0c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    3f10:	0f 90       	pop	r0
    3f12:	1f 90       	pop	r1
    3f14:	18 95       	reti

00003f16 <settingsInit>:
    , (RgbColor8_t){.r = 0xFF, .g = 0xFF, .b = 0x00}
    //};
};
#endif

void settingsInit(void) {
    3f16:	cf 93       	push	r28
    3f18:	df 93       	push	r29
    3f1a:	cd b7       	in	r28, 0x3d	; 61
    3f1c:	de b7       	in	r29, 0x3e	; 62
    if (strncmp(_RAMsettings.magic, KMCD_MAGIC, KMCD_MAGIC_LENGTH) != 0) {
        memcpy_P(&_RAMsettings, &_PROGMEMsettings, sizeof(_RAMsettings));
        eeprom_write_block(&_RAMsettings, &_EEPROMsettings, sizeof(_EEPROMsettings));
    }
#else
    _RAMsettings.availableColors = KMCD_MAX_COLOR_MODELS;
    3f1e:	80 e1       	ldi	r24, 0x10	; 16
    3f20:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <_RAMsettings+0x14>
    _RAMsettings.blackReference = (RgbColor16_t){.r = 0x00D4, .g = 0x00B8, .b = 0x00D2};
    3f24:	86 e0       	ldi	r24, 0x06	; 6
    3f26:	eb e0       	ldi	r30, 0x0B	; 11
    3f28:	f1 e0       	ldi	r31, 0x01	; 1
    3f2a:	a3 e9       	ldi	r26, 0x93	; 147
    3f2c:	b1 e0       	ldi	r27, 0x01	; 1
    3f2e:	01 90       	ld	r0, Z+
    3f30:	0d 92       	st	X+, r0
    3f32:	8a 95       	dec	r24
    3f34:	e1 f7       	brne	.-8      	; 0x3f2e <settingsInit+0x18>
    _RAMsettings.whiteReference = (RgbColor16_t){.r = 0x057B, .g = 0x056E, .b = 0x0693};
    3f36:	86 e0       	ldi	r24, 0x06	; 6
    3f38:	e1 e1       	ldi	r30, 0x11	; 17
    3f3a:	f1 e0       	ldi	r31, 0x01	; 1
    3f3c:	a9 e9       	ldi	r26, 0x99	; 153
    3f3e:	b1 e0       	ldi	r27, 0x01	; 1
    3f40:	01 90       	ld	r0, Z+
    3f42:	0d 92       	st	X+, r0
    3f44:	8a 95       	dec	r24
    3f46:	e1 f7       	brne	.-8      	; 0x3f40 <settingsInit+0x2a>
    _RAMsettings.colorModels[0] = (RgbColor8_t){.r = 0xFF, .g = 0xFF, .b = 0xFF}; // white
    3f48:	8f ef       	ldi	r24, 0xFF	; 255
    3f4a:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <_RAMsettings+0x15>
    3f4e:	8f ef       	ldi	r24, 0xFF	; 255
    3f50:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <_RAMsettings+0x16>
    3f54:	8f ef       	ldi	r24, 0xFF	; 255
    3f56:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <_RAMsettings+0x17>
    _RAMsettings.colorModels[1] = (RgbColor8_t){.r = 0x00, .g = 0x00, .b = 0x00}; // black
    3f5a:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <_RAMsettings+0x18>
    3f5e:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <_RAMsettings+0x19>
    3f62:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <_RAMsettings+0x1a>
    _RAMsettings.colorModels[2] = (RgbColor8_t){.r = 0x40, .g = 0x60, .b = 0xA0}; // blue
    3f66:	80 e4       	ldi	r24, 0x40	; 64
    3f68:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <_RAMsettings+0x1b>
    3f6c:	80 e6       	ldi	r24, 0x60	; 96
    3f6e:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <_RAMsettings+0x1c>
    3f72:	80 ea       	ldi	r24, 0xA0	; 160
    3f74:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <_RAMsettings+0x1d>
    _RAMsettings.colorModels[3] = (RgbColor8_t){.r = 0x40, .g = 0x90, .b = 0x50}; // green
    3f78:	80 e4       	ldi	r24, 0x40	; 64
    3f7a:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <_RAMsettings+0x1e>
    3f7e:	80 e9       	ldi	r24, 0x90	; 144
    3f80:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <_RAMsettings+0x1f>
    3f84:	80 e5       	ldi	r24, 0x50	; 80
    3f86:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_RAMsettings+0x20>
    _RAMsettings.colorModels[4] = (RgbColor8_t){.r = 0xA0, .g = 0x30, .b = 0x30}; // red
    3f8a:	80 ea       	ldi	r24, 0xA0	; 160
    3f8c:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <_RAMsettings+0x21>
    3f90:	80 e3       	ldi	r24, 0x30	; 48
    3f92:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <_RAMsettings+0x22>
    3f96:	80 e3       	ldi	r24, 0x30	; 48
    3f98:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_RAMsettings+0x23>
    _RAMsettings.colorModels[5] = (RgbColor8_t){.r = 0xFF, .g = 0xFF, .b = 0x50}; // yellow
    3f9c:	8f ef       	ldi	r24, 0xFF	; 255
    3f9e:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <_RAMsettings+0x24>
    3fa2:	8f ef       	ldi	r24, 0xFF	; 255
    3fa4:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <_RAMsettings+0x25>
    3fa8:	80 e5       	ldi	r24, 0x50	; 80
    3faa:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <_RAMsettings+0x26>

    //memcpy_P(&_RAMsettings, &_PROGMEMsettings, sizeof(_RAMsettings));
#endif
}
    3fae:	00 00       	nop
    3fb0:	df 91       	pop	r29
    3fb2:	cf 91       	pop	r28
    3fb4:	08 95       	ret

00003fb6 <settingsGetColorModels>:

RgbColor8_t *settingsGetColorModels(void) {
    3fb6:	cf 93       	push	r28
    3fb8:	df 93       	push	r29
    3fba:	cd b7       	in	r28, 0x3d	; 61
    3fbc:	de b7       	in	r29, 0x3e	; 62
    return _RAMsettings.colorModels;
    3fbe:	80 ea       	ldi	r24, 0xA0	; 160
    3fc0:	91 e0       	ldi	r25, 0x01	; 1
}
    3fc2:	df 91       	pop	r29
    3fc4:	cf 91       	pop	r28
    3fc6:	08 95       	ret

00003fc8 <settingsGetColorModel>:

RgbColor8_t settingsGetColorModel(uint8_t colorNumber) {
    3fc8:	cf 93       	push	r28
    3fca:	df 93       	push	r29
    3fcc:	1f 92       	push	r1
    3fce:	cd b7       	in	r28, 0x3d	; 61
    3fd0:	de b7       	in	r29, 0x3e	; 62
    3fd2:	89 83       	std	Y+1, r24	; 0x01
    return _RAMsettings.colorModels[colorNumber];
    3fd4:	89 81       	ldd	r24, Y+1	; 0x01
    3fd6:	28 2f       	mov	r18, r24
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	c9 01       	movw	r24, r18
    3fdc:	88 0f       	add	r24, r24
    3fde:	99 1f       	adc	r25, r25
    3fe0:	82 0f       	add	r24, r18
    3fe2:	93 1f       	adc	r25, r19
    3fe4:	80 56       	subi	r24, 0x60	; 96
    3fe6:	9e 4f       	sbci	r25, 0xFE	; 254
    3fe8:	fc 01       	movw	r30, r24
    3fea:	80 81       	ld	r24, Z
    3fec:	91 81       	ldd	r25, Z+1	; 0x01
    3fee:	a2 81       	ldd	r26, Z+2	; 0x02
}
    3ff0:	bc 01       	movw	r22, r24
    3ff2:	8a 2f       	mov	r24, r26
    3ff4:	0f 90       	pop	r0
    3ff6:	df 91       	pop	r29
    3ff8:	cf 91       	pop	r28
    3ffa:	08 95       	ret

00003ffc <settingsGetBlackReference>:

RgbColor16_t settingsGetBlackReference(void) {
    3ffc:	af 92       	push	r10
    3ffe:	bf 92       	push	r11
    4000:	cf 92       	push	r12
    4002:	df 92       	push	r13
    4004:	ef 92       	push	r14
    4006:	ff 92       	push	r15
    4008:	0f 93       	push	r16
    400a:	1f 93       	push	r17
    400c:	cf 93       	push	r28
    400e:	df 93       	push	r29
    4010:	00 d0       	rcall	.+0      	; 0x4012 <settingsGetBlackReference+0x16>
    4012:	00 d0       	rcall	.+0      	; 0x4014 <settingsGetBlackReference+0x18>
    4014:	00 d0       	rcall	.+0      	; 0x4016 <settingsGetBlackReference+0x1a>
    4016:	cd b7       	in	r28, 0x3d	; 61
    4018:	de b7       	in	r29, 0x3e	; 62
    return _RAMsettings.blackReference;
    401a:	16 e0       	ldi	r17, 0x06	; 6
    401c:	e3 e9       	ldi	r30, 0x93	; 147
    401e:	f1 e0       	ldi	r31, 0x01	; 1
    4020:	de 01       	movw	r26, r28
    4022:	11 96       	adiw	r26, 0x01	; 1
    4024:	01 90       	ld	r0, Z+
    4026:	0d 92       	st	X+, r0
    4028:	1a 95       	dec	r17
    402a:	e1 f7       	brne	.-8      	; 0x4024 <settingsGetBlackReference+0x28>
    402c:	00 e0       	ldi	r16, 0x00	; 0
    402e:	09 81       	ldd	r16, Y+1	; 0x01
    4030:	10 e0       	ldi	r17, 0x00	; 0
    4032:	1a 81       	ldd	r17, Y+2	; 0x02
    4034:	b0 e0       	ldi	r27, 0x00	; 0
    4036:	bb 81       	ldd	r27, Y+3	; 0x03
    4038:	a0 e0       	ldi	r26, 0x00	; 0
    403a:	ac 81       	ldd	r26, Y+4	; 0x04
    403c:	f0 e0       	ldi	r31, 0x00	; 0
    403e:	fd 81       	ldd	r31, Y+5	; 0x05
    4040:	e0 e0       	ldi	r30, 0x00	; 0
    4042:	ee 81       	ldd	r30, Y+6	; 0x06
    4044:	20 2f       	mov	r18, r16
    4046:	31 2f       	mov	r19, r17
    4048:	4b 2f       	mov	r20, r27
    404a:	5a 2f       	mov	r21, r26
    404c:	6f 2f       	mov	r22, r31
    404e:	7e 2f       	mov	r23, r30
    4050:	a2 2e       	mov	r10, r18
    4052:	b3 2e       	mov	r11, r19
    4054:	c4 2e       	mov	r12, r20
    4056:	d5 2e       	mov	r13, r21
    4058:	e6 2e       	mov	r14, r22
    405a:	f7 2e       	mov	r15, r23
    405c:	08 2f       	mov	r16, r24
    405e:	19 2f       	mov	r17, r25
}
    4060:	2a 2d       	mov	r18, r10
    4062:	3b 2d       	mov	r19, r11
    4064:	4c 2d       	mov	r20, r12
    4066:	5d 2d       	mov	r21, r13
    4068:	6e 2d       	mov	r22, r14
    406a:	7f 2d       	mov	r23, r15
    406c:	80 2f       	mov	r24, r16
    406e:	91 2f       	mov	r25, r17
    4070:	26 96       	adiw	r28, 0x06	; 6
    4072:	0f b6       	in	r0, 0x3f	; 63
    4074:	f8 94       	cli
    4076:	de bf       	out	0x3e, r29	; 62
    4078:	0f be       	out	0x3f, r0	; 63
    407a:	cd bf       	out	0x3d, r28	; 61
    407c:	df 91       	pop	r29
    407e:	cf 91       	pop	r28
    4080:	1f 91       	pop	r17
    4082:	0f 91       	pop	r16
    4084:	ff 90       	pop	r15
    4086:	ef 90       	pop	r14
    4088:	df 90       	pop	r13
    408a:	cf 90       	pop	r12
    408c:	bf 90       	pop	r11
    408e:	af 90       	pop	r10
    4090:	08 95       	ret

00004092 <settingsSetBlackReference>:

void settingsSetBlackReference(RgbColor16_t blackReference) {
    4092:	cf 93       	push	r28
    4094:	df 93       	push	r29
    4096:	00 d0       	rcall	.+0      	; 0x4098 <settingsSetBlackReference+0x6>
    4098:	00 d0       	rcall	.+0      	; 0x409a <settingsSetBlackReference+0x8>
    409a:	00 d0       	rcall	.+0      	; 0x409c <settingsSetBlackReference+0xa>
    409c:	cd b7       	in	r28, 0x3d	; 61
    409e:	de b7       	in	r29, 0x3e	; 62
    40a0:	49 83       	std	Y+1, r20	; 0x01
    40a2:	5a 83       	std	Y+2, r21	; 0x02
    40a4:	6b 83       	std	Y+3, r22	; 0x03
    40a6:	7c 83       	std	Y+4, r23	; 0x04
    40a8:	8d 83       	std	Y+5, r24	; 0x05
    40aa:	9e 83       	std	Y+6, r25	; 0x06
    _RAMsettings.blackReference = blackReference;
    40ac:	26 e0       	ldi	r18, 0x06	; 6
    40ae:	ce 01       	movw	r24, r28
    40b0:	01 96       	adiw	r24, 0x01	; 1
    40b2:	fc 01       	movw	r30, r24
    40b4:	a3 e9       	ldi	r26, 0x93	; 147
    40b6:	b1 e0       	ldi	r27, 0x01	; 1
    40b8:	01 90       	ld	r0, Z+
    40ba:	0d 92       	st	X+, r0
    40bc:	2a 95       	dec	r18
    40be:	e1 f7       	brne	.-8      	; 0x40b8 <settingsSetBlackReference+0x26>
}
    40c0:	00 00       	nop
    40c2:	26 96       	adiw	r28, 0x06	; 6
    40c4:	0f b6       	in	r0, 0x3f	; 63
    40c6:	f8 94       	cli
    40c8:	de bf       	out	0x3e, r29	; 62
    40ca:	0f be       	out	0x3f, r0	; 63
    40cc:	cd bf       	out	0x3d, r28	; 61
    40ce:	df 91       	pop	r29
    40d0:	cf 91       	pop	r28
    40d2:	08 95       	ret

000040d4 <settingsGetWhiteReference>:

RgbColor16_t settingsGetWhiteReference(void) {
    40d4:	af 92       	push	r10
    40d6:	bf 92       	push	r11
    40d8:	cf 92       	push	r12
    40da:	df 92       	push	r13
    40dc:	ef 92       	push	r14
    40de:	ff 92       	push	r15
    40e0:	0f 93       	push	r16
    40e2:	1f 93       	push	r17
    40e4:	cf 93       	push	r28
    40e6:	df 93       	push	r29
    40e8:	00 d0       	rcall	.+0      	; 0x40ea <settingsGetWhiteReference+0x16>
    40ea:	00 d0       	rcall	.+0      	; 0x40ec <settingsGetWhiteReference+0x18>
    40ec:	00 d0       	rcall	.+0      	; 0x40ee <settingsGetWhiteReference+0x1a>
    40ee:	cd b7       	in	r28, 0x3d	; 61
    40f0:	de b7       	in	r29, 0x3e	; 62
    return _RAMsettings.whiteReference;
    40f2:	16 e0       	ldi	r17, 0x06	; 6
    40f4:	e9 e9       	ldi	r30, 0x99	; 153
    40f6:	f1 e0       	ldi	r31, 0x01	; 1
    40f8:	de 01       	movw	r26, r28
    40fa:	11 96       	adiw	r26, 0x01	; 1
    40fc:	01 90       	ld	r0, Z+
    40fe:	0d 92       	st	X+, r0
    4100:	1a 95       	dec	r17
    4102:	e1 f7       	brne	.-8      	; 0x40fc <settingsGetWhiteReference+0x28>
    4104:	00 e0       	ldi	r16, 0x00	; 0
    4106:	09 81       	ldd	r16, Y+1	; 0x01
    4108:	10 e0       	ldi	r17, 0x00	; 0
    410a:	1a 81       	ldd	r17, Y+2	; 0x02
    410c:	b0 e0       	ldi	r27, 0x00	; 0
    410e:	bb 81       	ldd	r27, Y+3	; 0x03
    4110:	a0 e0       	ldi	r26, 0x00	; 0
    4112:	ac 81       	ldd	r26, Y+4	; 0x04
    4114:	f0 e0       	ldi	r31, 0x00	; 0
    4116:	fd 81       	ldd	r31, Y+5	; 0x05
    4118:	e0 e0       	ldi	r30, 0x00	; 0
    411a:	ee 81       	ldd	r30, Y+6	; 0x06
    411c:	20 2f       	mov	r18, r16
    411e:	31 2f       	mov	r19, r17
    4120:	4b 2f       	mov	r20, r27
    4122:	5a 2f       	mov	r21, r26
    4124:	6f 2f       	mov	r22, r31
    4126:	7e 2f       	mov	r23, r30
    4128:	a2 2e       	mov	r10, r18
    412a:	b3 2e       	mov	r11, r19
    412c:	c4 2e       	mov	r12, r20
    412e:	d5 2e       	mov	r13, r21
    4130:	e6 2e       	mov	r14, r22
    4132:	f7 2e       	mov	r15, r23
    4134:	08 2f       	mov	r16, r24
    4136:	19 2f       	mov	r17, r25
}
    4138:	2a 2d       	mov	r18, r10
    413a:	3b 2d       	mov	r19, r11
    413c:	4c 2d       	mov	r20, r12
    413e:	5d 2d       	mov	r21, r13
    4140:	6e 2d       	mov	r22, r14
    4142:	7f 2d       	mov	r23, r15
    4144:	80 2f       	mov	r24, r16
    4146:	91 2f       	mov	r25, r17
    4148:	26 96       	adiw	r28, 0x06	; 6
    414a:	0f b6       	in	r0, 0x3f	; 63
    414c:	f8 94       	cli
    414e:	de bf       	out	0x3e, r29	; 62
    4150:	0f be       	out	0x3f, r0	; 63
    4152:	cd bf       	out	0x3d, r28	; 61
    4154:	df 91       	pop	r29
    4156:	cf 91       	pop	r28
    4158:	1f 91       	pop	r17
    415a:	0f 91       	pop	r16
    415c:	ff 90       	pop	r15
    415e:	ef 90       	pop	r14
    4160:	df 90       	pop	r13
    4162:	cf 90       	pop	r12
    4164:	bf 90       	pop	r11
    4166:	af 90       	pop	r10
    4168:	08 95       	ret

0000416a <settingsSetWhiteReference>:

void settingsSetWhiteReference(RgbColor16_t whiteReference) {
    416a:	cf 93       	push	r28
    416c:	df 93       	push	r29
    416e:	00 d0       	rcall	.+0      	; 0x4170 <settingsSetWhiteReference+0x6>
    4170:	00 d0       	rcall	.+0      	; 0x4172 <settingsSetWhiteReference+0x8>
    4172:	00 d0       	rcall	.+0      	; 0x4174 <settingsSetWhiteReference+0xa>
    4174:	cd b7       	in	r28, 0x3d	; 61
    4176:	de b7       	in	r29, 0x3e	; 62
    4178:	49 83       	std	Y+1, r20	; 0x01
    417a:	5a 83       	std	Y+2, r21	; 0x02
    417c:	6b 83       	std	Y+3, r22	; 0x03
    417e:	7c 83       	std	Y+4, r23	; 0x04
    4180:	8d 83       	std	Y+5, r24	; 0x05
    4182:	9e 83       	std	Y+6, r25	; 0x06
    _RAMsettings.whiteReference = whiteReference;
    4184:	26 e0       	ldi	r18, 0x06	; 6
    4186:	ce 01       	movw	r24, r28
    4188:	01 96       	adiw	r24, 0x01	; 1
    418a:	fc 01       	movw	r30, r24
    418c:	a9 e9       	ldi	r26, 0x99	; 153
    418e:	b1 e0       	ldi	r27, 0x01	; 1
    4190:	01 90       	ld	r0, Z+
    4192:	0d 92       	st	X+, r0
    4194:	2a 95       	dec	r18
    4196:	e1 f7       	brne	.-8      	; 0x4190 <settingsSetWhiteReference+0x26>
}
    4198:	00 00       	nop
    419a:	26 96       	adiw	r28, 0x06	; 6
    419c:	0f b6       	in	r0, 0x3f	; 63
    419e:	f8 94       	cli
    41a0:	de bf       	out	0x3e, r29	; 62
    41a2:	0f be       	out	0x3f, r0	; 63
    41a4:	cd bf       	out	0x3d, r28	; 61
    41a6:	df 91       	pop	r29
    41a8:	cf 91       	pop	r28
    41aa:	08 95       	ret

000041ac <settingsGetAvailableColorModels>:

uint8_t settingsGetAvailableColorModels(void) {
    41ac:	cf 93       	push	r28
    41ae:	df 93       	push	r29
    41b0:	cd b7       	in	r28, 0x3d	; 61
    41b2:	de b7       	in	r29, 0x3e	; 62
    return _RAMsettings.availableColors;
    41b4:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <_RAMsettings+0x14>
}
    41b8:	df 91       	pop	r29
    41ba:	cf 91       	pop	r28
    41bc:	08 95       	ret

000041be <settingsStore>:

void settingsStore(void) {
    41be:	cf 93       	push	r28
    41c0:	df 93       	push	r29
    41c2:	cd b7       	in	r28, 0x3d	; 61
    41c4:	de b7       	in	r29, 0x3e	; 62
#ifndef KMCD_NO_EEPROM
    eeprom_write_block(&_RAMsettings, &_EEPROMsettings, sizeof(_EEPROMsettings));
#endif
}
    41c6:	00 00       	nop
    41c8:	df 91       	pop	r29
    41ca:	cf 91       	pop	r28
    41cc:	08 95       	ret

000041ce <swtInit>:

// "Private" functions.
void timer2SetPeriod(int32_t miliseconds);

// Implementation
void swtInit(int16_t miliseconds) {
    41ce:	cf 93       	push	r28
    41d0:	df 93       	push	r29
    41d2:	00 d0       	rcall	.+0      	; 0x41d4 <swtInit+0x6>
    41d4:	00 d0       	rcall	.+0      	; 0x41d6 <swtInit+0x8>
    41d6:	cd b7       	in	r28, 0x3d	; 61
    41d8:	de b7       	in	r29, 0x3e	; 62
    41da:	9c 83       	std	Y+4, r25	; 0x04
    41dc:	8b 83       	std	Y+3, r24	; 0x03
	_mainInterval = miliseconds;
    41de:	8b 81       	ldd	r24, Y+3	; 0x03
    41e0:	9c 81       	ldd	r25, Y+4	; 0x04
    41e2:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <_mainInterval+0x1>
    41e6:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <_mainInterval>
	for (int i = 0; i < SWT_SIZE_OF; i++) {
    41ea:	1a 82       	std	Y+2, r1	; 0x02
    41ec:	19 82       	std	Y+1, r1	; 0x01
    41ee:	34 c0       	rjmp	.+104    	; 0x4258 <swtInit+0x8a>
		_timers[i].enabled = false;
    41f0:	29 81       	ldd	r18, Y+1	; 0x01
    41f2:	3a 81       	ldd	r19, Y+2	; 0x02
    41f4:	c9 01       	movw	r24, r18
    41f6:	88 0f       	add	r24, r24
    41f8:	99 1f       	adc	r25, r25
    41fa:	88 0f       	add	r24, r24
    41fc:	99 1f       	adc	r25, r25
    41fe:	88 0f       	add	r24, r24
    4200:	99 1f       	adc	r25, r25
    4202:	82 1b       	sub	r24, r18
    4204:	93 0b       	sbc	r25, r19
    4206:	80 53       	subi	r24, 0x30	; 48
    4208:	9e 4f       	sbci	r25, 0xFE	; 254
    420a:	fc 01       	movw	r30, r24
    420c:	10 82       	st	Z, r1
		_timers[i]._timerCallback = NULL;
    420e:	29 81       	ldd	r18, Y+1	; 0x01
    4210:	3a 81       	ldd	r19, Y+2	; 0x02
    4212:	c9 01       	movw	r24, r18
    4214:	88 0f       	add	r24, r24
    4216:	99 1f       	adc	r25, r25
    4218:	88 0f       	add	r24, r24
    421a:	99 1f       	adc	r25, r25
    421c:	88 0f       	add	r24, r24
    421e:	99 1f       	adc	r25, r25
    4220:	82 1b       	sub	r24, r18
    4222:	93 0b       	sbc	r25, r19
    4224:	8d 52       	subi	r24, 0x2D	; 45
    4226:	9e 4f       	sbci	r25, 0xFE	; 254
    4228:	fc 01       	movw	r30, r24
    422a:	11 82       	std	Z+1, r1	; 0x01
    422c:	10 82       	st	Z, r1
		_timers[i].currentValue = 0;
    422e:	29 81       	ldd	r18, Y+1	; 0x01
    4230:	3a 81       	ldd	r19, Y+2	; 0x02
    4232:	c9 01       	movw	r24, r18
    4234:	88 0f       	add	r24, r24
    4236:	99 1f       	adc	r25, r25
    4238:	88 0f       	add	r24, r24
    423a:	99 1f       	adc	r25, r25
    423c:	88 0f       	add	r24, r24
    423e:	99 1f       	adc	r25, r25
    4240:	82 1b       	sub	r24, r18
    4242:	93 0b       	sbc	r25, r19
    4244:	8f 52       	subi	r24, 0x2F	; 47
    4246:	9e 4f       	sbci	r25, 0xFE	; 254
    4248:	fc 01       	movw	r30, r24
    424a:	11 82       	std	Z+1, r1	; 0x01
    424c:	10 82       	st	Z, r1
void timer2SetPeriod(int32_t miliseconds);

// Implementation
void swtInit(int16_t miliseconds) {
	_mainInterval = miliseconds;
	for (int i = 0; i < SWT_SIZE_OF; i++) {
    424e:	89 81       	ldd	r24, Y+1	; 0x01
    4250:	9a 81       	ldd	r25, Y+2	; 0x02
    4252:	01 96       	adiw	r24, 0x01	; 1
    4254:	9a 83       	std	Y+2, r25	; 0x02
    4256:	89 83       	std	Y+1, r24	; 0x01
    4258:	89 81       	ldd	r24, Y+1	; 0x01
    425a:	9a 81       	ldd	r25, Y+2	; 0x02
    425c:	02 97       	sbiw	r24, 0x02	; 2
    425e:	44 f2       	brlt	.-112    	; 0x41f0 <swtInit+0x22>
		_timers[i].enabled = false;
		_timers[i]._timerCallback = NULL;
		_timers[i].currentValue = 0;
	}
	/// Timer2 mode 2 - CTC top value OCR2
	TCCR2 |= TCC_2_MODE_2;
    4260:	85 e4       	ldi	r24, 0x45	; 69
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	25 e4       	ldi	r18, 0x45	; 69
    4266:	30 e0       	ldi	r19, 0x00	; 0
    4268:	f9 01       	movw	r30, r18
    426a:	20 81       	ld	r18, Z
    426c:	28 60       	ori	r18, 0x08	; 8
    426e:	fc 01       	movw	r30, r24
    4270:	20 83       	st	Z, r18
	/// Timer/Counter2 Output Compare Match Interrupt Enable
	TIMSK = _BV(OCIE2);
    4272:	89 e5       	ldi	r24, 0x59	; 89
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	20 e8       	ldi	r18, 0x80	; 128
    4278:	fc 01       	movw	r30, r24
    427a:	20 83       	st	Z, r18
	// set prescaler and OCR2
	timer2SetPeriod(miliseconds);
    427c:	8b 81       	ldd	r24, Y+3	; 0x03
    427e:	9c 81       	ldd	r25, Y+4	; 0x04
    4280:	09 2e       	mov	r0, r25
    4282:	00 0c       	add	r0, r0
    4284:	aa 0b       	sbc	r26, r26
    4286:	bb 0b       	sbc	r27, r27
    4288:	bc 01       	movw	r22, r24
    428a:	cd 01       	movw	r24, r26
    428c:	0e 94 de 22 	call	0x45bc	; 0x45bc <timer2SetPeriod>
}
    4290:	00 00       	nop
    4292:	0f 90       	pop	r0
    4294:	0f 90       	pop	r0
    4296:	0f 90       	pop	r0
    4298:	0f 90       	pop	r0
    429a:	df 91       	pop	r29
    429c:	cf 91       	pop	r28
    429e:	08 95       	ret

000042a0 <swtDisable>:

void swtDisable(void) {
    42a0:	cf 93       	push	r28
    42a2:	df 93       	push	r29
    42a4:	cd b7       	in	r28, 0x3d	; 61
    42a6:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= ~(TCC2_CS_MASK);
    42a8:	85 e4       	ldi	r24, 0x45	; 69
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	25 e4       	ldi	r18, 0x45	; 69
    42ae:	30 e0       	ldi	r19, 0x00	; 0
    42b0:	f9 01       	movw	r30, r18
    42b2:	20 81       	ld	r18, Z
    42b4:	28 7f       	andi	r18, 0xF8	; 248
    42b6:	fc 01       	movw	r30, r24
    42b8:	20 83       	st	Z, r18
}
    42ba:	00 00       	nop
    42bc:	df 91       	pop	r29
    42be:	cf 91       	pop	r28
    42c0:	08 95       	ret

000042c2 <swtLoop>:

void swtLoop(void) {
    42c2:	cf 93       	push	r28
    42c4:	df 93       	push	r29
    42c6:	00 d0       	rcall	.+0      	; 0x42c8 <swtLoop+0x6>
    42c8:	00 d0       	rcall	.+0      	; 0x42ca <swtLoop+0x8>
    42ca:	cd b7       	in	r28, 0x3d	; 61
    42cc:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < SWT_SIZE_OF; i++) {
    42ce:	1a 82       	std	Y+2, r1	; 0x02
    42d0:	19 82       	std	Y+1, r1	; 0x01
    42d2:	80 c0       	rjmp	.+256    	; 0x43d4 <swtLoop+0x112>
		if (true == _timers[i].enabled && 0 == _timers[i].currentValue) {
    42d4:	29 81       	ldd	r18, Y+1	; 0x01
    42d6:	3a 81       	ldd	r19, Y+2	; 0x02
    42d8:	c9 01       	movw	r24, r18
    42da:	88 0f       	add	r24, r24
    42dc:	99 1f       	adc	r25, r25
    42de:	88 0f       	add	r24, r24
    42e0:	99 1f       	adc	r25, r25
    42e2:	88 0f       	add	r24, r24
    42e4:	99 1f       	adc	r25, r25
    42e6:	82 1b       	sub	r24, r18
    42e8:	93 0b       	sbc	r25, r19
    42ea:	80 53       	subi	r24, 0x30	; 48
    42ec:	9e 4f       	sbci	r25, 0xFE	; 254
    42ee:	fc 01       	movw	r30, r24
    42f0:	80 81       	ld	r24, Z
    42f2:	88 23       	and	r24, r24
    42f4:	09 f4       	brne	.+2      	; 0x42f8 <swtLoop+0x36>
    42f6:	69 c0       	rjmp	.+210    	; 0x43ca <swtLoop+0x108>
    42f8:	29 81       	ldd	r18, Y+1	; 0x01
    42fa:	3a 81       	ldd	r19, Y+2	; 0x02
    42fc:	c9 01       	movw	r24, r18
    42fe:	88 0f       	add	r24, r24
    4300:	99 1f       	adc	r25, r25
    4302:	88 0f       	add	r24, r24
    4304:	99 1f       	adc	r25, r25
    4306:	88 0f       	add	r24, r24
    4308:	99 1f       	adc	r25, r25
    430a:	82 1b       	sub	r24, r18
    430c:	93 0b       	sbc	r25, r19
    430e:	8f 52       	subi	r24, 0x2F	; 47
    4310:	9e 4f       	sbci	r25, 0xFE	; 254
    4312:	fc 01       	movw	r30, r24
    4314:	80 81       	ld	r24, Z
    4316:	91 81       	ldd	r25, Z+1	; 0x01
    4318:	89 2b       	or	r24, r25
    431a:	09 f0       	breq	.+2      	; 0x431e <swtLoop+0x5c>
    431c:	56 c0       	rjmp	.+172    	; 0x43ca <swtLoop+0x108>
			SwtValueType newCurrent = 0;
    431e:	1c 82       	std	Y+4, r1	; 0x04
    4320:	1b 82       	std	Y+3, r1	; 0x03
			_timers[i]._timerCallback(_timers[i].userData, &newCurrent);
    4322:	29 81       	ldd	r18, Y+1	; 0x01
    4324:	3a 81       	ldd	r19, Y+2	; 0x02
    4326:	c9 01       	movw	r24, r18
    4328:	88 0f       	add	r24, r24
    432a:	99 1f       	adc	r25, r25
    432c:	88 0f       	add	r24, r24
    432e:	99 1f       	adc	r25, r25
    4330:	88 0f       	add	r24, r24
    4332:	99 1f       	adc	r25, r25
    4334:	82 1b       	sub	r24, r18
    4336:	93 0b       	sbc	r25, r19
    4338:	8d 52       	subi	r24, 0x2D	; 45
    433a:	9e 4f       	sbci	r25, 0xFE	; 254
    433c:	fc 01       	movw	r30, r24
    433e:	40 81       	ld	r20, Z
    4340:	51 81       	ldd	r21, Z+1	; 0x01
    4342:	29 81       	ldd	r18, Y+1	; 0x01
    4344:	3a 81       	ldd	r19, Y+2	; 0x02
    4346:	c9 01       	movw	r24, r18
    4348:	88 0f       	add	r24, r24
    434a:	99 1f       	adc	r25, r25
    434c:	88 0f       	add	r24, r24
    434e:	99 1f       	adc	r25, r25
    4350:	88 0f       	add	r24, r24
    4352:	99 1f       	adc	r25, r25
    4354:	82 1b       	sub	r24, r18
    4356:	93 0b       	sbc	r25, r19
    4358:	8b 52       	subi	r24, 0x2B	; 43
    435a:	9e 4f       	sbci	r25, 0xFE	; 254
    435c:	fc 01       	movw	r30, r24
    435e:	80 81       	ld	r24, Z
    4360:	91 81       	ldd	r25, Z+1	; 0x01
    4362:	9e 01       	movw	r18, r28
    4364:	2d 5f       	subi	r18, 0xFD	; 253
    4366:	3f 4f       	sbci	r19, 0xFF	; 255
    4368:	b9 01       	movw	r22, r18
    436a:	fa 01       	movw	r30, r20
    436c:	09 95       	icall
			if (0 == newCurrent) {
    436e:	8b 81       	ldd	r24, Y+3	; 0x03
    4370:	9c 81       	ldd	r25, Y+4	; 0x04
    4372:	89 2b       	or	r24, r25
    4374:	79 f4       	brne	.+30     	; 0x4394 <swtLoop+0xd2>
				_timers[i].enabled = false;
    4376:	29 81       	ldd	r18, Y+1	; 0x01
    4378:	3a 81       	ldd	r19, Y+2	; 0x02
    437a:	c9 01       	movw	r24, r18
    437c:	88 0f       	add	r24, r24
    437e:	99 1f       	adc	r25, r25
    4380:	88 0f       	add	r24, r24
    4382:	99 1f       	adc	r25, r25
    4384:	88 0f       	add	r24, r24
    4386:	99 1f       	adc	r25, r25
    4388:	82 1b       	sub	r24, r18
    438a:	93 0b       	sbc	r25, r19
    438c:	80 53       	subi	r24, 0x30	; 48
    438e:	9e 4f       	sbci	r25, 0xFE	; 254
    4390:	fc 01       	movw	r30, r24
    4392:	10 82       	st	Z, r1
			}
			_timers[i].currentValue = newCurrent / _mainInterval;
    4394:	8b 81       	ldd	r24, Y+3	; 0x03
    4396:	9c 81       	ldd	r25, Y+4	; 0x04
    4398:	20 91 de 01 	lds	r18, 0x01DE	; 0x8001de <_mainInterval>
    439c:	30 91 df 01 	lds	r19, 0x01DF	; 0x8001df <_mainInterval+0x1>
    43a0:	b9 01       	movw	r22, r18
    43a2:	0e 94 b5 2d 	call	0x5b6a	; 0x5b6a <__udivmodhi4>
    43a6:	cb 01       	movw	r24, r22
    43a8:	ac 01       	movw	r20, r24
    43aa:	29 81       	ldd	r18, Y+1	; 0x01
    43ac:	3a 81       	ldd	r19, Y+2	; 0x02
    43ae:	c9 01       	movw	r24, r18
    43b0:	88 0f       	add	r24, r24
    43b2:	99 1f       	adc	r25, r25
    43b4:	88 0f       	add	r24, r24
    43b6:	99 1f       	adc	r25, r25
    43b8:	88 0f       	add	r24, r24
    43ba:	99 1f       	adc	r25, r25
    43bc:	82 1b       	sub	r24, r18
    43be:	93 0b       	sbc	r25, r19
    43c0:	8f 52       	subi	r24, 0x2F	; 47
    43c2:	9e 4f       	sbci	r25, 0xFE	; 254
    43c4:	fc 01       	movw	r30, r24
    43c6:	51 83       	std	Z+1, r21	; 0x01
    43c8:	40 83       	st	Z, r20
void swtDisable(void) {
	TCCR2 &= ~(TCC2_CS_MASK);
}

void swtLoop(void) {
	for (int i = 0; i < SWT_SIZE_OF; i++) {
    43ca:	89 81       	ldd	r24, Y+1	; 0x01
    43cc:	9a 81       	ldd	r25, Y+2	; 0x02
    43ce:	01 96       	adiw	r24, 0x01	; 1
    43d0:	9a 83       	std	Y+2, r25	; 0x02
    43d2:	89 83       	std	Y+1, r24	; 0x01
    43d4:	89 81       	ldd	r24, Y+1	; 0x01
    43d6:	9a 81       	ldd	r25, Y+2	; 0x02
    43d8:	02 97       	sbiw	r24, 0x02	; 2
    43da:	0c f4       	brge	.+2      	; 0x43de <swtLoop+0x11c>
    43dc:	7b cf       	rjmp	.-266    	; 0x42d4 <swtLoop+0x12>
				_timers[i].enabled = false;
			}
			_timers[i].currentValue = newCurrent / _mainInterval;
		}
	}
}
    43de:	00 00       	nop
    43e0:	0f 90       	pop	r0
    43e2:	0f 90       	pop	r0
    43e4:	0f 90       	pop	r0
    43e6:	0f 90       	pop	r0
    43e8:	df 91       	pop	r29
    43ea:	cf 91       	pop	r28
    43ec:	08 95       	ret

000043ee <swtRegisterCallback>:

void swtRegisterCallback(uint8_t timerNo, void *userData, void (*callback)(void *, SwtValueType *)) {
    43ee:	cf 93       	push	r28
    43f0:	df 93       	push	r29
    43f2:	00 d0       	rcall	.+0      	; 0x43f4 <swtRegisterCallback+0x6>
    43f4:	00 d0       	rcall	.+0      	; 0x43f6 <swtRegisterCallback+0x8>
    43f6:	1f 92       	push	r1
    43f8:	cd b7       	in	r28, 0x3d	; 61
    43fa:	de b7       	in	r29, 0x3e	; 62
    43fc:	89 83       	std	Y+1, r24	; 0x01
    43fe:	7b 83       	std	Y+3, r23	; 0x03
    4400:	6a 83       	std	Y+2, r22	; 0x02
    4402:	5d 83       	std	Y+5, r21	; 0x05
    4404:	4c 83       	std	Y+4, r20	; 0x04
	_timers[timerNo].enabled = false;
    4406:	89 81       	ldd	r24, Y+1	; 0x01
    4408:	28 2f       	mov	r18, r24
    440a:	30 e0       	ldi	r19, 0x00	; 0
    440c:	c9 01       	movw	r24, r18
    440e:	88 0f       	add	r24, r24
    4410:	99 1f       	adc	r25, r25
    4412:	88 0f       	add	r24, r24
    4414:	99 1f       	adc	r25, r25
    4416:	88 0f       	add	r24, r24
    4418:	99 1f       	adc	r25, r25
    441a:	82 1b       	sub	r24, r18
    441c:	93 0b       	sbc	r25, r19
    441e:	80 53       	subi	r24, 0x30	; 48
    4420:	9e 4f       	sbci	r25, 0xFE	; 254
    4422:	fc 01       	movw	r30, r24
    4424:	10 82       	st	Z, r1
	_timers[timerNo].currentValue = 0;
    4426:	89 81       	ldd	r24, Y+1	; 0x01
    4428:	28 2f       	mov	r18, r24
    442a:	30 e0       	ldi	r19, 0x00	; 0
    442c:	c9 01       	movw	r24, r18
    442e:	88 0f       	add	r24, r24
    4430:	99 1f       	adc	r25, r25
    4432:	88 0f       	add	r24, r24
    4434:	99 1f       	adc	r25, r25
    4436:	88 0f       	add	r24, r24
    4438:	99 1f       	adc	r25, r25
    443a:	82 1b       	sub	r24, r18
    443c:	93 0b       	sbc	r25, r19
    443e:	8f 52       	subi	r24, 0x2F	; 47
    4440:	9e 4f       	sbci	r25, 0xFE	; 254
    4442:	fc 01       	movw	r30, r24
    4444:	11 82       	std	Z+1, r1	; 0x01
    4446:	10 82       	st	Z, r1
	_timers[timerNo]._timerCallback = callback;
    4448:	89 81       	ldd	r24, Y+1	; 0x01
    444a:	28 2f       	mov	r18, r24
    444c:	30 e0       	ldi	r19, 0x00	; 0
    444e:	c9 01       	movw	r24, r18
    4450:	88 0f       	add	r24, r24
    4452:	99 1f       	adc	r25, r25
    4454:	88 0f       	add	r24, r24
    4456:	99 1f       	adc	r25, r25
    4458:	88 0f       	add	r24, r24
    445a:	99 1f       	adc	r25, r25
    445c:	82 1b       	sub	r24, r18
    445e:	93 0b       	sbc	r25, r19
    4460:	8d 52       	subi	r24, 0x2D	; 45
    4462:	9e 4f       	sbci	r25, 0xFE	; 254
    4464:	2c 81       	ldd	r18, Y+4	; 0x04
    4466:	3d 81       	ldd	r19, Y+5	; 0x05
    4468:	fc 01       	movw	r30, r24
    446a:	31 83       	std	Z+1, r19	; 0x01
    446c:	20 83       	st	Z, r18
	_timers[timerNo].userData = userData;
    446e:	89 81       	ldd	r24, Y+1	; 0x01
    4470:	28 2f       	mov	r18, r24
    4472:	30 e0       	ldi	r19, 0x00	; 0
    4474:	c9 01       	movw	r24, r18
    4476:	88 0f       	add	r24, r24
    4478:	99 1f       	adc	r25, r25
    447a:	88 0f       	add	r24, r24
    447c:	99 1f       	adc	r25, r25
    447e:	88 0f       	add	r24, r24
    4480:	99 1f       	adc	r25, r25
    4482:	82 1b       	sub	r24, r18
    4484:	93 0b       	sbc	r25, r19
    4486:	8b 52       	subi	r24, 0x2B	; 43
    4488:	9e 4f       	sbci	r25, 0xFE	; 254
    448a:	2a 81       	ldd	r18, Y+2	; 0x02
    448c:	3b 81       	ldd	r19, Y+3	; 0x03
    448e:	fc 01       	movw	r30, r24
    4490:	31 83       	std	Z+1, r19	; 0x01
    4492:	20 83       	st	Z, r18
}
    4494:	00 00       	nop
    4496:	0f 90       	pop	r0
    4498:	0f 90       	pop	r0
    449a:	0f 90       	pop	r0
    449c:	0f 90       	pop	r0
    449e:	0f 90       	pop	r0
    44a0:	df 91       	pop	r29
    44a2:	cf 91       	pop	r28
    44a4:	08 95       	ret

000044a6 <swtUnregisterCallback>:

void swtUnregisterCallback(uint8_t timerNo) {
    44a6:	cf 93       	push	r28
    44a8:	df 93       	push	r29
    44aa:	1f 92       	push	r1
    44ac:	cd b7       	in	r28, 0x3d	; 61
    44ae:	de b7       	in	r29, 0x3e	; 62
    44b0:	89 83       	std	Y+1, r24	; 0x01
	_timers[timerNo].enabled = false;
    44b2:	89 81       	ldd	r24, Y+1	; 0x01
    44b4:	28 2f       	mov	r18, r24
    44b6:	30 e0       	ldi	r19, 0x00	; 0
    44b8:	c9 01       	movw	r24, r18
    44ba:	88 0f       	add	r24, r24
    44bc:	99 1f       	adc	r25, r25
    44be:	88 0f       	add	r24, r24
    44c0:	99 1f       	adc	r25, r25
    44c2:	88 0f       	add	r24, r24
    44c4:	99 1f       	adc	r25, r25
    44c6:	82 1b       	sub	r24, r18
    44c8:	93 0b       	sbc	r25, r19
    44ca:	80 53       	subi	r24, 0x30	; 48
    44cc:	9e 4f       	sbci	r25, 0xFE	; 254
    44ce:	fc 01       	movw	r30, r24
    44d0:	10 82       	st	Z, r1
	_timers[timerNo].currentValue = 0;
    44d2:	89 81       	ldd	r24, Y+1	; 0x01
    44d4:	28 2f       	mov	r18, r24
    44d6:	30 e0       	ldi	r19, 0x00	; 0
    44d8:	c9 01       	movw	r24, r18
    44da:	88 0f       	add	r24, r24
    44dc:	99 1f       	adc	r25, r25
    44de:	88 0f       	add	r24, r24
    44e0:	99 1f       	adc	r25, r25
    44e2:	88 0f       	add	r24, r24
    44e4:	99 1f       	adc	r25, r25
    44e6:	82 1b       	sub	r24, r18
    44e8:	93 0b       	sbc	r25, r19
    44ea:	8f 52       	subi	r24, 0x2F	; 47
    44ec:	9e 4f       	sbci	r25, 0xFE	; 254
    44ee:	fc 01       	movw	r30, r24
    44f0:	11 82       	std	Z+1, r1	; 0x01
    44f2:	10 82       	st	Z, r1
	_timers[timerNo]._timerCallback = NULL;
    44f4:	89 81       	ldd	r24, Y+1	; 0x01
    44f6:	28 2f       	mov	r18, r24
    44f8:	30 e0       	ldi	r19, 0x00	; 0
    44fa:	c9 01       	movw	r24, r18
    44fc:	88 0f       	add	r24, r24
    44fe:	99 1f       	adc	r25, r25
    4500:	88 0f       	add	r24, r24
    4502:	99 1f       	adc	r25, r25
    4504:	88 0f       	add	r24, r24
    4506:	99 1f       	adc	r25, r25
    4508:	82 1b       	sub	r24, r18
    450a:	93 0b       	sbc	r25, r19
    450c:	8d 52       	subi	r24, 0x2D	; 45
    450e:	9e 4f       	sbci	r25, 0xFE	; 254
    4510:	fc 01       	movw	r30, r24
    4512:	11 82       	std	Z+1, r1	; 0x01
    4514:	10 82       	st	Z, r1
	_timers[timerNo].userData = NULL;
    4516:	89 81       	ldd	r24, Y+1	; 0x01
    4518:	28 2f       	mov	r18, r24
    451a:	30 e0       	ldi	r19, 0x00	; 0
    451c:	c9 01       	movw	r24, r18
    451e:	88 0f       	add	r24, r24
    4520:	99 1f       	adc	r25, r25
    4522:	88 0f       	add	r24, r24
    4524:	99 1f       	adc	r25, r25
    4526:	88 0f       	add	r24, r24
    4528:	99 1f       	adc	r25, r25
    452a:	82 1b       	sub	r24, r18
    452c:	93 0b       	sbc	r25, r19
    452e:	8b 52       	subi	r24, 0x2B	; 43
    4530:	9e 4f       	sbci	r25, 0xFE	; 254
    4532:	fc 01       	movw	r30, r24
    4534:	11 82       	std	Z+1, r1	; 0x01
    4536:	10 82       	st	Z, r1
}
    4538:	00 00       	nop
    453a:	0f 90       	pop	r0
    453c:	df 91       	pop	r29
    453e:	cf 91       	pop	r28
    4540:	08 95       	ret

00004542 <swtStart>:

void swtStart(uint8_t timerNo, SwtValueType miliseconds) {
    4542:	cf 93       	push	r28
    4544:	df 93       	push	r29
    4546:	00 d0       	rcall	.+0      	; 0x4548 <swtStart+0x6>
    4548:	1f 92       	push	r1
    454a:	cd b7       	in	r28, 0x3d	; 61
    454c:	de b7       	in	r29, 0x3e	; 62
    454e:	89 83       	std	Y+1, r24	; 0x01
    4550:	7b 83       	std	Y+3, r23	; 0x03
    4552:	6a 83       	std	Y+2, r22	; 0x02
	_timers[timerNo].enabled = true;
    4554:	89 81       	ldd	r24, Y+1	; 0x01
    4556:	28 2f       	mov	r18, r24
    4558:	30 e0       	ldi	r19, 0x00	; 0
    455a:	c9 01       	movw	r24, r18
    455c:	88 0f       	add	r24, r24
    455e:	99 1f       	adc	r25, r25
    4560:	88 0f       	add	r24, r24
    4562:	99 1f       	adc	r25, r25
    4564:	88 0f       	add	r24, r24
    4566:	99 1f       	adc	r25, r25
    4568:	82 1b       	sub	r24, r18
    456a:	93 0b       	sbc	r25, r19
    456c:	80 53       	subi	r24, 0x30	; 48
    456e:	9e 4f       	sbci	r25, 0xFE	; 254
    4570:	21 e0       	ldi	r18, 0x01	; 1
    4572:	fc 01       	movw	r30, r24
    4574:	20 83       	st	Z, r18
	_timers[timerNo].currentValue = miliseconds / _mainInterval;
    4576:	89 81       	ldd	r24, Y+1	; 0x01
    4578:	28 2f       	mov	r18, r24
    457a:	30 e0       	ldi	r19, 0x00	; 0
    457c:	40 91 de 01 	lds	r20, 0x01DE	; 0x8001de <_mainInterval>
    4580:	50 91 df 01 	lds	r21, 0x01DF	; 0x8001df <_mainInterval+0x1>
    4584:	8a 81       	ldd	r24, Y+2	; 0x02
    4586:	9b 81       	ldd	r25, Y+3	; 0x03
    4588:	ba 01       	movw	r22, r20
    458a:	0e 94 b5 2d 	call	0x5b6a	; 0x5b6a <__udivmodhi4>
    458e:	cb 01       	movw	r24, r22
    4590:	ac 01       	movw	r20, r24
    4592:	c9 01       	movw	r24, r18
    4594:	88 0f       	add	r24, r24
    4596:	99 1f       	adc	r25, r25
    4598:	88 0f       	add	r24, r24
    459a:	99 1f       	adc	r25, r25
    459c:	88 0f       	add	r24, r24
    459e:	99 1f       	adc	r25, r25
    45a0:	82 1b       	sub	r24, r18
    45a2:	93 0b       	sbc	r25, r19
    45a4:	8f 52       	subi	r24, 0x2F	; 47
    45a6:	9e 4f       	sbci	r25, 0xFE	; 254
    45a8:	fc 01       	movw	r30, r24
    45aa:	51 83       	std	Z+1, r21	; 0x01
    45ac:	40 83       	st	Z, r20
}
    45ae:	00 00       	nop
    45b0:	0f 90       	pop	r0
    45b2:	0f 90       	pop	r0
    45b4:	0f 90       	pop	r0
    45b6:	df 91       	pop	r29
    45b8:	cf 91       	pop	r28
    45ba:	08 95       	ret

000045bc <timer2SetPeriod>:

void timer2SetPeriod(int32_t miliseconds) {
    45bc:	2f 92       	push	r2
    45be:	3f 92       	push	r3
    45c0:	4f 92       	push	r4
    45c2:	5f 92       	push	r5
    45c4:	6f 92       	push	r6
    45c6:	7f 92       	push	r7
    45c8:	8f 92       	push	r8
    45ca:	9f 92       	push	r9
    45cc:	af 92       	push	r10
    45ce:	bf 92       	push	r11
    45d0:	cf 92       	push	r12
    45d2:	df 92       	push	r13
    45d4:	ef 92       	push	r14
    45d6:	ff 92       	push	r15
    45d8:	0f 93       	push	r16
    45da:	1f 93       	push	r17
    45dc:	cf 93       	push	r28
    45de:	df 93       	push	r29
    45e0:	cd b7       	in	r28, 0x3d	; 61
    45e2:	de b7       	in	r29, 0x3e	; 62
    45e4:	65 97       	sbiw	r28, 0x15	; 21
    45e6:	0f b6       	in	r0, 0x3f	; 63
    45e8:	f8 94       	cli
    45ea:	de bf       	out	0x3e, r29	; 62
    45ec:	0f be       	out	0x3f, r0	; 63
    45ee:	cd bf       	out	0x3d, r28	; 61
    45f0:	6a 87       	std	Y+10, r22	; 0x0a
    45f2:	7b 87       	std	Y+11, r23	; 0x0b
    45f4:	8c 87       	std	Y+12, r24	; 0x0c
    45f6:	9d 87       	std	Y+13, r25	; 0x0d
	int64_t cycles = (int64_t)(F_CPU);
    45f8:	19 82       	std	Y+1, r1	; 0x01
    45fa:	80 ec       	ldi	r24, 0xC0	; 192
    45fc:	8a 83       	std	Y+2, r24	; 0x02
    45fe:	88 ea       	ldi	r24, 0xA8	; 168
    4600:	8b 83       	std	Y+3, r24	; 0x03
    4602:	1c 82       	std	Y+4, r1	; 0x04
    4604:	1d 82       	std	Y+5, r1	; 0x05
    4606:	1e 82       	std	Y+6, r1	; 0x06
    4608:	1f 82       	std	Y+7, r1	; 0x07
    460a:	18 86       	std	Y+8, r1	; 0x08
	cycles *= miliseconds;
    460c:	8a 85       	ldd	r24, Y+10	; 0x0a
    460e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4610:	ac 85       	ldd	r26, Y+12	; 0x0c
    4612:	bd 85       	ldd	r27, Y+13	; 0x0d
    4614:	1c 01       	movw	r2, r24
    4616:	2d 01       	movw	r4, r26
    4618:	bb 0f       	add	r27, r27
    461a:	88 0b       	sbc	r24, r24
    461c:	98 2f       	mov	r25, r24
    461e:	dc 01       	movw	r26, r24
    4620:	68 2e       	mov	r6, r24
    4622:	78 2e       	mov	r7, r24
    4624:	88 2e       	mov	r8, r24
    4626:	98 2e       	mov	r9, r24
    4628:	a2 2c       	mov	r10, r2
    462a:	b3 2c       	mov	r11, r3
    462c:	c4 2c       	mov	r12, r4
    462e:	d5 2c       	mov	r13, r5
    4630:	e6 2c       	mov	r14, r6
    4632:	f7 2c       	mov	r15, r7
    4634:	08 2d       	mov	r16, r8
    4636:	19 2d       	mov	r17, r9
    4638:	29 81       	ldd	r18, Y+1	; 0x01
    463a:	3a 81       	ldd	r19, Y+2	; 0x02
    463c:	4b 81       	ldd	r20, Y+3	; 0x03
    463e:	5c 81       	ldd	r21, Y+4	; 0x04
    4640:	6d 81       	ldd	r22, Y+5	; 0x05
    4642:	7e 81       	ldd	r23, Y+6	; 0x06
    4644:	8f 81       	ldd	r24, Y+7	; 0x07
    4646:	98 85       	ldd	r25, Y+8	; 0x08
    4648:	0e 94 3e 2e 	call	0x5c7c	; 0x5c7c <__muldi3>
    464c:	a2 2e       	mov	r10, r18
    464e:	b3 2e       	mov	r11, r19
    4650:	c4 2e       	mov	r12, r20
    4652:	d5 2e       	mov	r13, r21
    4654:	e6 2e       	mov	r14, r22
    4656:	f7 2e       	mov	r15, r23
    4658:	08 2f       	mov	r16, r24
    465a:	19 2f       	mov	r17, r25
    465c:	a9 82       	std	Y+1, r10	; 0x01
    465e:	ba 82       	std	Y+2, r11	; 0x02
    4660:	cb 82       	std	Y+3, r12	; 0x03
    4662:	dc 82       	std	Y+4, r13	; 0x04
    4664:	ed 82       	std	Y+5, r14	; 0x05
    4666:	fe 82       	std	Y+6, r15	; 0x06
    4668:	0f 83       	std	Y+7, r16	; 0x07
    466a:	18 87       	std	Y+8, r17	; 0x08
	cycles /= 1000ULL;
    466c:	29 80       	ldd	r2, Y+1	; 0x01
    466e:	3a 80       	ldd	r3, Y+2	; 0x02
    4670:	4b 80       	ldd	r4, Y+3	; 0x03
    4672:	5c 80       	ldd	r5, Y+4	; 0x04
    4674:	6d 80       	ldd	r6, Y+5	; 0x05
    4676:	7e 80       	ldd	r7, Y+6	; 0x06
    4678:	8f 80       	ldd	r8, Y+7	; 0x07
    467a:	98 84       	ldd	r9, Y+8	; 0x08
    467c:	0f 2e       	mov	r0, r31
    467e:	f8 ee       	ldi	r31, 0xE8	; 232
    4680:	af 2e       	mov	r10, r31
    4682:	f0 2d       	mov	r31, r0
    4684:	0f 2e       	mov	r0, r31
    4686:	f3 e0       	ldi	r31, 0x03	; 3
    4688:	bf 2e       	mov	r11, r31
    468a:	f0 2d       	mov	r31, r0
    468c:	c1 2c       	mov	r12, r1
    468e:	d1 2c       	mov	r13, r1
    4690:	e1 2c       	mov	r14, r1
    4692:	f1 2c       	mov	r15, r1
    4694:	00 e0       	ldi	r16, 0x00	; 0
    4696:	10 e0       	ldi	r17, 0x00	; 0
    4698:	22 2d       	mov	r18, r2
    469a:	33 2d       	mov	r19, r3
    469c:	44 2d       	mov	r20, r4
    469e:	55 2d       	mov	r21, r5
    46a0:	66 2d       	mov	r22, r6
    46a2:	77 2d       	mov	r23, r7
    46a4:	88 2d       	mov	r24, r8
    46a6:	99 2d       	mov	r25, r9
    46a8:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <__udivdi3>
    46ac:	a2 2e       	mov	r10, r18
    46ae:	b3 2e       	mov	r11, r19
    46b0:	c4 2e       	mov	r12, r20
    46b2:	d5 2e       	mov	r13, r21
    46b4:	e6 2e       	mov	r14, r22
    46b6:	f7 2e       	mov	r15, r23
    46b8:	08 2f       	mov	r16, r24
    46ba:	19 2f       	mov	r17, r25
    46bc:	2a 2d       	mov	r18, r10
    46be:	3b 2d       	mov	r19, r11
    46c0:	4c 2d       	mov	r20, r12
    46c2:	5d 2d       	mov	r21, r13
    46c4:	6e 2d       	mov	r22, r14
    46c6:	7f 2d       	mov	r23, r15
    46c8:	80 2f       	mov	r24, r16
    46ca:	91 2f       	mov	r25, r17
    46cc:	29 83       	std	Y+1, r18	; 0x01
    46ce:	3a 83       	std	Y+2, r19	; 0x02
    46d0:	4b 83       	std	Y+3, r20	; 0x03
    46d2:	5c 83       	std	Y+4, r21	; 0x04
    46d4:	6d 83       	std	Y+5, r22	; 0x05
    46d6:	7e 83       	std	Y+6, r23	; 0x06
    46d8:	8f 83       	std	Y+7, r24	; 0x07
    46da:	98 87       	std	Y+8, r25	; 0x08
	uint8_t timer2PrescalerSelectBits = 0;
    46dc:	19 86       	std	Y+9, r1	; 0x09
	if (cycles < TCC2_TOP) {
    46de:	a9 80       	ldd	r10, Y+1	; 0x01
    46e0:	ba 80       	ldd	r11, Y+2	; 0x02
    46e2:	cb 80       	ldd	r12, Y+3	; 0x03
    46e4:	dc 80       	ldd	r13, Y+4	; 0x04
    46e6:	ed 80       	ldd	r14, Y+5	; 0x05
    46e8:	fe 80       	ldd	r15, Y+6	; 0x06
    46ea:	0f 81       	ldd	r16, Y+7	; 0x07
    46ec:	18 85       	ldd	r17, Y+8	; 0x08
    46ee:	2a 2d       	mov	r18, r10
    46f0:	3b 2d       	mov	r19, r11
    46f2:	4c 2d       	mov	r20, r12
    46f4:	5d 2d       	mov	r21, r13
    46f6:	6e 2d       	mov	r22, r14
    46f8:	7f 2d       	mov	r23, r15
    46fa:	80 2f       	mov	r24, r16
    46fc:	91 2f       	mov	r25, r17
    46fe:	2e 3f       	cpi	r18, 0xFE	; 254
    4700:	31 05       	cpc	r19, r1
    4702:	41 05       	cpc	r20, r1
    4704:	51 05       	cpc	r21, r1
    4706:	61 05       	cpc	r22, r1
    4708:	71 05       	cpc	r23, r1
    470a:	81 05       	cpc	r24, r1
    470c:	91 05       	cpc	r25, r1
    470e:	09 f0       	breq	.+2      	; 0x4712 <timer2SetPeriod+0x156>
    4710:	1c f4       	brge	.+6      	; 0x4718 <timer2SetPeriod+0x15c>
		// no prescaler, full XTAL
		timer2PrescalerSelectBits = TCC2_PRSC_1;
    4712:	81 e0       	ldi	r24, 0x01	; 1
    4714:	89 87       	std	Y+9, r24	; 0x09
    4716:	11 c2       	rjmp	.+1058   	; 0x4b3a <timer2SetPeriod+0x57e>
		} else if ((cycles >>= 3) < TCC2_TOP) {
    4718:	29 81       	ldd	r18, Y+1	; 0x01
    471a:	3a 81       	ldd	r19, Y+2	; 0x02
    471c:	4b 81       	ldd	r20, Y+3	; 0x03
    471e:	5c 81       	ldd	r21, Y+4	; 0x04
    4720:	6d 81       	ldd	r22, Y+5	; 0x05
    4722:	7e 81       	ldd	r23, Y+6	; 0x06
    4724:	8f 81       	ldd	r24, Y+7	; 0x07
    4726:	98 85       	ldd	r25, Y+8	; 0x08
    4728:	03 e0       	ldi	r16, 0x03	; 3
    472a:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__ashrdi3>
    472e:	a2 2e       	mov	r10, r18
    4730:	b3 2e       	mov	r11, r19
    4732:	c4 2e       	mov	r12, r20
    4734:	d5 2e       	mov	r13, r21
    4736:	e6 2e       	mov	r14, r22
    4738:	f7 2e       	mov	r15, r23
    473a:	08 2f       	mov	r16, r24
    473c:	19 2f       	mov	r17, r25
    473e:	a9 82       	std	Y+1, r10	; 0x01
    4740:	ba 82       	std	Y+2, r11	; 0x02
    4742:	cb 82       	std	Y+3, r12	; 0x03
    4744:	dc 82       	std	Y+4, r13	; 0x04
    4746:	ed 82       	std	Y+5, r14	; 0x05
    4748:	fe 82       	std	Y+6, r15	; 0x06
    474a:	0f 83       	std	Y+7, r16	; 0x07
    474c:	18 87       	std	Y+8, r17	; 0x08
    474e:	a9 80       	ldd	r10, Y+1	; 0x01
    4750:	ba 80       	ldd	r11, Y+2	; 0x02
    4752:	cb 80       	ldd	r12, Y+3	; 0x03
    4754:	dc 80       	ldd	r13, Y+4	; 0x04
    4756:	ed 80       	ldd	r14, Y+5	; 0x05
    4758:	fe 80       	ldd	r15, Y+6	; 0x06
    475a:	0f 81       	ldd	r16, Y+7	; 0x07
    475c:	18 85       	ldd	r17, Y+8	; 0x08
    475e:	2a 2d       	mov	r18, r10
    4760:	3b 2d       	mov	r19, r11
    4762:	4c 2d       	mov	r20, r12
    4764:	5d 2d       	mov	r21, r13
    4766:	6e 2d       	mov	r22, r14
    4768:	7f 2d       	mov	r23, r15
    476a:	80 2f       	mov	r24, r16
    476c:	91 2f       	mov	r25, r17
    476e:	2e 3f       	cpi	r18, 0xFE	; 254
    4770:	31 05       	cpc	r19, r1
    4772:	41 05       	cpc	r20, r1
    4774:	51 05       	cpc	r21, r1
    4776:	61 05       	cpc	r22, r1
    4778:	71 05       	cpc	r23, r1
    477a:	81 05       	cpc	r24, r1
    477c:	91 05       	cpc	r25, r1
    477e:	09 f0       	breq	.+2      	; 0x4782 <timer2SetPeriod+0x1c6>
    4780:	1c f4       	brge	.+6      	; 0x4788 <timer2SetPeriod+0x1cc>
		// prescaler by /8
		timer2PrescalerSelectBits = TCC2_PRSC_8;
    4782:	82 e0       	ldi	r24, 0x02	; 2
    4784:	89 87       	std	Y+9, r24	; 0x09
    4786:	d9 c1       	rjmp	.+946    	; 0x4b3a <timer2SetPeriod+0x57e>
		} else if ((cycles >>= 2) < TCC2_TOP) {
    4788:	29 81       	ldd	r18, Y+1	; 0x01
    478a:	3a 81       	ldd	r19, Y+2	; 0x02
    478c:	4b 81       	ldd	r20, Y+3	; 0x03
    478e:	5c 81       	ldd	r21, Y+4	; 0x04
    4790:	6d 81       	ldd	r22, Y+5	; 0x05
    4792:	7e 81       	ldd	r23, Y+6	; 0x06
    4794:	8f 81       	ldd	r24, Y+7	; 0x07
    4796:	98 85       	ldd	r25, Y+8	; 0x08
    4798:	02 e0       	ldi	r16, 0x02	; 2
    479a:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__ashrdi3>
    479e:	a2 2e       	mov	r10, r18
    47a0:	b3 2e       	mov	r11, r19
    47a2:	c4 2e       	mov	r12, r20
    47a4:	d5 2e       	mov	r13, r21
    47a6:	e6 2e       	mov	r14, r22
    47a8:	f7 2e       	mov	r15, r23
    47aa:	08 2f       	mov	r16, r24
    47ac:	19 2f       	mov	r17, r25
    47ae:	a9 82       	std	Y+1, r10	; 0x01
    47b0:	ba 82       	std	Y+2, r11	; 0x02
    47b2:	cb 82       	std	Y+3, r12	; 0x03
    47b4:	dc 82       	std	Y+4, r13	; 0x04
    47b6:	ed 82       	std	Y+5, r14	; 0x05
    47b8:	fe 82       	std	Y+6, r15	; 0x06
    47ba:	0f 83       	std	Y+7, r16	; 0x07
    47bc:	18 87       	std	Y+8, r17	; 0x08
    47be:	a9 80       	ldd	r10, Y+1	; 0x01
    47c0:	ba 80       	ldd	r11, Y+2	; 0x02
    47c2:	cb 80       	ldd	r12, Y+3	; 0x03
    47c4:	dc 80       	ldd	r13, Y+4	; 0x04
    47c6:	ed 80       	ldd	r14, Y+5	; 0x05
    47c8:	fe 80       	ldd	r15, Y+6	; 0x06
    47ca:	0f 81       	ldd	r16, Y+7	; 0x07
    47cc:	18 85       	ldd	r17, Y+8	; 0x08
    47ce:	2a 2d       	mov	r18, r10
    47d0:	3b 2d       	mov	r19, r11
    47d2:	4c 2d       	mov	r20, r12
    47d4:	5d 2d       	mov	r21, r13
    47d6:	6e 2d       	mov	r22, r14
    47d8:	7f 2d       	mov	r23, r15
    47da:	80 2f       	mov	r24, r16
    47dc:	91 2f       	mov	r25, r17
    47de:	2e 3f       	cpi	r18, 0xFE	; 254
    47e0:	31 05       	cpc	r19, r1
    47e2:	41 05       	cpc	r20, r1
    47e4:	51 05       	cpc	r21, r1
    47e6:	61 05       	cpc	r22, r1
    47e8:	71 05       	cpc	r23, r1
    47ea:	81 05       	cpc	r24, r1
    47ec:	91 05       	cpc	r25, r1
    47ee:	09 f0       	breq	.+2      	; 0x47f2 <timer2SetPeriod+0x236>
    47f0:	1c f4       	brge	.+6      	; 0x47f8 <timer2SetPeriod+0x23c>
		// prescaler by /32
		timer2PrescalerSelectBits = TCC2_PRSC_32;
    47f2:	83 e0       	ldi	r24, 0x03	; 3
    47f4:	89 87       	std	Y+9, r24	; 0x09
    47f6:	a1 c1       	rjmp	.+834    	; 0x4b3a <timer2SetPeriod+0x57e>
		} else if ((cycles >>= 1) < TCC2_TOP) {
    47f8:	29 81       	ldd	r18, Y+1	; 0x01
    47fa:	3a 81       	ldd	r19, Y+2	; 0x02
    47fc:	4b 81       	ldd	r20, Y+3	; 0x03
    47fe:	5c 81       	ldd	r21, Y+4	; 0x04
    4800:	6d 81       	ldd	r22, Y+5	; 0x05
    4802:	7e 81       	ldd	r23, Y+6	; 0x06
    4804:	8f 81       	ldd	r24, Y+7	; 0x07
    4806:	98 85       	ldd	r25, Y+8	; 0x08
    4808:	01 e0       	ldi	r16, 0x01	; 1
    480a:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__ashrdi3>
    480e:	a2 2e       	mov	r10, r18
    4810:	b3 2e       	mov	r11, r19
    4812:	c4 2e       	mov	r12, r20
    4814:	d5 2e       	mov	r13, r21
    4816:	e6 2e       	mov	r14, r22
    4818:	f7 2e       	mov	r15, r23
    481a:	08 2f       	mov	r16, r24
    481c:	19 2f       	mov	r17, r25
    481e:	a9 82       	std	Y+1, r10	; 0x01
    4820:	ba 82       	std	Y+2, r11	; 0x02
    4822:	cb 82       	std	Y+3, r12	; 0x03
    4824:	dc 82       	std	Y+4, r13	; 0x04
    4826:	ed 82       	std	Y+5, r14	; 0x05
    4828:	fe 82       	std	Y+6, r15	; 0x06
    482a:	0f 83       	std	Y+7, r16	; 0x07
    482c:	18 87       	std	Y+8, r17	; 0x08
    482e:	a9 80       	ldd	r10, Y+1	; 0x01
    4830:	ba 80       	ldd	r11, Y+2	; 0x02
    4832:	cb 80       	ldd	r12, Y+3	; 0x03
    4834:	dc 80       	ldd	r13, Y+4	; 0x04
    4836:	ed 80       	ldd	r14, Y+5	; 0x05
    4838:	fe 80       	ldd	r15, Y+6	; 0x06
    483a:	0f 81       	ldd	r16, Y+7	; 0x07
    483c:	18 85       	ldd	r17, Y+8	; 0x08
    483e:	2a 2d       	mov	r18, r10
    4840:	3b 2d       	mov	r19, r11
    4842:	4c 2d       	mov	r20, r12
    4844:	5d 2d       	mov	r21, r13
    4846:	6e 2d       	mov	r22, r14
    4848:	7f 2d       	mov	r23, r15
    484a:	80 2f       	mov	r24, r16
    484c:	91 2f       	mov	r25, r17
    484e:	2e 3f       	cpi	r18, 0xFE	; 254
    4850:	31 05       	cpc	r19, r1
    4852:	41 05       	cpc	r20, r1
    4854:	51 05       	cpc	r21, r1
    4856:	61 05       	cpc	r22, r1
    4858:	71 05       	cpc	r23, r1
    485a:	81 05       	cpc	r24, r1
    485c:	91 05       	cpc	r25, r1
    485e:	09 f0       	breq	.+2      	; 0x4862 <timer2SetPeriod+0x2a6>
    4860:	1c f4       	brge	.+6      	; 0x4868 <timer2SetPeriod+0x2ac>
		// prescaler by /64
		timer2PrescalerSelectBits = TCC2_PRSC_64;
    4862:	84 e0       	ldi	r24, 0x04	; 4
    4864:	89 87       	std	Y+9, r24	; 0x09
    4866:	69 c1       	rjmp	.+722    	; 0x4b3a <timer2SetPeriod+0x57e>
		} else if ((cycles >>= 1) < TCC2_TOP) {
    4868:	29 81       	ldd	r18, Y+1	; 0x01
    486a:	3a 81       	ldd	r19, Y+2	; 0x02
    486c:	4b 81       	ldd	r20, Y+3	; 0x03
    486e:	5c 81       	ldd	r21, Y+4	; 0x04
    4870:	6d 81       	ldd	r22, Y+5	; 0x05
    4872:	7e 81       	ldd	r23, Y+6	; 0x06
    4874:	8f 81       	ldd	r24, Y+7	; 0x07
    4876:	98 85       	ldd	r25, Y+8	; 0x08
    4878:	01 e0       	ldi	r16, 0x01	; 1
    487a:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__ashrdi3>
    487e:	a2 2e       	mov	r10, r18
    4880:	b3 2e       	mov	r11, r19
    4882:	c4 2e       	mov	r12, r20
    4884:	d5 2e       	mov	r13, r21
    4886:	e6 2e       	mov	r14, r22
    4888:	f7 2e       	mov	r15, r23
    488a:	08 2f       	mov	r16, r24
    488c:	19 2f       	mov	r17, r25
    488e:	a9 82       	std	Y+1, r10	; 0x01
    4890:	ba 82       	std	Y+2, r11	; 0x02
    4892:	cb 82       	std	Y+3, r12	; 0x03
    4894:	dc 82       	std	Y+4, r13	; 0x04
    4896:	ed 82       	std	Y+5, r14	; 0x05
    4898:	fe 82       	std	Y+6, r15	; 0x06
    489a:	0f 83       	std	Y+7, r16	; 0x07
    489c:	18 87       	std	Y+8, r17	; 0x08
    489e:	a9 80       	ldd	r10, Y+1	; 0x01
    48a0:	ba 80       	ldd	r11, Y+2	; 0x02
    48a2:	cb 80       	ldd	r12, Y+3	; 0x03
    48a4:	dc 80       	ldd	r13, Y+4	; 0x04
    48a6:	ed 80       	ldd	r14, Y+5	; 0x05
    48a8:	fe 80       	ldd	r15, Y+6	; 0x06
    48aa:	0f 81       	ldd	r16, Y+7	; 0x07
    48ac:	18 85       	ldd	r17, Y+8	; 0x08
    48ae:	2a 2d       	mov	r18, r10
    48b0:	3b 2d       	mov	r19, r11
    48b2:	4c 2d       	mov	r20, r12
    48b4:	5d 2d       	mov	r21, r13
    48b6:	6e 2d       	mov	r22, r14
    48b8:	7f 2d       	mov	r23, r15
    48ba:	80 2f       	mov	r24, r16
    48bc:	91 2f       	mov	r25, r17
    48be:	2e 3f       	cpi	r18, 0xFE	; 254
    48c0:	31 05       	cpc	r19, r1
    48c2:	41 05       	cpc	r20, r1
    48c4:	51 05       	cpc	r21, r1
    48c6:	61 05       	cpc	r22, r1
    48c8:	71 05       	cpc	r23, r1
    48ca:	81 05       	cpc	r24, r1
    48cc:	91 05       	cpc	r25, r1
    48ce:	09 f0       	breq	.+2      	; 0x48d2 <timer2SetPeriod+0x316>
    48d0:	1c f4       	brge	.+6      	; 0x48d8 <timer2SetPeriod+0x31c>
		// prescaler by /128
		timer2PrescalerSelectBits = TCC2_PRSC_128;
    48d2:	85 e0       	ldi	r24, 0x05	; 5
    48d4:	89 87       	std	Y+9, r24	; 0x09
    48d6:	31 c1       	rjmp	.+610    	; 0x4b3a <timer2SetPeriod+0x57e>
		} else if ((cycles >>= 1) < TCC2_TOP) {
    48d8:	29 81       	ldd	r18, Y+1	; 0x01
    48da:	3a 81       	ldd	r19, Y+2	; 0x02
    48dc:	4b 81       	ldd	r20, Y+3	; 0x03
    48de:	5c 81       	ldd	r21, Y+4	; 0x04
    48e0:	6d 81       	ldd	r22, Y+5	; 0x05
    48e2:	7e 81       	ldd	r23, Y+6	; 0x06
    48e4:	8f 81       	ldd	r24, Y+7	; 0x07
    48e6:	98 85       	ldd	r25, Y+8	; 0x08
    48e8:	01 e0       	ldi	r16, 0x01	; 1
    48ea:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__ashrdi3>
    48ee:	a2 2e       	mov	r10, r18
    48f0:	b3 2e       	mov	r11, r19
    48f2:	c4 2e       	mov	r12, r20
    48f4:	d5 2e       	mov	r13, r21
    48f6:	e6 2e       	mov	r14, r22
    48f8:	f7 2e       	mov	r15, r23
    48fa:	08 2f       	mov	r16, r24
    48fc:	19 2f       	mov	r17, r25
    48fe:	a9 82       	std	Y+1, r10	; 0x01
    4900:	ba 82       	std	Y+2, r11	; 0x02
    4902:	cb 82       	std	Y+3, r12	; 0x03
    4904:	dc 82       	std	Y+4, r13	; 0x04
    4906:	ed 82       	std	Y+5, r14	; 0x05
    4908:	fe 82       	std	Y+6, r15	; 0x06
    490a:	0f 83       	std	Y+7, r16	; 0x07
    490c:	18 87       	std	Y+8, r17	; 0x08
    490e:	a9 80       	ldd	r10, Y+1	; 0x01
    4910:	ba 80       	ldd	r11, Y+2	; 0x02
    4912:	cb 80       	ldd	r12, Y+3	; 0x03
    4914:	dc 80       	ldd	r13, Y+4	; 0x04
    4916:	ed 80       	ldd	r14, Y+5	; 0x05
    4918:	fe 80       	ldd	r15, Y+6	; 0x06
    491a:	0f 81       	ldd	r16, Y+7	; 0x07
    491c:	18 85       	ldd	r17, Y+8	; 0x08
    491e:	2a 2d       	mov	r18, r10
    4920:	3b 2d       	mov	r19, r11
    4922:	4c 2d       	mov	r20, r12
    4924:	5d 2d       	mov	r21, r13
    4926:	6e 2d       	mov	r22, r14
    4928:	7f 2d       	mov	r23, r15
    492a:	80 2f       	mov	r24, r16
    492c:	91 2f       	mov	r25, r17
    492e:	2e 3f       	cpi	r18, 0xFE	; 254
    4930:	31 05       	cpc	r19, r1
    4932:	41 05       	cpc	r20, r1
    4934:	51 05       	cpc	r21, r1
    4936:	61 05       	cpc	r22, r1
    4938:	71 05       	cpc	r23, r1
    493a:	81 05       	cpc	r24, r1
    493c:	91 05       	cpc	r25, r1
    493e:	09 f0       	breq	.+2      	; 0x4942 <timer2SetPeriod+0x386>
    4940:	1c f4       	brge	.+6      	; 0x4948 <timer2SetPeriod+0x38c>
		// prescaler by /256
		timer2PrescalerSelectBits = TCC2_PRSC_256;
    4942:	86 e0       	ldi	r24, 0x06	; 6
    4944:	89 87       	std	Y+9, r24	; 0x09
    4946:	f9 c0       	rjmp	.+498    	; 0x4b3a <timer2SetPeriod+0x57e>
		} else if ((cycles >>= 2) < TCC2_TOP) {
    4948:	29 81       	ldd	r18, Y+1	; 0x01
    494a:	3a 81       	ldd	r19, Y+2	; 0x02
    494c:	4b 81       	ldd	r20, Y+3	; 0x03
    494e:	5c 81       	ldd	r21, Y+4	; 0x04
    4950:	6d 81       	ldd	r22, Y+5	; 0x05
    4952:	7e 81       	ldd	r23, Y+6	; 0x06
    4954:	8f 81       	ldd	r24, Y+7	; 0x07
    4956:	98 85       	ldd	r25, Y+8	; 0x08
    4958:	02 e0       	ldi	r16, 0x02	; 2
    495a:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__ashrdi3>
    495e:	a2 2e       	mov	r10, r18
    4960:	b3 2e       	mov	r11, r19
    4962:	c4 2e       	mov	r12, r20
    4964:	d5 2e       	mov	r13, r21
    4966:	e6 2e       	mov	r14, r22
    4968:	f7 2e       	mov	r15, r23
    496a:	08 2f       	mov	r16, r24
    496c:	19 2f       	mov	r17, r25
    496e:	a9 82       	std	Y+1, r10	; 0x01
    4970:	ba 82       	std	Y+2, r11	; 0x02
    4972:	cb 82       	std	Y+3, r12	; 0x03
    4974:	dc 82       	std	Y+4, r13	; 0x04
    4976:	ed 82       	std	Y+5, r14	; 0x05
    4978:	fe 82       	std	Y+6, r15	; 0x06
    497a:	0f 83       	std	Y+7, r16	; 0x07
    497c:	18 87       	std	Y+8, r17	; 0x08
    497e:	a9 80       	ldd	r10, Y+1	; 0x01
    4980:	ba 80       	ldd	r11, Y+2	; 0x02
    4982:	cb 80       	ldd	r12, Y+3	; 0x03
    4984:	dc 80       	ldd	r13, Y+4	; 0x04
    4986:	ed 80       	ldd	r14, Y+5	; 0x05
    4988:	fe 80       	ldd	r15, Y+6	; 0x06
    498a:	0f 81       	ldd	r16, Y+7	; 0x07
    498c:	18 85       	ldd	r17, Y+8	; 0x08
    498e:	2a 2d       	mov	r18, r10
    4990:	3b 2d       	mov	r19, r11
    4992:	4c 2d       	mov	r20, r12
    4994:	5d 2d       	mov	r21, r13
    4996:	6e 2d       	mov	r22, r14
    4998:	7f 2d       	mov	r23, r15
    499a:	80 2f       	mov	r24, r16
    499c:	91 2f       	mov	r25, r17
    499e:	2e 3f       	cpi	r18, 0xFE	; 254
    49a0:	31 05       	cpc	r19, r1
    49a2:	41 05       	cpc	r20, r1
    49a4:	51 05       	cpc	r21, r1
    49a6:	61 05       	cpc	r22, r1
    49a8:	71 05       	cpc	r23, r1
    49aa:	81 05       	cpc	r24, r1
    49ac:	91 05       	cpc	r25, r1
    49ae:	09 f0       	breq	.+2      	; 0x49b2 <timer2SetPeriod+0x3f6>
    49b0:	1c f4       	brge	.+6      	; 0x49b8 <timer2SetPeriod+0x3fc>
		// prescaler by /1024
		timer2PrescalerSelectBits = TCC2_PRSC_1024;
    49b2:	87 e0       	ldi	r24, 0x07	; 7
    49b4:	89 87       	std	Y+9, r24	; 0x09
    49b6:	c1 c0       	rjmp	.+386    	; 0x4b3a <timer2SetPeriod+0x57e>
		} else {
		// use HW prescaler / 256 & soft prescaler to achieve 24 bit limit
		timer2PrescalerSelectBits = TCC2_PRSC_256;
    49b8:	86 e0       	ldi	r24, 0x06	; 6
    49ba:	89 87       	std	Y+9, r24	; 0x09
		cycles = (int64_t)(F_CPU);	
    49bc:	19 82       	std	Y+1, r1	; 0x01
    49be:	80 ec       	ldi	r24, 0xC0	; 192
    49c0:	8a 83       	std	Y+2, r24	; 0x02
    49c2:	88 ea       	ldi	r24, 0xA8	; 168
    49c4:	8b 83       	std	Y+3, r24	; 0x03
    49c6:	1c 82       	std	Y+4, r1	; 0x04
    49c8:	1d 82       	std	Y+5, r1	; 0x05
    49ca:	1e 82       	std	Y+6, r1	; 0x06
    49cc:	1f 82       	std	Y+7, r1	; 0x07
    49ce:	18 86       	std	Y+8, r1	; 0x08
		cycles *= miliseconds;
    49d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    49d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    49d4:	ac 85       	ldd	r26, Y+12	; 0x0c
    49d6:	bd 85       	ldd	r27, Y+13	; 0x0d
    49d8:	8e 87       	std	Y+14, r24	; 0x0e
    49da:	9f 87       	std	Y+15, r25	; 0x0f
    49dc:	a8 8b       	std	Y+16, r26	; 0x10
    49de:	b9 8b       	std	Y+17, r27	; 0x11
    49e0:	bb 0f       	add	r27, r27
    49e2:	88 0b       	sbc	r24, r24
    49e4:	98 2f       	mov	r25, r24
    49e6:	dc 01       	movw	r26, r24
    49e8:	8a 8b       	std	Y+18, r24	; 0x12
    49ea:	8b 8b       	std	Y+19, r24	; 0x13
    49ec:	8c 8b       	std	Y+20, r24	; 0x14
    49ee:	8d 8b       	std	Y+21, r24	; 0x15
    49f0:	ae 84       	ldd	r10, Y+14	; 0x0e
    49f2:	bf 84       	ldd	r11, Y+15	; 0x0f
    49f4:	c8 88       	ldd	r12, Y+16	; 0x10
    49f6:	d9 88       	ldd	r13, Y+17	; 0x11
    49f8:	ea 88       	ldd	r14, Y+18	; 0x12
    49fa:	fb 88       	ldd	r15, Y+19	; 0x13
    49fc:	0c 89       	ldd	r16, Y+20	; 0x14
    49fe:	1d 89       	ldd	r17, Y+21	; 0x15
    4a00:	29 81       	ldd	r18, Y+1	; 0x01
    4a02:	3a 81       	ldd	r19, Y+2	; 0x02
    4a04:	4b 81       	ldd	r20, Y+3	; 0x03
    4a06:	5c 81       	ldd	r21, Y+4	; 0x04
    4a08:	6d 81       	ldd	r22, Y+5	; 0x05
    4a0a:	7e 81       	ldd	r23, Y+6	; 0x06
    4a0c:	8f 81       	ldd	r24, Y+7	; 0x07
    4a0e:	98 85       	ldd	r25, Y+8	; 0x08
    4a10:	0e 94 3e 2e 	call	0x5c7c	; 0x5c7c <__muldi3>
    4a14:	a2 2e       	mov	r10, r18
    4a16:	b3 2e       	mov	r11, r19
    4a18:	c4 2e       	mov	r12, r20
    4a1a:	d5 2e       	mov	r13, r21
    4a1c:	e6 2e       	mov	r14, r22
    4a1e:	f7 2e       	mov	r15, r23
    4a20:	08 2f       	mov	r16, r24
    4a22:	19 2f       	mov	r17, r25
    4a24:	a9 82       	std	Y+1, r10	; 0x01
    4a26:	ba 82       	std	Y+2, r11	; 0x02
    4a28:	cb 82       	std	Y+3, r12	; 0x03
    4a2a:	dc 82       	std	Y+4, r13	; 0x04
    4a2c:	ed 82       	std	Y+5, r14	; 0x05
    4a2e:	fe 82       	std	Y+6, r15	; 0x06
    4a30:	0f 83       	std	Y+7, r16	; 0x07
    4a32:	18 87       	std	Y+8, r17	; 0x08
		cycles /= 1000ULL;
    4a34:	29 80       	ldd	r2, Y+1	; 0x01
    4a36:	3a 80       	ldd	r3, Y+2	; 0x02
    4a38:	4b 80       	ldd	r4, Y+3	; 0x03
    4a3a:	5c 80       	ldd	r5, Y+4	; 0x04
    4a3c:	6d 80       	ldd	r6, Y+5	; 0x05
    4a3e:	7e 80       	ldd	r7, Y+6	; 0x06
    4a40:	8f 80       	ldd	r8, Y+7	; 0x07
    4a42:	98 84       	ldd	r9, Y+8	; 0x08
    4a44:	0f 2e       	mov	r0, r31
    4a46:	f8 ee       	ldi	r31, 0xE8	; 232
    4a48:	af 2e       	mov	r10, r31
    4a4a:	f0 2d       	mov	r31, r0
    4a4c:	0f 2e       	mov	r0, r31
    4a4e:	f3 e0       	ldi	r31, 0x03	; 3
    4a50:	bf 2e       	mov	r11, r31
    4a52:	f0 2d       	mov	r31, r0
    4a54:	c1 2c       	mov	r12, r1
    4a56:	d1 2c       	mov	r13, r1
    4a58:	e1 2c       	mov	r14, r1
    4a5a:	f1 2c       	mov	r15, r1
    4a5c:	00 e0       	ldi	r16, 0x00	; 0
    4a5e:	10 e0       	ldi	r17, 0x00	; 0
    4a60:	22 2d       	mov	r18, r2
    4a62:	33 2d       	mov	r19, r3
    4a64:	44 2d       	mov	r20, r4
    4a66:	55 2d       	mov	r21, r5
    4a68:	66 2d       	mov	r22, r6
    4a6a:	77 2d       	mov	r23, r7
    4a6c:	88 2d       	mov	r24, r8
    4a6e:	99 2d       	mov	r25, r9
    4a70:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <__udivdi3>
    4a74:	a2 2e       	mov	r10, r18
    4a76:	b3 2e       	mov	r11, r19
    4a78:	c4 2e       	mov	r12, r20
    4a7a:	d5 2e       	mov	r13, r21
    4a7c:	e6 2e       	mov	r14, r22
    4a7e:	f7 2e       	mov	r15, r23
    4a80:	08 2f       	mov	r16, r24
    4a82:	19 2f       	mov	r17, r25
    4a84:	2a 2d       	mov	r18, r10
    4a86:	3b 2d       	mov	r19, r11
    4a88:	4c 2d       	mov	r20, r12
    4a8a:	5d 2d       	mov	r21, r13
    4a8c:	6e 2d       	mov	r22, r14
    4a8e:	7f 2d       	mov	r23, r15
    4a90:	80 2f       	mov	r24, r16
    4a92:	91 2f       	mov	r25, r17
    4a94:	29 83       	std	Y+1, r18	; 0x01
    4a96:	3a 83       	std	Y+2, r19	; 0x02
    4a98:	4b 83       	std	Y+3, r20	; 0x03
    4a9a:	5c 83       	std	Y+4, r21	; 0x04
    4a9c:	6d 83       	std	Y+5, r22	; 0x05
    4a9e:	7e 83       	std	Y+6, r23	; 0x06
    4aa0:	8f 83       	std	Y+7, r24	; 0x07
    4aa2:	98 87       	std	Y+8, r25	; 0x08
		cycles >>= 8;
    4aa4:	29 81       	ldd	r18, Y+1	; 0x01
    4aa6:	3a 81       	ldd	r19, Y+2	; 0x02
    4aa8:	4b 81       	ldd	r20, Y+3	; 0x03
    4aaa:	5c 81       	ldd	r21, Y+4	; 0x04
    4aac:	6d 81       	ldd	r22, Y+5	; 0x05
    4aae:	7e 81       	ldd	r23, Y+6	; 0x06
    4ab0:	8f 81       	ldd	r24, Y+7	; 0x07
    4ab2:	98 85       	ldd	r25, Y+8	; 0x08
    4ab4:	08 e0       	ldi	r16, 0x08	; 8
    4ab6:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__ashrdi3>
    4aba:	a2 2e       	mov	r10, r18
    4abc:	b3 2e       	mov	r11, r19
    4abe:	c4 2e       	mov	r12, r20
    4ac0:	d5 2e       	mov	r13, r21
    4ac2:	e6 2e       	mov	r14, r22
    4ac4:	f7 2e       	mov	r15, r23
    4ac6:	08 2f       	mov	r16, r24
    4ac8:	19 2f       	mov	r17, r25
    4aca:	a9 82       	std	Y+1, r10	; 0x01
    4acc:	ba 82       	std	Y+2, r11	; 0x02
    4ace:	cb 82       	std	Y+3, r12	; 0x03
    4ad0:	dc 82       	std	Y+4, r13	; 0x04
    4ad2:	ed 82       	std	Y+5, r14	; 0x05
    4ad4:	fe 82       	std	Y+6, r15	; 0x06
    4ad6:	0f 83       	std	Y+7, r16	; 0x07
    4ad8:	18 87       	std	Y+8, r17	; 0x08
		_softPrescallerInit = (cycles >> 8) & 0xFFFF;
    4ada:	29 81       	ldd	r18, Y+1	; 0x01
    4adc:	3a 81       	ldd	r19, Y+2	; 0x02
    4ade:	4b 81       	ldd	r20, Y+3	; 0x03
    4ae0:	5c 81       	ldd	r21, Y+4	; 0x04
    4ae2:	6d 81       	ldd	r22, Y+5	; 0x05
    4ae4:	7e 81       	ldd	r23, Y+6	; 0x06
    4ae6:	8f 81       	ldd	r24, Y+7	; 0x07
    4ae8:	98 85       	ldd	r25, Y+8	; 0x08
    4aea:	08 e0       	ldi	r16, 0x08	; 8
    4aec:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__ashrdi3>
    4af0:	a2 2e       	mov	r10, r18
    4af2:	b3 2e       	mov	r11, r19
    4af4:	c4 2e       	mov	r12, r20
    4af6:	d5 2e       	mov	r13, r21
    4af8:	e6 2e       	mov	r14, r22
    4afa:	f7 2e       	mov	r15, r23
    4afc:	08 2f       	mov	r16, r24
    4afe:	19 2f       	mov	r17, r25
    4b00:	c5 01       	movw	r24, r10
    4b02:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <_softPrescallerInit+0x1>
    4b06:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <_softPrescallerInit>
		cycles &= 0xFF;
    4b0a:	89 81       	ldd	r24, Y+1	; 0x01
    4b0c:	8f 7f       	andi	r24, 0xFF	; 255
    4b0e:	89 83       	std	Y+1, r24	; 0x01
    4b10:	8a 81       	ldd	r24, Y+2	; 0x02
    4b12:	80 70       	andi	r24, 0x00	; 0
    4b14:	8a 83       	std	Y+2, r24	; 0x02
    4b16:	8b 81       	ldd	r24, Y+3	; 0x03
    4b18:	80 70       	andi	r24, 0x00	; 0
    4b1a:	8b 83       	std	Y+3, r24	; 0x03
    4b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    4b1e:	80 70       	andi	r24, 0x00	; 0
    4b20:	8c 83       	std	Y+4, r24	; 0x04
    4b22:	8d 81       	ldd	r24, Y+5	; 0x05
    4b24:	80 70       	andi	r24, 0x00	; 0
    4b26:	8d 83       	std	Y+5, r24	; 0x05
    4b28:	8e 81       	ldd	r24, Y+6	; 0x06
    4b2a:	80 70       	andi	r24, 0x00	; 0
    4b2c:	8e 83       	std	Y+6, r24	; 0x06
    4b2e:	8f 81       	ldd	r24, Y+7	; 0x07
    4b30:	80 70       	andi	r24, 0x00	; 0
    4b32:	8f 83       	std	Y+7, r24	; 0x07
    4b34:	88 85       	ldd	r24, Y+8	; 0x08
    4b36:	80 70       	andi	r24, 0x00	; 0
    4b38:	88 87       	std	Y+8, r24	; 0x08
		}
	OCR2 = cycles; // it should be already less than 0xFF
    4b3a:	83 e4       	ldi	r24, 0x43	; 67
    4b3c:	90 e0       	ldi	r25, 0x00	; 0
    4b3e:	29 81       	ldd	r18, Y+1	; 0x01
    4b40:	fc 01       	movw	r30, r24
    4b42:	20 83       	st	Z, r18
	TCCR2 |= timer2PrescalerSelectBits;
    4b44:	85 e4       	ldi	r24, 0x45	; 69
    4b46:	90 e0       	ldi	r25, 0x00	; 0
    4b48:	25 e4       	ldi	r18, 0x45	; 69
    4b4a:	30 e0       	ldi	r19, 0x00	; 0
    4b4c:	f9 01       	movw	r30, r18
    4b4e:	30 81       	ld	r19, Z
    4b50:	29 85       	ldd	r18, Y+9	; 0x09
    4b52:	23 2b       	or	r18, r19
    4b54:	fc 01       	movw	r30, r24
    4b56:	20 83       	st	Z, r18
	return;
    4b58:	00 00       	nop
}
    4b5a:	65 96       	adiw	r28, 0x15	; 21
    4b5c:	0f b6       	in	r0, 0x3f	; 63
    4b5e:	f8 94       	cli
    4b60:	de bf       	out	0x3e, r29	; 62
    4b62:	0f be       	out	0x3f, r0	; 63
    4b64:	cd bf       	out	0x3d, r28	; 61
    4b66:	df 91       	pop	r29
    4b68:	cf 91       	pop	r28
    4b6a:	1f 91       	pop	r17
    4b6c:	0f 91       	pop	r16
    4b6e:	ff 90       	pop	r15
    4b70:	ef 90       	pop	r14
    4b72:	df 90       	pop	r13
    4b74:	cf 90       	pop	r12
    4b76:	bf 90       	pop	r11
    4b78:	af 90       	pop	r10
    4b7a:	9f 90       	pop	r9
    4b7c:	8f 90       	pop	r8
    4b7e:	7f 90       	pop	r7
    4b80:	6f 90       	pop	r6
    4b82:	5f 90       	pop	r5
    4b84:	4f 90       	pop	r4
    4b86:	3f 90       	pop	r3
    4b88:	2f 90       	pop	r2
    4b8a:	08 95       	ret

00004b8c <__vector_4>:

ISR(TIMER2_COMP_vect) {
    4b8c:	1f 92       	push	r1
    4b8e:	0f 92       	push	r0
    4b90:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    4b94:	0f 92       	push	r0
    4b96:	11 24       	eor	r1, r1
    4b98:	2f 93       	push	r18
    4b9a:	3f 93       	push	r19
    4b9c:	4f 93       	push	r20
    4b9e:	5f 93       	push	r21
    4ba0:	8f 93       	push	r24
    4ba2:	9f 93       	push	r25
    4ba4:	ef 93       	push	r30
    4ba6:	ff 93       	push	r31
    4ba8:	cf 93       	push	r28
    4baa:	df 93       	push	r29
    4bac:	00 d0       	rcall	.+0      	; 0x4bae <__vector_4+0x22>
    4bae:	cd b7       	in	r28, 0x3d	; 61
    4bb0:	de b7       	in	r29, 0x3e	; 62
	if (_softPrescallerCurrent == 0) {
    4bb2:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <_softPrescallerCurrent>
    4bb6:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <_softPrescallerCurrent+0x1>
    4bba:	89 2b       	or	r24, r25
    4bbc:	09 f0       	breq	.+2      	; 0x4bc0 <__vector_4+0x34>
    4bbe:	5c c0       	rjmp	.+184    	; 0x4c78 <__vector_4+0xec>
		for (int i = 0; i < SWT_SIZE_OF; i++) {
    4bc0:	1a 82       	std	Y+2, r1	; 0x02
    4bc2:	19 82       	std	Y+1, r1	; 0x01
    4bc4:	4b c0       	rjmp	.+150    	; 0x4c5c <__vector_4+0xd0>
			if (true == _timers[i].enabled && _timers[i].currentValue > 0) {
    4bc6:	29 81       	ldd	r18, Y+1	; 0x01
    4bc8:	3a 81       	ldd	r19, Y+2	; 0x02
    4bca:	c9 01       	movw	r24, r18
    4bcc:	88 0f       	add	r24, r24
    4bce:	99 1f       	adc	r25, r25
    4bd0:	88 0f       	add	r24, r24
    4bd2:	99 1f       	adc	r25, r25
    4bd4:	88 0f       	add	r24, r24
    4bd6:	99 1f       	adc	r25, r25
    4bd8:	82 1b       	sub	r24, r18
    4bda:	93 0b       	sbc	r25, r19
    4bdc:	80 53       	subi	r24, 0x30	; 48
    4bde:	9e 4f       	sbci	r25, 0xFE	; 254
    4be0:	fc 01       	movw	r30, r24
    4be2:	80 81       	ld	r24, Z
    4be4:	88 23       	and	r24, r24
    4be6:	a9 f1       	breq	.+106    	; 0x4c52 <__vector_4+0xc6>
    4be8:	29 81       	ldd	r18, Y+1	; 0x01
    4bea:	3a 81       	ldd	r19, Y+2	; 0x02
    4bec:	c9 01       	movw	r24, r18
    4bee:	88 0f       	add	r24, r24
    4bf0:	99 1f       	adc	r25, r25
    4bf2:	88 0f       	add	r24, r24
    4bf4:	99 1f       	adc	r25, r25
    4bf6:	88 0f       	add	r24, r24
    4bf8:	99 1f       	adc	r25, r25
    4bfa:	82 1b       	sub	r24, r18
    4bfc:	93 0b       	sbc	r25, r19
    4bfe:	8f 52       	subi	r24, 0x2F	; 47
    4c00:	9e 4f       	sbci	r25, 0xFE	; 254
    4c02:	fc 01       	movw	r30, r24
    4c04:	80 81       	ld	r24, Z
    4c06:	91 81       	ldd	r25, Z+1	; 0x01
    4c08:	89 2b       	or	r24, r25
    4c0a:	19 f1       	breq	.+70     	; 0x4c52 <__vector_4+0xc6>
				_timers[i].currentValue--;
    4c0c:	29 81       	ldd	r18, Y+1	; 0x01
    4c0e:	3a 81       	ldd	r19, Y+2	; 0x02
    4c10:	c9 01       	movw	r24, r18
    4c12:	88 0f       	add	r24, r24
    4c14:	99 1f       	adc	r25, r25
    4c16:	88 0f       	add	r24, r24
    4c18:	99 1f       	adc	r25, r25
    4c1a:	88 0f       	add	r24, r24
    4c1c:	99 1f       	adc	r25, r25
    4c1e:	82 1b       	sub	r24, r18
    4c20:	93 0b       	sbc	r25, r19
    4c22:	8f 52       	subi	r24, 0x2F	; 47
    4c24:	9e 4f       	sbci	r25, 0xFE	; 254
    4c26:	fc 01       	movw	r30, r24
    4c28:	80 81       	ld	r24, Z
    4c2a:	91 81       	ldd	r25, Z+1	; 0x01
    4c2c:	ac 01       	movw	r20, r24
    4c2e:	41 50       	subi	r20, 0x01	; 1
    4c30:	51 09       	sbc	r21, r1
    4c32:	29 81       	ldd	r18, Y+1	; 0x01
    4c34:	3a 81       	ldd	r19, Y+2	; 0x02
    4c36:	c9 01       	movw	r24, r18
    4c38:	88 0f       	add	r24, r24
    4c3a:	99 1f       	adc	r25, r25
    4c3c:	88 0f       	add	r24, r24
    4c3e:	99 1f       	adc	r25, r25
    4c40:	88 0f       	add	r24, r24
    4c42:	99 1f       	adc	r25, r25
    4c44:	82 1b       	sub	r24, r18
    4c46:	93 0b       	sbc	r25, r19
    4c48:	8f 52       	subi	r24, 0x2F	; 47
    4c4a:	9e 4f       	sbci	r25, 0xFE	; 254
    4c4c:	fc 01       	movw	r30, r24
    4c4e:	51 83       	std	Z+1, r21	; 0x01
    4c50:	40 83       	st	Z, r20
	return;
}

ISR(TIMER2_COMP_vect) {
	if (_softPrescallerCurrent == 0) {
		for (int i = 0; i < SWT_SIZE_OF; i++) {
    4c52:	89 81       	ldd	r24, Y+1	; 0x01
    4c54:	9a 81       	ldd	r25, Y+2	; 0x02
    4c56:	01 96       	adiw	r24, 0x01	; 1
    4c58:	9a 83       	std	Y+2, r25	; 0x02
    4c5a:	89 83       	std	Y+1, r24	; 0x01
    4c5c:	89 81       	ldd	r24, Y+1	; 0x01
    4c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c60:	02 97       	sbiw	r24, 0x02	; 2
    4c62:	0c f4       	brge	.+2      	; 0x4c66 <__vector_4+0xda>
    4c64:	b0 cf       	rjmp	.-160    	; 0x4bc6 <__vector_4+0x3a>
			if (true == _timers[i].enabled && _timers[i].currentValue > 0) {
				_timers[i].currentValue--;
			}
		}
		_softPrescallerCurrent = _softPrescallerInit;
    4c66:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <_softPrescallerInit>
    4c6a:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <_softPrescallerInit+0x1>
    4c6e:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <_softPrescallerCurrent+0x1>
    4c72:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <_softPrescallerCurrent>
	} else {
		_softPrescallerCurrent--;
	}
}
    4c76:	09 c0       	rjmp	.+18     	; 0x4c8a <__vector_4+0xfe>
				_timers[i].currentValue--;
			}
		}
		_softPrescallerCurrent = _softPrescallerInit;
	} else {
		_softPrescallerCurrent--;
    4c78:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <_softPrescallerCurrent>
    4c7c:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <_softPrescallerCurrent+0x1>
    4c80:	01 97       	sbiw	r24, 0x01	; 1
    4c82:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <_softPrescallerCurrent+0x1>
    4c86:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <_softPrescallerCurrent>
	}
}
    4c8a:	00 00       	nop
    4c8c:	0f 90       	pop	r0
    4c8e:	0f 90       	pop	r0
    4c90:	df 91       	pop	r29
    4c92:	cf 91       	pop	r28
    4c94:	ff 91       	pop	r31
    4c96:	ef 91       	pop	r30
    4c98:	9f 91       	pop	r25
    4c9a:	8f 91       	pop	r24
    4c9c:	5f 91       	pop	r21
    4c9e:	4f 91       	pop	r20
    4ca0:	3f 91       	pop	r19
    4ca2:	2f 91       	pop	r18
    4ca4:	0f 90       	pop	r0
    4ca6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    4caa:	0f 90       	pop	r0
    4cac:	1f 90       	pop	r1
    4cae:	18 95       	reti

00004cb0 <sndInit>:
void sndSendToSerial(void);
void sndSendCmdWithArgument(uint8_t cmd, uint16_t argument);
void sndSendCmd(uint8_t cmd);

// Implementation
void sndInit(void) {
    4cb0:	cf 93       	push	r28
    4cb2:	df 93       	push	r29
    4cb4:	cd b7       	in	r28, 0x3d	; 61
    4cb6:	de b7       	in	r29, 0x3e	; 62
	serInit(PLYR_SERIAL_BAUD_RATE);
    4cb8:	60 e8       	ldi	r22, 0x80	; 128
    4cba:	75 e2       	ldi	r23, 0x25	; 37
    4cbc:	80 e0       	ldi	r24, 0x00	; 0
    4cbe:	90 e0       	ldi	r25, 0x00	; 0
    4cc0:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <serInit>
}
    4cc4:	00 00       	nop
    4cc6:	df 91       	pop	r29
    4cc8:	cf 91       	pop	r28
    4cca:	08 95       	ret

00004ccc <sndLoop>:

void sndLoop(void) {
    4ccc:	cf 93       	push	r28
    4cce:	df 93       	push	r29
    4cd0:	1f 92       	push	r1
    4cd2:	cd b7       	in	r28, 0x3d	; 61
    4cd4:	de b7       	in	r29, 0x3e	; 62
	if (serAvailable() > 0) {
    4cd6:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <serAvailable>
    4cda:	18 16       	cp	r1, r24
    4cdc:	19 06       	cpc	r1, r25
    4cde:	e4 f4       	brge	.+56     	; 0x4d18 <sndLoop+0x4c>
		uint8_t serialData = serRead();
    4ce0:	0e 94 8e 1c 	call	0x391c	; 0x391c <serRead>
    4ce4:	89 83       	std	Y+1, r24	; 0x01
		_rxFrame[_rxFramePos++] = serialData;
    4ce6:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <_rxFramePos>
    4cea:	91 e0       	ldi	r25, 0x01	; 1
    4cec:	98 0f       	add	r25, r24
    4cee:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <_rxFramePos>
    4cf2:	88 2f       	mov	r24, r24
    4cf4:	90 e0       	ldi	r25, 0x00	; 0
    4cf6:	8c 51       	subi	r24, 0x1C	; 28
    4cf8:	9e 4f       	sbci	r25, 0xFE	; 254
    4cfa:	29 81       	ldd	r18, Y+1	; 0x01
    4cfc:	fc 01       	movw	r30, r24
    4cfe:	20 83       	st	Z, r18
		if (SNDPL_FRAME_END_CODE == serialData) {
    4d00:	89 81       	ldd	r24, Y+1	; 0x01
    4d02:	8f 3e       	cpi	r24, 0xEF	; 239
    4d04:	19 f4       	brne	.+6      	; 0x4d0c <sndLoop+0x40>
			_rxFramePos = 0;
    4d06:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <_rxFramePos>
			// TODO: call raw callback
		} else if (SNDPL_FRAME_POS_END_CODE == _rxFramePos) {
			_rxFramePos = 0;
		}
	}
}
    4d0a:	06 c0       	rjmp	.+12     	; 0x4d18 <sndLoop+0x4c>
		uint8_t serialData = serRead();
		_rxFrame[_rxFramePos++] = serialData;
		if (SNDPL_FRAME_END_CODE == serialData) {
			_rxFramePos = 0;
			// TODO: call raw callback
		} else if (SNDPL_FRAME_POS_END_CODE == _rxFramePos) {
    4d0c:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <_rxFramePos>
    4d10:	89 30       	cpi	r24, 0x09	; 9
    4d12:	11 f4       	brne	.+4      	; 0x4d18 <sndLoop+0x4c>
			_rxFramePos = 0;
    4d14:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <_rxFramePos>
		}
	}
}
    4d18:	00 00       	nop
    4d1a:	0f 90       	pop	r0
    4d1c:	df 91       	pop	r29
    4d1e:	cf 91       	pop	r28
    4d20:	08 95       	ret

00004d22 <sndSetAckRequest>:

void sndSetAckRequest(bool ackActive) {
    4d22:	cf 93       	push	r28
    4d24:	df 93       	push	r29
    4d26:	1f 92       	push	r1
    4d28:	cd b7       	in	r28, 0x3d	; 61
    4d2a:	de b7       	in	r29, 0x3e	; 62
    4d2c:	89 83       	std	Y+1, r24	; 0x01
	_ackRequestActive = ackActive;
    4d2e:	89 81       	ldd	r24, Y+1	; 0x01
    4d30:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <_ackRequestActive>
	_txFrame[SNDPL_FRAME_POS_ACK] = ackActive == true ? 0x01 : 0x00;
    4d34:	89 81       	ldd	r24, Y+1	; 0x01
    4d36:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <_txFrame+0x4>
}
    4d3a:	00 00       	nop
    4d3c:	0f 90       	pop	r0
    4d3e:	df 91       	pop	r29
    4d40:	cf 91       	pop	r28
    4d42:	08 95       	ret

00004d44 <sndCalcChecksum>:

uint16_t sndCalcChecksum(const uint8_t *frame) {
    4d44:	cf 93       	push	r28
    4d46:	df 93       	push	r29
    4d48:	cd b7       	in	r28, 0x3d	; 61
    4d4a:	de b7       	in	r29, 0x3e	; 62
    4d4c:	27 97       	sbiw	r28, 0x07	; 7
    4d4e:	0f b6       	in	r0, 0x3f	; 63
    4d50:	f8 94       	cli
    4d52:	de bf       	out	0x3e, r29	; 62
    4d54:	0f be       	out	0x3f, r0	; 63
    4d56:	cd bf       	out	0x3d, r28	; 61
    4d58:	9f 83       	std	Y+7, r25	; 0x07
    4d5a:	8e 83       	std	Y+6, r24	; 0x06
	uint16_t result = 0;
    4d5c:	1d 82       	std	Y+5, r1	; 0x05
    4d5e:	1c 82       	std	Y+4, r1	; 0x04
	int16_t sum = 0;
    4d60:	1a 82       	std	Y+2, r1	; 0x02
    4d62:	19 82       	std	Y+1, r1	; 0x01
	for (uint8_t i = SNDPL_FRAME_POS_VERSION; i <= SNDPL_FRAME_POS_ARGUMENT; i++) {
    4d64:	81 e0       	ldi	r24, 0x01	; 1
    4d66:	8b 83       	std	Y+3, r24	; 0x03
    4d68:	14 c0       	rjmp	.+40     	; 0x4d92 <sndCalcChecksum+0x4e>
		sum += frame[i];
    4d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d6c:	88 2f       	mov	r24, r24
    4d6e:	90 e0       	ldi	r25, 0x00	; 0
    4d70:	2e 81       	ldd	r18, Y+6	; 0x06
    4d72:	3f 81       	ldd	r19, Y+7	; 0x07
    4d74:	82 0f       	add	r24, r18
    4d76:	93 1f       	adc	r25, r19
    4d78:	fc 01       	movw	r30, r24
    4d7a:	80 81       	ld	r24, Z
    4d7c:	88 2f       	mov	r24, r24
    4d7e:	90 e0       	ldi	r25, 0x00	; 0
    4d80:	29 81       	ldd	r18, Y+1	; 0x01
    4d82:	3a 81       	ldd	r19, Y+2	; 0x02
    4d84:	82 0f       	add	r24, r18
    4d86:	93 1f       	adc	r25, r19
    4d88:	9a 83       	std	Y+2, r25	; 0x02
    4d8a:	89 83       	std	Y+1, r24	; 0x01
}

uint16_t sndCalcChecksum(const uint8_t *frame) {
	uint16_t result = 0;
	int16_t sum = 0;
	for (uint8_t i = SNDPL_FRAME_POS_VERSION; i <= SNDPL_FRAME_POS_ARGUMENT; i++) {
    4d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d8e:	8f 5f       	subi	r24, 0xFF	; 255
    4d90:	8b 83       	std	Y+3, r24	; 0x03
    4d92:	8b 81       	ldd	r24, Y+3	; 0x03
    4d94:	87 30       	cpi	r24, 0x07	; 7
    4d96:	48 f3       	brcs	.-46     	; 0x4d6a <sndCalcChecksum+0x26>
		sum += frame[i];
	}
	// checksum counted from lowest byte only
	//result &= 0xFF;
	// the checksum = 0 - sum of bytes
	sum = 0 - sum;
    4d98:	89 81       	ldd	r24, Y+1	; 0x01
    4d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    4d9c:	91 95       	neg	r25
    4d9e:	81 95       	neg	r24
    4da0:	91 09       	sbc	r25, r1
    4da2:	9a 83       	std	Y+2, r25	; 0x02
    4da4:	89 83       	std	Y+1, r24	; 0x01
	result = (uint16_t)sum;
    4da6:	89 81       	ldd	r24, Y+1	; 0x01
    4da8:	9a 81       	ldd	r25, Y+2	; 0x02
    4daa:	9d 83       	std	Y+5, r25	; 0x05
    4dac:	8c 83       	std	Y+4, r24	; 0x04
	return result;
    4dae:	8c 81       	ldd	r24, Y+4	; 0x04
    4db0:	9d 81       	ldd	r25, Y+5	; 0x05
}
    4db2:	27 96       	adiw	r28, 0x07	; 7
    4db4:	0f b6       	in	r0, 0x3f	; 63
    4db6:	f8 94       	cli
    4db8:	de bf       	out	0x3e, r29	; 62
    4dba:	0f be       	out	0x3f, r0	; 63
    4dbc:	cd bf       	out	0x3d, r28	; 61
    4dbe:	df 91       	pop	r29
    4dc0:	cf 91       	pop	r28
    4dc2:	08 95       	ret

00004dc4 <sndFillChecksum>:

void sndFillChecksum(void) {
    4dc4:	cf 93       	push	r28
    4dc6:	df 93       	push	r29
    4dc8:	00 d0       	rcall	.+0      	; 0x4dca <sndFillChecksum+0x6>
    4dca:	cd b7       	in	r28, 0x3d	; 61
    4dcc:	de b7       	in	r29, 0x3e	; 62
	uint16_t checksum = sndCalcChecksum(_txFrame);
    4dce:	81 e6       	ldi	r24, 0x61	; 97
    4dd0:	90 e0       	ldi	r25, 0x00	; 0
    4dd2:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <sndCalcChecksum>
    4dd6:	9a 83       	std	Y+2, r25	; 0x02
    4dd8:	89 83       	std	Y+1, r24	; 0x01
	_txFrame[SNDPL_FRAME_POS_CHECKSUM_LO] = checksum & 0xFF;
    4dda:	89 81       	ldd	r24, Y+1	; 0x01
    4ddc:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <_txFrame+0x8>
	_txFrame[SNDPL_FRAME_POS_CHECKSUM_HI] = checksum >> 0x08;
    4de0:	89 81       	ldd	r24, Y+1	; 0x01
    4de2:	9a 81       	ldd	r25, Y+2	; 0x02
    4de4:	89 2f       	mov	r24, r25
    4de6:	99 27       	eor	r25, r25
    4de8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <_txFrame+0x7>
}
    4dec:	00 00       	nop
    4dee:	0f 90       	pop	r0
    4df0:	0f 90       	pop	r0
    4df2:	df 91       	pop	r29
    4df4:	cf 91       	pop	r28
    4df6:	08 95       	ret

00004df8 <sndFillArgument>:

void sndFillArgument(uint16_t argument) {
    4df8:	cf 93       	push	r28
    4dfa:	df 93       	push	r29
    4dfc:	00 d0       	rcall	.+0      	; 0x4dfe <sndFillArgument+0x6>
    4dfe:	cd b7       	in	r28, 0x3d	; 61
    4e00:	de b7       	in	r29, 0x3e	; 62
    4e02:	9a 83       	std	Y+2, r25	; 0x02
    4e04:	89 83       	std	Y+1, r24	; 0x01
	_txFrame[SNDPL_FRAME_POS_NO_RECEIVE] = argument >> 0x08;
    4e06:	89 81       	ldd	r24, Y+1	; 0x01
    4e08:	9a 81       	ldd	r25, Y+2	; 0x02
    4e0a:	89 2f       	mov	r24, r25
    4e0c:	99 27       	eor	r25, r25
    4e0e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <_txFrame+0x5>
	_txFrame[SNDPL_FRAME_POS_ARGUMENT] = argument & 0xFF;
    4e12:	89 81       	ldd	r24, Y+1	; 0x01
    4e14:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <_txFrame+0x6>
}
    4e18:	00 00       	nop
    4e1a:	0f 90       	pop	r0
    4e1c:	0f 90       	pop	r0
    4e1e:	df 91       	pop	r29
    4e20:	cf 91       	pop	r28
    4e22:	08 95       	ret

00004e24 <sndSendToSerial>:

void sndSendToSerial(void) {
    4e24:	cf 93       	push	r28
    4e26:	df 93       	push	r29
    4e28:	cd b7       	in	r28, 0x3d	; 61
    4e2a:	de b7       	in	r29, 0x3e	; 62
	serSendBinary(_txFrame, SNDPL_FRAME_SIZE_OF);
    4e2c:	6a e0       	ldi	r22, 0x0A	; 10
    4e2e:	81 e6       	ldi	r24, 0x61	; 97
    4e30:	90 e0       	ldi	r25, 0x00	; 0
    4e32:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <serSendBinary>
}
    4e36:	00 00       	nop
    4e38:	df 91       	pop	r29
    4e3a:	cf 91       	pop	r28
    4e3c:	08 95       	ret

00004e3e <sndSendCmdWithArgument>:

void sndSendCmdWithArgument(uint8_t cmd, uint16_t argument) {
    4e3e:	cf 93       	push	r28
    4e40:	df 93       	push	r29
    4e42:	00 d0       	rcall	.+0      	; 0x4e44 <sndSendCmdWithArgument+0x6>
    4e44:	1f 92       	push	r1
    4e46:	cd b7       	in	r28, 0x3d	; 61
    4e48:	de b7       	in	r29, 0x3e	; 62
    4e4a:	89 83       	std	Y+1, r24	; 0x01
    4e4c:	7b 83       	std	Y+3, r23	; 0x03
    4e4e:	6a 83       	std	Y+2, r22	; 0x02
	_txFrame[SNDPL_FRAME_POS_COMMAND] = cmd;
    4e50:	89 81       	ldd	r24, Y+1	; 0x01
    4e52:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_txFrame+0x3>
	sndFillArgument(argument);
    4e56:	8a 81       	ldd	r24, Y+2	; 0x02
    4e58:	9b 81       	ldd	r25, Y+3	; 0x03
    4e5a:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <sndFillArgument>
	sndFillChecksum();
    4e5e:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <sndFillChecksum>
	sndSendToSerial();
    4e62:	0e 94 12 27 	call	0x4e24	; 0x4e24 <sndSendToSerial>
}
    4e66:	00 00       	nop
    4e68:	0f 90       	pop	r0
    4e6a:	0f 90       	pop	r0
    4e6c:	0f 90       	pop	r0
    4e6e:	df 91       	pop	r29
    4e70:	cf 91       	pop	r28
    4e72:	08 95       	ret

00004e74 <sndSendCmd>:

void sndSendCmd(uint8_t cmd) {
    4e74:	cf 93       	push	r28
    4e76:	df 93       	push	r29
    4e78:	1f 92       	push	r1
    4e7a:	cd b7       	in	r28, 0x3d	; 61
    4e7c:	de b7       	in	r29, 0x3e	; 62
    4e7e:	89 83       	std	Y+1, r24	; 0x01
	sndSendCmdWithArgument(cmd, 0x0000);
    4e80:	60 e0       	ldi	r22, 0x00	; 0
    4e82:	70 e0       	ldi	r23, 0x00	; 0
    4e84:	89 81       	ldd	r24, Y+1	; 0x01
    4e86:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sndSendCmdWithArgument>
}
    4e8a:	00 00       	nop
    4e8c:	0f 90       	pop	r0
    4e8e:	df 91       	pop	r29
    4e90:	cf 91       	pop	r28
    4e92:	08 95       	ret

00004e94 <sndSetTrack>:

void sndSetTrack(uint16_t trackNumber) {
    4e94:	cf 93       	push	r28
    4e96:	df 93       	push	r29
    4e98:	00 d0       	rcall	.+0      	; 0x4e9a <sndSetTrack+0x6>
    4e9a:	cd b7       	in	r28, 0x3d	; 61
    4e9c:	de b7       	in	r29, 0x3e	; 62
    4e9e:	9a 83       	std	Y+2, r25	; 0x02
    4ea0:	89 83       	std	Y+1, r24	; 0x01
	sndSendCmdWithArgument(SNDPL_CMD_SPECIFY_TRACK, trackNumber);
    4ea2:	89 81       	ldd	r24, Y+1	; 0x01
    4ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ea6:	bc 01       	movw	r22, r24
    4ea8:	83 e0       	ldi	r24, 0x03	; 3
    4eaa:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sndSendCmdWithArgument>
}
    4eae:	00 00       	nop
    4eb0:	0f 90       	pop	r0
    4eb2:	0f 90       	pop	r0
    4eb4:	df 91       	pop	r29
    4eb6:	cf 91       	pop	r28
    4eb8:	08 95       	ret

00004eba <sndSetTrackFirst>:

void sndSetTrackFirst(void) {
    4eba:	cf 93       	push	r28
    4ebc:	df 93       	push	r29
    4ebe:	cd b7       	in	r28, 0x3d	; 61
    4ec0:	de b7       	in	r29, 0x3e	; 62
	sndSendCmd(SNDPL_CMD_SPECIFY_TRACK);
    4ec2:	83 e0       	ldi	r24, 0x03	; 3
    4ec4:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <sndSendCmd>
}
    4ec8:	00 00       	nop
    4eca:	df 91       	pop	r29
    4ecc:	cf 91       	pop	r28
    4ece:	08 95       	ret

00004ed0 <sndNext>:

void sndNext(void) {
    4ed0:	cf 93       	push	r28
    4ed2:	df 93       	push	r29
    4ed4:	cd b7       	in	r28, 0x3d	; 61
    4ed6:	de b7       	in	r29, 0x3e	; 62
	sndSendCmd(SNDPL_CMD_NEXT);
    4ed8:	81 e0       	ldi	r24, 0x01	; 1
    4eda:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <sndSendCmd>
}
    4ede:	00 00       	nop
    4ee0:	df 91       	pop	r29
    4ee2:	cf 91       	pop	r28
    4ee4:	08 95       	ret

00004ee6 <sndPrevious>:

void sndPrevious(void) {
    4ee6:	cf 93       	push	r28
    4ee8:	df 93       	push	r29
    4eea:	cd b7       	in	r28, 0x3d	; 61
    4eec:	de b7       	in	r29, 0x3e	; 62
	sndSendCmd(SNDPL_CMD_PREVIOUS);
    4eee:	82 e0       	ldi	r24, 0x02	; 2
    4ef0:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <sndSendCmd>
}
    4ef4:	00 00       	nop
    4ef6:	df 91       	pop	r29
    4ef8:	cf 91       	pop	r28
    4efa:	08 95       	ret

00004efc <sndSetVolume>:

void sndSetVolume(uint16_t volume) {
    4efc:	cf 93       	push	r28
    4efe:	df 93       	push	r29
    4f00:	00 d0       	rcall	.+0      	; 0x4f02 <sndSetVolume+0x6>
    4f02:	cd b7       	in	r28, 0x3d	; 61
    4f04:	de b7       	in	r29, 0x3e	; 62
    4f06:	9a 83       	std	Y+2, r25	; 0x02
    4f08:	89 83       	std	Y+1, r24	; 0x01
	sndSendCmdWithArgument(SNDPL_CMD_VOLUME_SET, volume);
    4f0a:	89 81       	ldd	r24, Y+1	; 0x01
    4f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    4f0e:	bc 01       	movw	r22, r24
    4f10:	86 e0       	ldi	r24, 0x06	; 6
    4f12:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sndSendCmdWithArgument>
}
    4f16:	00 00       	nop
    4f18:	0f 90       	pop	r0
    4f1a:	0f 90       	pop	r0
    4f1c:	df 91       	pop	r29
    4f1e:	cf 91       	pop	r28
    4f20:	08 95       	ret

00004f22 <sndSetEqualizer>:

void sndSetEqualizer(uint16_t equalizer) {
    4f22:	cf 93       	push	r28
    4f24:	df 93       	push	r29
    4f26:	00 d0       	rcall	.+0      	; 0x4f28 <sndSetEqualizer+0x6>
    4f28:	cd b7       	in	r28, 0x3d	; 61
    4f2a:	de b7       	in	r29, 0x3e	; 62
    4f2c:	9a 83       	std	Y+2, r25	; 0x02
    4f2e:	89 83       	std	Y+1, r24	; 0x01
	sndSendCmdWithArgument(SNDPL_CMD_QUALIZER_SET, equalizer);
    4f30:	89 81       	ldd	r24, Y+1	; 0x01
    4f32:	9a 81       	ldd	r25, Y+2	; 0x02
    4f34:	bc 01       	movw	r22, r24
    4f36:	87 e0       	ldi	r24, 0x07	; 7
    4f38:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sndSendCmdWithArgument>
}
    4f3c:	00 00       	nop
    4f3e:	0f 90       	pop	r0
    4f40:	0f 90       	pop	r0
    4f42:	df 91       	pop	r29
    4f44:	cf 91       	pop	r28
    4f46:	08 95       	ret

00004f48 <sndSetDevice>:

void sndSetDevice(uint16_t device) {
    4f48:	cf 93       	push	r28
    4f4a:	df 93       	push	r29
    4f4c:	00 d0       	rcall	.+0      	; 0x4f4e <sndSetDevice+0x6>
    4f4e:	cd b7       	in	r28, 0x3d	; 61
    4f50:	de b7       	in	r29, 0x3e	; 62
    4f52:	9a 83       	std	Y+2, r25	; 0x02
    4f54:	89 83       	std	Y+1, r24	; 0x01
	sndSendCmdWithArgument(SNDPL_CMD_PLAYBACK_MODE_SRC, device);
    4f56:	89 81       	ldd	r24, Y+1	; 0x01
    4f58:	9a 81       	ldd	r25, Y+2	; 0x02
    4f5a:	bc 01       	movw	r22, r24
    4f5c:	89 e0       	ldi	r24, 0x09	; 9
    4f5e:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sndSendCmdWithArgument>
}
    4f62:	00 00       	nop
    4f64:	0f 90       	pop	r0
    4f66:	0f 90       	pop	r0
    4f68:	df 91       	pop	r29
    4f6a:	cf 91       	pop	r28
    4f6c:	08 95       	ret

00004f6e <sndSleep>:

void sndSleep(void) {
    4f6e:	cf 93       	push	r28
    4f70:	df 93       	push	r29
    4f72:	cd b7       	in	r28, 0x3d	; 61
    4f74:	de b7       	in	r29, 0x3e	; 62
	sndSendCmd(SNDPL_CMD_STANDBY);
    4f76:	8a e0       	ldi	r24, 0x0A	; 10
    4f78:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <sndSendCmd>
}
    4f7c:	00 00       	nop
    4f7e:	df 91       	pop	r29
    4f80:	cf 91       	pop	r28
    4f82:	08 95       	ret

00004f84 <sndResetModule>:

void sndResetModule(void) {
    4f84:	cf 93       	push	r28
    4f86:	df 93       	push	r29
    4f88:	cd b7       	in	r28, 0x3d	; 61
    4f8a:	de b7       	in	r29, 0x3e	; 62
	sndSendCmd(SNDPL_CMD_RESET);
    4f8c:	8c e0       	ldi	r24, 0x0C	; 12
    4f8e:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <sndSendCmd>
}
    4f92:	00 00       	nop
    4f94:	df 91       	pop	r29
    4f96:	cf 91       	pop	r28
    4f98:	08 95       	ret

00004f9a <sndPlay>:

void sndPlay(void) {
    4f9a:	cf 93       	push	r28
    4f9c:	df 93       	push	r29
    4f9e:	cd b7       	in	r28, 0x3d	; 61
    4fa0:	de b7       	in	r29, 0x3e	; 62
	sndSendCmd(SNDPL_CMD_PLAY);
    4fa2:	8d e0       	ldi	r24, 0x0D	; 13
    4fa4:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <sndSendCmd>
}
    4fa8:	00 00       	nop
    4faa:	df 91       	pop	r29
    4fac:	cf 91       	pop	r28
    4fae:	08 95       	ret

00004fb0 <sndPause>:

void sndPause(void) {
    4fb0:	cf 93       	push	r28
    4fb2:	df 93       	push	r29
    4fb4:	cd b7       	in	r28, 0x3d	; 61
    4fb6:	de b7       	in	r29, 0x3e	; 62
	sndSendCmd(SNDPL_CMD_PAUSE);
    4fb8:	8e e0       	ldi	r24, 0x0E	; 14
    4fba:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <sndSendCmd>
}
    4fbe:	00 00       	nop
    4fc0:	df 91       	pop	r29
    4fc2:	cf 91       	pop	r28
    4fc4:	08 95       	ret

00004fc6 <sndStop>:

void sndStop(void) {
    4fc6:	cf 93       	push	r28
    4fc8:	df 93       	push	r29
    4fca:	cd b7       	in	r28, 0x3d	; 61
    4fcc:	de b7       	in	r29, 0x3e	; 62
	sndSendCmd(SNDPL_CMD_STOP);
    4fce:	86 e1       	ldi	r24, 0x16	; 22
    4fd0:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <sndSendCmd>
}
    4fd4:	00 00       	nop
    4fd6:	df 91       	pop	r29
    4fd8:	cf 91       	pop	r28
    4fda:	08 95       	ret

00004fdc <sndPlayMp3>:

void sndPlayMp3(uint16_t track) {
    4fdc:	cf 93       	push	r28
    4fde:	df 93       	push	r29
    4fe0:	00 d0       	rcall	.+0      	; 0x4fe2 <sndPlayMp3+0x6>
    4fe2:	cd b7       	in	r28, 0x3d	; 61
    4fe4:	de b7       	in	r29, 0x3e	; 62
    4fe6:	9a 83       	std	Y+2, r25	; 0x02
    4fe8:	89 83       	std	Y+1, r24	; 0x01
	sndSendCmdWithArgument(SNDPL_CMD_PLAY_MP3, track);
    4fea:	89 81       	ldd	r24, Y+1	; 0x01
    4fec:	9a 81       	ldd	r25, Y+2	; 0x02
    4fee:	bc 01       	movw	r22, r24
    4ff0:	82 e1       	ldi	r24, 0x12	; 18
    4ff2:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sndSendCmdWithArgument>
}
    4ff6:	00 00       	nop
    4ff8:	0f 90       	pop	r0
    4ffa:	0f 90       	pop	r0
    4ffc:	df 91       	pop	r29
    4ffe:	cf 91       	pop	r28
    5000:	08 95       	ret

00005002 <sndQueryStatus>:

void sndQueryStatus(void) {
    5002:	cf 93       	push	r28
    5004:	df 93       	push	r29
    5006:	cd b7       	in	r28, 0x3d	; 61
    5008:	de b7       	in	r29, 0x3e	; 62
	sndSendCmd(SNDPL_CMD_QUERY_STATUS);
    500a:	82 e4       	ldi	r24, 0x42	; 66
    500c:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <sndSendCmd>
}
    5010:	00 00       	nop
    5012:	df 91       	pop	r29
    5014:	cf 91       	pop	r28
    5016:	08 95       	ret

00005018 <sndQueryVolume>:

void sndQueryVolume(void) {
    5018:	cf 93       	push	r28
    501a:	df 93       	push	r29
    501c:	cd b7       	in	r28, 0x3d	; 61
    501e:	de b7       	in	r29, 0x3e	; 62
	sndSendCmd(SNDPL_CMD_QUERY_VOLUME);
    5020:	83 e4       	ldi	r24, 0x43	; 67
    5022:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <sndSendCmd>
}
    5026:	00 00       	nop
    5028:	df 91       	pop	r29
    502a:	cf 91       	pop	r28
    502c:	08 95       	ret

0000502e <sndQueryTracksNumberTF>:

void sndQueryTracksNumberTF(void) {
    502e:	cf 93       	push	r28
    5030:	df 93       	push	r29
    5032:	cd b7       	in	r28, 0x3d	; 61
    5034:	de b7       	in	r29, 0x3e	; 62
	sndSendCmd(SNDPL_CMD_QUERY_FILES_NO_TF);
    5036:	87 e4       	ldi	r24, 0x47	; 71
    5038:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <sndSendCmd>
}
    503c:	00 00       	nop
    503e:	df 91       	pop	r29
    5040:	cf 91       	pop	r28
    5042:	08 95       	ret

00005044 <sndQueryTracksNumberUD>:

void sndQueryTracksNumberUD(void) {
    5044:	cf 93       	push	r28
    5046:	df 93       	push	r29
    5048:	cd b7       	in	r28, 0x3d	; 61
    504a:	de b7       	in	r29, 0x3e	; 62
	sndSendCmd(SNDPL_CMD_QUERY_FILES_NO_UD);
    504c:	88 e4       	ldi	r24, 0x48	; 72
    504e:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <sndSendCmd>
}
    5052:	00 00       	nop
    5054:	df 91       	pop	r29
    5056:	cf 91       	pop	r28
    5058:	08 95       	ret

0000505a <sndQueryTracksNumberFlash>:

void sndQueryTracksNumberFlash(void) {
    505a:	cf 93       	push	r28
    505c:	df 93       	push	r29
    505e:	cd b7       	in	r28, 0x3d	; 61
    5060:	de b7       	in	r29, 0x3e	; 62
	sndSendCmd(SNDPL_CMD_QUERY_FILES_NO_FLASH);
    5062:	89 e4       	ldi	r24, 0x49	; 73
    5064:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <sndSendCmd>
}
    5068:	00 00       	nop
    506a:	df 91       	pop	r29
    506c:	cf 91       	pop	r28
    506e:	08 95       	ret

00005070 <sndQueryTracksCurrentTF>:

void sndQueryTracksCurrentTF(void) {
    5070:	cf 93       	push	r28
    5072:	df 93       	push	r29
    5074:	cd b7       	in	r28, 0x3d	; 61
    5076:	de b7       	in	r29, 0x3e	; 62
	sndSendCmd(SNDPL_CMD_QUERY_CURRENT_TF);
    5078:	8c e4       	ldi	r24, 0x4C	; 76
    507a:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <sndSendCmd>
}
    507e:	00 00       	nop
    5080:	df 91       	pop	r29
    5082:	cf 91       	pop	r28
    5084:	08 95       	ret

00005086 <sndQueryTracksCurrentUD>:

void sndQueryTracksCurrentUD(void) {
    5086:	cf 93       	push	r28
    5088:	df 93       	push	r29
    508a:	cd b7       	in	r28, 0x3d	; 61
    508c:	de b7       	in	r29, 0x3e	; 62
	sndSendCmd(SNDPL_CMD_QUERY_CURRENT_UD);
    508e:	8b e4       	ldi	r24, 0x4B	; 75
    5090:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <sndSendCmd>
}
    5094:	00 00       	nop
    5096:	df 91       	pop	r29
    5098:	cf 91       	pop	r28
    509a:	08 95       	ret

0000509c <sndQueryTracksCurrentFlash>:

void sndQueryTracksCurrentFlash(void) {
    509c:	cf 93       	push	r28
    509e:	df 93       	push	r29
    50a0:	cd b7       	in	r28, 0x3d	; 61
    50a2:	de b7       	in	r29, 0x3e	; 62
	sndSendCmd(SNDPL_CMD_QUERY_CURRENT_FLASH);
    50a4:	8d e4       	ldi	r24, 0x4D	; 77
    50a6:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <sndSendCmd>
}
    50aa:	00 00       	nop
    50ac:	df 91       	pop	r29
    50ae:	cf 91       	pop	r28
    50b0:	08 95       	ret

000050b2 <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    50b2:	cf 93       	push	r28
    50b4:	df 93       	push	r29
    50b6:	cd b7       	in	r28, 0x3d	; 61
    50b8:	de b7       	in	r29, 0x3e	; 62
    cli();
    50ba:	f8 94       	cli
    return 1;
    50bc:	81 e0       	ldi	r24, 0x01	; 1
}
    50be:	df 91       	pop	r29
    50c0:	cf 91       	pop	r28
    50c2:	08 95       	ret

000050c4 <__iRestore>:
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    50c4:	cf 93       	push	r28
    50c6:	df 93       	push	r29
    50c8:	00 d0       	rcall	.+0      	; 0x50ca <__iRestore+0x6>
    50ca:	cd b7       	in	r28, 0x3d	; 61
    50cc:	de b7       	in	r29, 0x3e	; 62
    50ce:	9a 83       	std	Y+2, r25	; 0x02
    50d0:	89 83       	std	Y+1, r24	; 0x01
    SREG = *__s;
    50d2:	8f e5       	ldi	r24, 0x5F	; 95
    50d4:	90 e0       	ldi	r25, 0x00	; 0
    50d6:	29 81       	ldd	r18, Y+1	; 0x01
    50d8:	3a 81       	ldd	r19, Y+2	; 0x02
    50da:	f9 01       	movw	r30, r18
    50dc:	20 81       	ld	r18, Z
    50de:	fc 01       	movw	r30, r24
    50e0:	20 83       	st	Z, r18
    __asm__ volatile ("" ::: "memory");
}
    50e2:	00 00       	nop
    50e4:	0f 90       	pop	r0
    50e6:	0f 90       	pop	r0
    50e8:	df 91       	pop	r29
    50ea:	cf 91       	pop	r28
    50ec:	08 95       	ret

000050ee <timer1Start>:
static uint8_t _timer1PrescalerSelectBits = 0;
static uint16_t _timer1PwmCycles = 0;
static Timer1Callback *_timerCallback = NULL;
static void *_timer1CallbackUserData = NULL;

void timer1Start(void) {
    50ee:	cf 93       	push	r28
    50f0:	df 93       	push	r29
    50f2:	cd b7       	in	r28, 0x3d	; 61
    50f4:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= _timer1PrescalerSelectBits;
    50f6:	8e e4       	ldi	r24, 0x4E	; 78
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	2e e4       	ldi	r18, 0x4E	; 78
    50fc:	30 e0       	ldi	r19, 0x00	; 0
    50fe:	f9 01       	movw	r30, r18
    5100:	30 81       	ld	r19, Z
    5102:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <_timer1PrescalerSelectBits>
    5106:	23 2b       	or	r18, r19
    5108:	fc 01       	movw	r30, r24
    510a:	20 83       	st	Z, r18
}
    510c:	00 00       	nop
    510e:	df 91       	pop	r29
    5110:	cf 91       	pop	r28
    5112:	08 95       	ret

00005114 <timer1Stop>:

void timer1Stop(void) {
    5114:	cf 93       	push	r28
    5116:	df 93       	push	r29
    5118:	cd b7       	in	r28, 0x3d	; 61
    511a:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(TCC1_PRSC_1024);
    511c:	8e e4       	ldi	r24, 0x4E	; 78
    511e:	90 e0       	ldi	r25, 0x00	; 0
    5120:	2e e4       	ldi	r18, 0x4E	; 78
    5122:	30 e0       	ldi	r19, 0x00	; 0
    5124:	f9 01       	movw	r30, r18
    5126:	20 81       	ld	r18, Z
    5128:	2a 7f       	andi	r18, 0xFA	; 250
    512a:	fc 01       	movw	r30, r24
    512c:	20 83       	st	Z, r18
}
    512e:	00 00       	nop
    5130:	df 91       	pop	r29
    5132:	cf 91       	pop	r28
    5134:	08 95       	ret

00005136 <timer1Restart>:

void timer1Restart(void) {
    5136:	cf 93       	push	r28
    5138:	df 93       	push	r29
    513a:	cd b7       	in	r28, 0x3d	; 61
    513c:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    513e:	8c e4       	ldi	r24, 0x4C	; 76
    5140:	90 e0       	ldi	r25, 0x00	; 0
    5142:	fc 01       	movw	r30, r24
    5144:	11 82       	std	Z+1, r1	; 0x01
    5146:	10 82       	st	Z, r1
}
    5148:	00 00       	nop
    514a:	df 91       	pop	r29
    514c:	cf 91       	pop	r28
    514e:	08 95       	ret

00005150 <timer1SetPeriod>:

void timer1SetPeriod(int32_t microseconds) {
    5150:	2f 92       	push	r2
    5152:	3f 92       	push	r3
    5154:	4f 92       	push	r4
    5156:	5f 92       	push	r5
    5158:	6f 92       	push	r6
    515a:	7f 92       	push	r7
    515c:	8f 92       	push	r8
    515e:	9f 92       	push	r9
    5160:	af 92       	push	r10
    5162:	bf 92       	push	r11
    5164:	cf 92       	push	r12
    5166:	df 92       	push	r13
    5168:	ef 92       	push	r14
    516a:	ff 92       	push	r15
    516c:	0f 93       	push	r16
    516e:	1f 93       	push	r17
    5170:	cf 93       	push	r28
    5172:	df 93       	push	r29
    5174:	cd b7       	in	r28, 0x3d	; 61
    5176:	de b7       	in	r29, 0x3e	; 62
    5178:	2c 97       	sbiw	r28, 0x0c	; 12
    517a:	0f b6       	in	r0, 0x3f	; 63
    517c:	f8 94       	cli
    517e:	de bf       	out	0x3e, r29	; 62
    5180:	0f be       	out	0x3f, r0	; 63
    5182:	cd bf       	out	0x3d, r28	; 61
    5184:	69 87       	std	Y+9, r22	; 0x09
    5186:	7a 87       	std	Y+10, r23	; 0x0a
    5188:	8b 87       	std	Y+11, r24	; 0x0b
    518a:	9c 87       	std	Y+12, r25	; 0x0c
	// the counter runs backwards after TOP, interrupt is at BOTTOM so divide microseconds by 2
	int64_t cycles = (int64_t)(F_CPU);
    518c:	19 82       	std	Y+1, r1	; 0x01
    518e:	80 ec       	ldi	r24, 0xC0	; 192
    5190:	8a 83       	std	Y+2, r24	; 0x02
    5192:	88 ea       	ldi	r24, 0xA8	; 168
    5194:	8b 83       	std	Y+3, r24	; 0x03
    5196:	1c 82       	std	Y+4, r1	; 0x04
    5198:	1d 82       	std	Y+5, r1	; 0x05
    519a:	1e 82       	std	Y+6, r1	; 0x06
    519c:	1f 82       	std	Y+7, r1	; 0x07
    519e:	18 86       	std	Y+8, r1	; 0x08
	cycles *= microseconds;
    51a0:	89 85       	ldd	r24, Y+9	; 0x09
    51a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    51a4:	ab 85       	ldd	r26, Y+11	; 0x0b
    51a6:	bc 85       	ldd	r27, Y+12	; 0x0c
    51a8:	1c 01       	movw	r2, r24
    51aa:	2d 01       	movw	r4, r26
    51ac:	bb 0f       	add	r27, r27
    51ae:	88 0b       	sbc	r24, r24
    51b0:	98 2f       	mov	r25, r24
    51b2:	dc 01       	movw	r26, r24
    51b4:	68 2e       	mov	r6, r24
    51b6:	78 2e       	mov	r7, r24
    51b8:	88 2e       	mov	r8, r24
    51ba:	98 2e       	mov	r9, r24
    51bc:	a2 2c       	mov	r10, r2
    51be:	b3 2c       	mov	r11, r3
    51c0:	c4 2c       	mov	r12, r4
    51c2:	d5 2c       	mov	r13, r5
    51c4:	e6 2c       	mov	r14, r6
    51c6:	f7 2c       	mov	r15, r7
    51c8:	08 2d       	mov	r16, r8
    51ca:	19 2d       	mov	r17, r9
    51cc:	29 81       	ldd	r18, Y+1	; 0x01
    51ce:	3a 81       	ldd	r19, Y+2	; 0x02
    51d0:	4b 81       	ldd	r20, Y+3	; 0x03
    51d2:	5c 81       	ldd	r21, Y+4	; 0x04
    51d4:	6d 81       	ldd	r22, Y+5	; 0x05
    51d6:	7e 81       	ldd	r23, Y+6	; 0x06
    51d8:	8f 81       	ldd	r24, Y+7	; 0x07
    51da:	98 85       	ldd	r25, Y+8	; 0x08
    51dc:	0e 94 3e 2e 	call	0x5c7c	; 0x5c7c <__muldi3>
    51e0:	a2 2e       	mov	r10, r18
    51e2:	b3 2e       	mov	r11, r19
    51e4:	c4 2e       	mov	r12, r20
    51e6:	d5 2e       	mov	r13, r21
    51e8:	e6 2e       	mov	r14, r22
    51ea:	f7 2e       	mov	r15, r23
    51ec:	08 2f       	mov	r16, r24
    51ee:	19 2f       	mov	r17, r25
    51f0:	a9 82       	std	Y+1, r10	; 0x01
    51f2:	ba 82       	std	Y+2, r11	; 0x02
    51f4:	cb 82       	std	Y+3, r12	; 0x03
    51f6:	dc 82       	std	Y+4, r13	; 0x04
    51f8:	ed 82       	std	Y+5, r14	; 0x05
    51fa:	fe 82       	std	Y+6, r15	; 0x06
    51fc:	0f 83       	std	Y+7, r16	; 0x07
    51fe:	18 87       	std	Y+8, r17	; 0x08
	cycles /= 2000000ULL;
    5200:	29 80       	ldd	r2, Y+1	; 0x01
    5202:	3a 80       	ldd	r3, Y+2	; 0x02
    5204:	4b 80       	ldd	r4, Y+3	; 0x03
    5206:	5c 80       	ldd	r5, Y+4	; 0x04
    5208:	6d 80       	ldd	r6, Y+5	; 0x05
    520a:	7e 80       	ldd	r7, Y+6	; 0x06
    520c:	8f 80       	ldd	r8, Y+7	; 0x07
    520e:	98 84       	ldd	r9, Y+8	; 0x08
    5210:	68 94       	set
    5212:	aa 24       	eor	r10, r10
    5214:	a7 f8       	bld	r10, 7
    5216:	0f 2e       	mov	r0, r31
    5218:	f4 e8       	ldi	r31, 0x84	; 132
    521a:	bf 2e       	mov	r11, r31
    521c:	f0 2d       	mov	r31, r0
    521e:	0f 2e       	mov	r0, r31
    5220:	fe e1       	ldi	r31, 0x1E	; 30
    5222:	cf 2e       	mov	r12, r31
    5224:	f0 2d       	mov	r31, r0
    5226:	d1 2c       	mov	r13, r1
    5228:	e1 2c       	mov	r14, r1
    522a:	f1 2c       	mov	r15, r1
    522c:	00 e0       	ldi	r16, 0x00	; 0
    522e:	10 e0       	ldi	r17, 0x00	; 0
    5230:	22 2d       	mov	r18, r2
    5232:	33 2d       	mov	r19, r3
    5234:	44 2d       	mov	r20, r4
    5236:	55 2d       	mov	r21, r5
    5238:	66 2d       	mov	r22, r6
    523a:	77 2d       	mov	r23, r7
    523c:	88 2d       	mov	r24, r8
    523e:	99 2d       	mov	r25, r9
    5240:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <__udivdi3>
    5244:	a2 2e       	mov	r10, r18
    5246:	b3 2e       	mov	r11, r19
    5248:	c4 2e       	mov	r12, r20
    524a:	d5 2e       	mov	r13, r21
    524c:	e6 2e       	mov	r14, r22
    524e:	f7 2e       	mov	r15, r23
    5250:	08 2f       	mov	r16, r24
    5252:	19 2f       	mov	r17, r25
    5254:	2a 2d       	mov	r18, r10
    5256:	3b 2d       	mov	r19, r11
    5258:	4c 2d       	mov	r20, r12
    525a:	5d 2d       	mov	r21, r13
    525c:	6e 2d       	mov	r22, r14
    525e:	7f 2d       	mov	r23, r15
    5260:	80 2f       	mov	r24, r16
    5262:	91 2f       	mov	r25, r17
    5264:	29 83       	std	Y+1, r18	; 0x01
    5266:	3a 83       	std	Y+2, r19	; 0x02
    5268:	4b 83       	std	Y+3, r20	; 0x03
    526a:	5c 83       	std	Y+4, r21	; 0x04
    526c:	6d 83       	std	Y+5, r22	; 0x05
    526e:	7e 83       	std	Y+6, r23	; 0x06
    5270:	8f 83       	std	Y+7, r24	; 0x07
    5272:	98 87       	std	Y+8, r25	; 0x08
	if (cycles < TCC_TOP_3) {
    5274:	a9 80       	ldd	r10, Y+1	; 0x01
    5276:	ba 80       	ldd	r11, Y+2	; 0x02
    5278:	cb 80       	ldd	r12, Y+3	; 0x03
    527a:	dc 80       	ldd	r13, Y+4	; 0x04
    527c:	ed 80       	ldd	r14, Y+5	; 0x05
    527e:	fe 80       	ldd	r15, Y+6	; 0x06
    5280:	0f 81       	ldd	r16, Y+7	; 0x07
    5282:	18 85       	ldd	r17, Y+8	; 0x08
    5284:	2a 2d       	mov	r18, r10
    5286:	3b 2d       	mov	r19, r11
    5288:	4c 2d       	mov	r20, r12
    528a:	5d 2d       	mov	r21, r13
    528c:	6e 2d       	mov	r22, r14
    528e:	7f 2d       	mov	r23, r15
    5290:	80 2f       	mov	r24, r16
    5292:	91 2f       	mov	r25, r17
    5294:	2e 3f       	cpi	r18, 0xFE	; 254
    5296:	3f 4f       	sbci	r19, 0xFF	; 255
    5298:	41 05       	cpc	r20, r1
    529a:	51 05       	cpc	r21, r1
    529c:	61 05       	cpc	r22, r1
    529e:	71 05       	cpc	r23, r1
    52a0:	81 05       	cpc	r24, r1
    52a2:	91 05       	cpc	r25, r1
    52a4:	09 f0       	breq	.+2      	; 0x52a8 <timer1SetPeriod+0x158>
    52a6:	24 f4       	brge	.+8      	; 0x52b0 <timer1SetPeriod+0x160>
		// no prescaler, full xtal
		_timer1PrescalerSelectBits = TCC1_PRSC_1;
    52a8:	81 e0       	ldi	r24, 0x01	; 1
    52aa:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <_timer1PrescalerSelectBits>
    52ae:	f1 c0       	rjmp	.+482    	; 0x5492 <timer1SetPeriod+0x342>
	} else if ((cycles >>= 3) < TCC_TOP_3) {
    52b0:	29 81       	ldd	r18, Y+1	; 0x01
    52b2:	3a 81       	ldd	r19, Y+2	; 0x02
    52b4:	4b 81       	ldd	r20, Y+3	; 0x03
    52b6:	5c 81       	ldd	r21, Y+4	; 0x04
    52b8:	6d 81       	ldd	r22, Y+5	; 0x05
    52ba:	7e 81       	ldd	r23, Y+6	; 0x06
    52bc:	8f 81       	ldd	r24, Y+7	; 0x07
    52be:	98 85       	ldd	r25, Y+8	; 0x08
    52c0:	03 e0       	ldi	r16, 0x03	; 3
    52c2:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__ashrdi3>
    52c6:	a2 2e       	mov	r10, r18
    52c8:	b3 2e       	mov	r11, r19
    52ca:	c4 2e       	mov	r12, r20
    52cc:	d5 2e       	mov	r13, r21
    52ce:	e6 2e       	mov	r14, r22
    52d0:	f7 2e       	mov	r15, r23
    52d2:	08 2f       	mov	r16, r24
    52d4:	19 2f       	mov	r17, r25
    52d6:	a9 82       	std	Y+1, r10	; 0x01
    52d8:	ba 82       	std	Y+2, r11	; 0x02
    52da:	cb 82       	std	Y+3, r12	; 0x03
    52dc:	dc 82       	std	Y+4, r13	; 0x04
    52de:	ed 82       	std	Y+5, r14	; 0x05
    52e0:	fe 82       	std	Y+6, r15	; 0x06
    52e2:	0f 83       	std	Y+7, r16	; 0x07
    52e4:	18 87       	std	Y+8, r17	; 0x08
    52e6:	a9 80       	ldd	r10, Y+1	; 0x01
    52e8:	ba 80       	ldd	r11, Y+2	; 0x02
    52ea:	cb 80       	ldd	r12, Y+3	; 0x03
    52ec:	dc 80       	ldd	r13, Y+4	; 0x04
    52ee:	ed 80       	ldd	r14, Y+5	; 0x05
    52f0:	fe 80       	ldd	r15, Y+6	; 0x06
    52f2:	0f 81       	ldd	r16, Y+7	; 0x07
    52f4:	18 85       	ldd	r17, Y+8	; 0x08
    52f6:	2a 2d       	mov	r18, r10
    52f8:	3b 2d       	mov	r19, r11
    52fa:	4c 2d       	mov	r20, r12
    52fc:	5d 2d       	mov	r21, r13
    52fe:	6e 2d       	mov	r22, r14
    5300:	7f 2d       	mov	r23, r15
    5302:	80 2f       	mov	r24, r16
    5304:	91 2f       	mov	r25, r17
    5306:	2e 3f       	cpi	r18, 0xFE	; 254
    5308:	3f 4f       	sbci	r19, 0xFF	; 255
    530a:	41 05       	cpc	r20, r1
    530c:	51 05       	cpc	r21, r1
    530e:	61 05       	cpc	r22, r1
    5310:	71 05       	cpc	r23, r1
    5312:	81 05       	cpc	r24, r1
    5314:	91 05       	cpc	r25, r1
    5316:	09 f0       	breq	.+2      	; 0x531a <timer1SetPeriod+0x1ca>
    5318:	24 f4       	brge	.+8      	; 0x5322 <timer1SetPeriod+0x1d2>
		// prescaler by /8
		_timer1PrescalerSelectBits = TCC1_PRSC_8;
    531a:	82 e0       	ldi	r24, 0x02	; 2
    531c:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <_timer1PrescalerSelectBits>
    5320:	b8 c0       	rjmp	.+368    	; 0x5492 <timer1SetPeriod+0x342>
	} else if ((cycles >>= 3) < TCC_TOP_3) {
    5322:	29 81       	ldd	r18, Y+1	; 0x01
    5324:	3a 81       	ldd	r19, Y+2	; 0x02
    5326:	4b 81       	ldd	r20, Y+3	; 0x03
    5328:	5c 81       	ldd	r21, Y+4	; 0x04
    532a:	6d 81       	ldd	r22, Y+5	; 0x05
    532c:	7e 81       	ldd	r23, Y+6	; 0x06
    532e:	8f 81       	ldd	r24, Y+7	; 0x07
    5330:	98 85       	ldd	r25, Y+8	; 0x08
    5332:	03 e0       	ldi	r16, 0x03	; 3
    5334:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__ashrdi3>
    5338:	a2 2e       	mov	r10, r18
    533a:	b3 2e       	mov	r11, r19
    533c:	c4 2e       	mov	r12, r20
    533e:	d5 2e       	mov	r13, r21
    5340:	e6 2e       	mov	r14, r22
    5342:	f7 2e       	mov	r15, r23
    5344:	08 2f       	mov	r16, r24
    5346:	19 2f       	mov	r17, r25
    5348:	a9 82       	std	Y+1, r10	; 0x01
    534a:	ba 82       	std	Y+2, r11	; 0x02
    534c:	cb 82       	std	Y+3, r12	; 0x03
    534e:	dc 82       	std	Y+4, r13	; 0x04
    5350:	ed 82       	std	Y+5, r14	; 0x05
    5352:	fe 82       	std	Y+6, r15	; 0x06
    5354:	0f 83       	std	Y+7, r16	; 0x07
    5356:	18 87       	std	Y+8, r17	; 0x08
    5358:	a9 80       	ldd	r10, Y+1	; 0x01
    535a:	ba 80       	ldd	r11, Y+2	; 0x02
    535c:	cb 80       	ldd	r12, Y+3	; 0x03
    535e:	dc 80       	ldd	r13, Y+4	; 0x04
    5360:	ed 80       	ldd	r14, Y+5	; 0x05
    5362:	fe 80       	ldd	r15, Y+6	; 0x06
    5364:	0f 81       	ldd	r16, Y+7	; 0x07
    5366:	18 85       	ldd	r17, Y+8	; 0x08
    5368:	2a 2d       	mov	r18, r10
    536a:	3b 2d       	mov	r19, r11
    536c:	4c 2d       	mov	r20, r12
    536e:	5d 2d       	mov	r21, r13
    5370:	6e 2d       	mov	r22, r14
    5372:	7f 2d       	mov	r23, r15
    5374:	80 2f       	mov	r24, r16
    5376:	91 2f       	mov	r25, r17
    5378:	2e 3f       	cpi	r18, 0xFE	; 254
    537a:	3f 4f       	sbci	r19, 0xFF	; 255
    537c:	41 05       	cpc	r20, r1
    537e:	51 05       	cpc	r21, r1
    5380:	61 05       	cpc	r22, r1
    5382:	71 05       	cpc	r23, r1
    5384:	81 05       	cpc	r24, r1
    5386:	91 05       	cpc	r25, r1
    5388:	09 f0       	breq	.+2      	; 0x538c <timer1SetPeriod+0x23c>
    538a:	24 f4       	brge	.+8      	; 0x5394 <timer1SetPeriod+0x244>
		// prescaler by /64
		_timer1PrescalerSelectBits = TCC1_PRSC_64;
    538c:	83 e0       	ldi	r24, 0x03	; 3
    538e:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <_timer1PrescalerSelectBits>
    5392:	7f c0       	rjmp	.+254    	; 0x5492 <timer1SetPeriod+0x342>
	} else if ((cycles >>= 2) < TCC_TOP_3) {
    5394:	29 81       	ldd	r18, Y+1	; 0x01
    5396:	3a 81       	ldd	r19, Y+2	; 0x02
    5398:	4b 81       	ldd	r20, Y+3	; 0x03
    539a:	5c 81       	ldd	r21, Y+4	; 0x04
    539c:	6d 81       	ldd	r22, Y+5	; 0x05
    539e:	7e 81       	ldd	r23, Y+6	; 0x06
    53a0:	8f 81       	ldd	r24, Y+7	; 0x07
    53a2:	98 85       	ldd	r25, Y+8	; 0x08
    53a4:	02 e0       	ldi	r16, 0x02	; 2
    53a6:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__ashrdi3>
    53aa:	a2 2e       	mov	r10, r18
    53ac:	b3 2e       	mov	r11, r19
    53ae:	c4 2e       	mov	r12, r20
    53b0:	d5 2e       	mov	r13, r21
    53b2:	e6 2e       	mov	r14, r22
    53b4:	f7 2e       	mov	r15, r23
    53b6:	08 2f       	mov	r16, r24
    53b8:	19 2f       	mov	r17, r25
    53ba:	a9 82       	std	Y+1, r10	; 0x01
    53bc:	ba 82       	std	Y+2, r11	; 0x02
    53be:	cb 82       	std	Y+3, r12	; 0x03
    53c0:	dc 82       	std	Y+4, r13	; 0x04
    53c2:	ed 82       	std	Y+5, r14	; 0x05
    53c4:	fe 82       	std	Y+6, r15	; 0x06
    53c6:	0f 83       	std	Y+7, r16	; 0x07
    53c8:	18 87       	std	Y+8, r17	; 0x08
    53ca:	a9 80       	ldd	r10, Y+1	; 0x01
    53cc:	ba 80       	ldd	r11, Y+2	; 0x02
    53ce:	cb 80       	ldd	r12, Y+3	; 0x03
    53d0:	dc 80       	ldd	r13, Y+4	; 0x04
    53d2:	ed 80       	ldd	r14, Y+5	; 0x05
    53d4:	fe 80       	ldd	r15, Y+6	; 0x06
    53d6:	0f 81       	ldd	r16, Y+7	; 0x07
    53d8:	18 85       	ldd	r17, Y+8	; 0x08
    53da:	2a 2d       	mov	r18, r10
    53dc:	3b 2d       	mov	r19, r11
    53de:	4c 2d       	mov	r20, r12
    53e0:	5d 2d       	mov	r21, r13
    53e2:	6e 2d       	mov	r22, r14
    53e4:	7f 2d       	mov	r23, r15
    53e6:	80 2f       	mov	r24, r16
    53e8:	91 2f       	mov	r25, r17
    53ea:	2e 3f       	cpi	r18, 0xFE	; 254
    53ec:	3f 4f       	sbci	r19, 0xFF	; 255
    53ee:	41 05       	cpc	r20, r1
    53f0:	51 05       	cpc	r21, r1
    53f2:	61 05       	cpc	r22, r1
    53f4:	71 05       	cpc	r23, r1
    53f6:	81 05       	cpc	r24, r1
    53f8:	91 05       	cpc	r25, r1
    53fa:	09 f0       	breq	.+2      	; 0x53fe <timer1SetPeriod+0x2ae>
    53fc:	24 f4       	brge	.+8      	; 0x5406 <timer1SetPeriod+0x2b6>
		// prescaler by /256
		_timer1PrescalerSelectBits = TCC1_PRSC_256;
    53fe:	84 e0       	ldi	r24, 0x04	; 4
    5400:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <_timer1PrescalerSelectBits>
    5404:	46 c0       	rjmp	.+140    	; 0x5492 <timer1SetPeriod+0x342>
	} else if ((cycles >>= 2) < TCC1_TOP) {
    5406:	29 81       	ldd	r18, Y+1	; 0x01
    5408:	3a 81       	ldd	r19, Y+2	; 0x02
    540a:	4b 81       	ldd	r20, Y+3	; 0x03
    540c:	5c 81       	ldd	r21, Y+4	; 0x04
    540e:	6d 81       	ldd	r22, Y+5	; 0x05
    5410:	7e 81       	ldd	r23, Y+6	; 0x06
    5412:	8f 81       	ldd	r24, Y+7	; 0x07
    5414:	98 85       	ldd	r25, Y+8	; 0x08
    5416:	02 e0       	ldi	r16, 0x02	; 2
    5418:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__ashrdi3>
    541c:	a2 2e       	mov	r10, r18
    541e:	b3 2e       	mov	r11, r19
    5420:	c4 2e       	mov	r12, r20
    5422:	d5 2e       	mov	r13, r21
    5424:	e6 2e       	mov	r14, r22
    5426:	f7 2e       	mov	r15, r23
    5428:	08 2f       	mov	r16, r24
    542a:	19 2f       	mov	r17, r25
    542c:	a9 82       	std	Y+1, r10	; 0x01
    542e:	ba 82       	std	Y+2, r11	; 0x02
    5430:	cb 82       	std	Y+3, r12	; 0x03
    5432:	dc 82       	std	Y+4, r13	; 0x04
    5434:	ed 82       	std	Y+5, r14	; 0x05
    5436:	fe 82       	std	Y+6, r15	; 0x06
    5438:	0f 83       	std	Y+7, r16	; 0x07
    543a:	18 87       	std	Y+8, r17	; 0x08
    543c:	a9 80       	ldd	r10, Y+1	; 0x01
    543e:	ba 80       	ldd	r11, Y+2	; 0x02
    5440:	cb 80       	ldd	r12, Y+3	; 0x03
    5442:	dc 80       	ldd	r13, Y+4	; 0x04
    5444:	ed 80       	ldd	r14, Y+5	; 0x05
    5446:	fe 80       	ldd	r15, Y+6	; 0x06
    5448:	0f 81       	ldd	r16, Y+7	; 0x07
    544a:	18 85       	ldd	r17, Y+8	; 0x08
    544c:	2a 2d       	mov	r18, r10
    544e:	3b 2d       	mov	r19, r11
    5450:	4c 2d       	mov	r20, r12
    5452:	5d 2d       	mov	r21, r13
    5454:	6e 2d       	mov	r22, r14
    5456:	7f 2d       	mov	r23, r15
    5458:	80 2f       	mov	r24, r16
    545a:	91 2f       	mov	r25, r17
    545c:	2e 3f       	cpi	r18, 0xFE	; 254
    545e:	3f 4f       	sbci	r19, 0xFF	; 255
    5460:	41 05       	cpc	r20, r1
    5462:	51 05       	cpc	r21, r1
    5464:	61 05       	cpc	r22, r1
    5466:	71 05       	cpc	r23, r1
    5468:	81 05       	cpc	r24, r1
    546a:	91 05       	cpc	r25, r1
    546c:	09 f0       	breq	.+2      	; 0x5470 <timer1SetPeriod+0x320>
    546e:	24 f4       	brge	.+8      	; 0x5478 <timer1SetPeriod+0x328>
		// prescaler by /1024
		_timer1PrescalerSelectBits = TCC1_PRSC_1024;
    5470:	85 e0       	ldi	r24, 0x05	; 5
    5472:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <_timer1PrescalerSelectBits>
    5476:	0d c0       	rjmp	.+26     	; 0x5492 <timer1SetPeriod+0x342>
	} else {
		// request was out of bounds, set as maximum
		_timer1PrescalerSelectBits = TCC1_PRSC_1024;
    5478:	85 e0       	ldi	r24, 0x05	; 5
    547a:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <_timer1PrescalerSelectBits>
		cycles = TCC1_TOP;
    547e:	8f ef       	ldi	r24, 0xFF	; 255
    5480:	89 83       	std	Y+1, r24	; 0x01
    5482:	8f ef       	ldi	r24, 0xFF	; 255
    5484:	8a 83       	std	Y+2, r24	; 0x02
    5486:	1b 82       	std	Y+3, r1	; 0x03
    5488:	1c 82       	std	Y+4, r1	; 0x04
    548a:	1d 82       	std	Y+5, r1	; 0x05
    548c:	1e 82       	std	Y+6, r1	; 0x06
    548e:	1f 82       	std	Y+7, r1	; 0x07
    5490:	18 86       	std	Y+8, r1	; 0x08
	}
	_timer1PwmCycles = cycles;
    5492:	89 81       	ldd	r24, Y+1	; 0x01
    5494:	9a 81       	ldd	r25, Y+2	; 0x02
    5496:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <_timer1PwmCycles+0x1>
    549a:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <_timer1PwmCycles>
	ICR1 = _timer1PwmCycles;
    549e:	86 e4       	ldi	r24, 0x46	; 70
    54a0:	90 e0       	ldi	r25, 0x00	; 0
    54a2:	20 91 f1 01 	lds	r18, 0x01F1	; 0x8001f1 <_timer1PwmCycles>
    54a6:	30 91 f2 01 	lds	r19, 0x01F2	; 0x8001f2 <_timer1PwmCycles+0x1>
    54aa:	fc 01       	movw	r30, r24
    54ac:	31 83       	std	Z+1, r19	; 0x01
    54ae:	20 83       	st	Z, r18
	 // reset prescaler bits
	timer1Stop();
    54b0:	0e 94 8a 28 	call	0x5114	; 0x5114 <timer1Stop>
}
    54b4:	00 00       	nop
    54b6:	2c 96       	adiw	r28, 0x0c	; 12
    54b8:	0f b6       	in	r0, 0x3f	; 63
    54ba:	f8 94       	cli
    54bc:	de bf       	out	0x3e, r29	; 62
    54be:	0f be       	out	0x3f, r0	; 63
    54c0:	cd bf       	out	0x3d, r28	; 61
    54c2:	df 91       	pop	r29
    54c4:	cf 91       	pop	r28
    54c6:	1f 91       	pop	r17
    54c8:	0f 91       	pop	r16
    54ca:	ff 90       	pop	r15
    54cc:	ef 90       	pop	r14
    54ce:	df 90       	pop	r13
    54d0:	cf 90       	pop	r12
    54d2:	bf 90       	pop	r11
    54d4:	af 90       	pop	r10
    54d6:	9f 90       	pop	r9
    54d8:	8f 90       	pop	r8
    54da:	7f 90       	pop	r7
    54dc:	6f 90       	pop	r6
    54de:	5f 90       	pop	r5
    54e0:	4f 90       	pop	r4
    54e2:	3f 90       	pop	r3
    54e4:	2f 90       	pop	r2
    54e6:	08 95       	ret

000054e8 <timer1Init>:

void timer1Init(int32_t microseconds) {
    54e8:	cf 93       	push	r28
    54ea:	df 93       	push	r29
    54ec:	00 d0       	rcall	.+0      	; 0x54ee <timer1Init+0x6>
    54ee:	00 d0       	rcall	.+0      	; 0x54f0 <timer1Init+0x8>
    54f0:	cd b7       	in	r28, 0x3d	; 61
    54f2:	de b7       	in	r29, 0x3e	; 62
    54f4:	69 83       	std	Y+1, r22	; 0x01
    54f6:	7a 83       	std	Y+2, r23	; 0x02
    54f8:	8b 83       	std	Y+3, r24	; 0x03
    54fa:	9c 83       	std	Y+4, r25	; 0x04
	// clear control register A
	// Set Timer1 mode 8 - PWM, Phase and Frequency Correct with ICR1 as top
	TCCR1A = TCC_1_MODE_8_A;
    54fc:	8f e4       	ldi	r24, 0x4F	; 79
    54fe:	90 e0       	ldi	r25, 0x00	; 0
    5500:	fc 01       	movw	r30, r24
    5502:	10 82       	st	Z, r1
	TCCR1B = TCC_1_MODE_8_B;
    5504:	8e e4       	ldi	r24, 0x4E	; 78
    5506:	90 e0       	ldi	r25, 0x00	; 0
    5508:	20 e1       	ldi	r18, 0x10	; 16
    550a:	fc 01       	movw	r30, r24
    550c:	20 83       	st	Z, r18
	timer1SetPeriod(microseconds);
    550e:	89 81       	ldd	r24, Y+1	; 0x01
    5510:	9a 81       	ldd	r25, Y+2	; 0x02
    5512:	ab 81       	ldd	r26, Y+3	; 0x03
    5514:	bc 81       	ldd	r27, Y+4	; 0x04
    5516:	bc 01       	movw	r22, r24
    5518:	cd 01       	movw	r24, r26
    551a:	0e 94 a8 28 	call	0x5150	; 0x5150 <timer1SetPeriod>
}
    551e:	00 00       	nop
    5520:	0f 90       	pop	r0
    5522:	0f 90       	pop	r0
    5524:	0f 90       	pop	r0
    5526:	0f 90       	pop	r0
    5528:	df 91       	pop	r29
    552a:	cf 91       	pop	r28
    552c:	08 95       	ret

0000552e <timer1SetPwmDuty>:

void timer1SetPwmDuty(Tcc1PwmOut pwmOut, uint16_t duty) {
    552e:	cf 93       	push	r28
    5530:	df 93       	push	r29
    5532:	cd b7       	in	r28, 0x3d	; 61
    5534:	de b7       	in	r29, 0x3e	; 62
    5536:	27 97       	sbiw	r28, 0x07	; 7
    5538:	0f b6       	in	r0, 0x3f	; 63
    553a:	f8 94       	cli
    553c:	de bf       	out	0x3e, r29	; 62
    553e:	0f be       	out	0x3f, r0	; 63
    5540:	cd bf       	out	0x3d, r28	; 61
    5542:	8d 83       	std	Y+5, r24	; 0x05
    5544:	7f 83       	std	Y+7, r23	; 0x07
    5546:	6e 83       	std	Y+6, r22	; 0x06
	uint32_t dutyCycle = _timer1PwmCycles * duty;
    5548:	40 91 f1 01 	lds	r20, 0x01F1	; 0x8001f1 <_timer1PwmCycles>
    554c:	50 91 f2 01 	lds	r21, 0x01F2	; 0x8001f2 <_timer1PwmCycles+0x1>
    5550:	2e 81       	ldd	r18, Y+6	; 0x06
    5552:	3f 81       	ldd	r19, Y+7	; 0x07
    5554:	42 9f       	mul	r20, r18
    5556:	c0 01       	movw	r24, r0
    5558:	43 9f       	mul	r20, r19
    555a:	90 0d       	add	r25, r0
    555c:	52 9f       	mul	r21, r18
    555e:	90 0d       	add	r25, r0
    5560:	11 24       	eor	r1, r1
    5562:	cc 01       	movw	r24, r24
    5564:	a0 e0       	ldi	r26, 0x00	; 0
    5566:	b0 e0       	ldi	r27, 0x00	; 0
    5568:	89 83       	std	Y+1, r24	; 0x01
    556a:	9a 83       	std	Y+2, r25	; 0x02
    556c:	ab 83       	std	Y+3, r26	; 0x03
    556e:	bc 83       	std	Y+4, r27	; 0x04
	dutyCycle >>= 10;
    5570:	89 81       	ldd	r24, Y+1	; 0x01
    5572:	9a 81       	ldd	r25, Y+2	; 0x02
    5574:	ab 81       	ldd	r26, Y+3	; 0x03
    5576:	bc 81       	ldd	r27, Y+4	; 0x04
    5578:	07 2e       	mov	r0, r23
    557a:	7a e0       	ldi	r23, 0x0A	; 10
    557c:	b6 95       	lsr	r27
    557e:	a7 95       	ror	r26
    5580:	97 95       	ror	r25
    5582:	87 95       	ror	r24
    5584:	7a 95       	dec	r23
    5586:	d1 f7       	brne	.-12     	; 0x557c <timer1SetPwmDuty+0x4e>
    5588:	70 2d       	mov	r23, r0
    558a:	89 83       	std	Y+1, r24	; 0x01
    558c:	9a 83       	std	Y+2, r25	; 0x02
    558e:	ab 83       	std	Y+3, r26	; 0x03
    5590:	bc 83       	std	Y+4, r27	; 0x04
	switch (pwmOut) {
    5592:	8d 81       	ldd	r24, Y+5	; 0x05
    5594:	88 2f       	mov	r24, r24
    5596:	90 e0       	ldi	r25, 0x00	; 0
    5598:	00 97       	sbiw	r24, 0x00	; 0
    559a:	19 f0       	breq	.+6      	; 0x55a2 <timer1SetPwmDuty+0x74>
    559c:	01 97       	sbiw	r24, 0x01	; 1
    559e:	49 f0       	breq	.+18     	; 0x55b2 <timer1SetPwmDuty+0x84>
			OCR1B = dutyCycle;
			break;
		}
		// no default
	}
}
    55a0:	10 c0       	rjmp	.+32     	; 0x55c2 <timer1SetPwmDuty+0x94>
void timer1SetPwmDuty(Tcc1PwmOut pwmOut, uint16_t duty) {
	uint32_t dutyCycle = _timer1PwmCycles * duty;
	dutyCycle >>= 10;
	switch (pwmOut) {
		case TCC1_PWM_OUT_A: {
			OCR1A = dutyCycle;
    55a2:	8a e4       	ldi	r24, 0x4A	; 74
    55a4:	90 e0       	ldi	r25, 0x00	; 0
    55a6:	29 81       	ldd	r18, Y+1	; 0x01
    55a8:	3a 81       	ldd	r19, Y+2	; 0x02
    55aa:	fc 01       	movw	r30, r24
    55ac:	31 83       	std	Z+1, r19	; 0x01
    55ae:	20 83       	st	Z, r18
			break;
    55b0:	08 c0       	rjmp	.+16     	; 0x55c2 <timer1SetPwmDuty+0x94>
		}
		case TCC1_PWM_OUT_B: {
			OCR1B = dutyCycle;
    55b2:	88 e4       	ldi	r24, 0x48	; 72
    55b4:	90 e0       	ldi	r25, 0x00	; 0
    55b6:	29 81       	ldd	r18, Y+1	; 0x01
    55b8:	3a 81       	ldd	r19, Y+2	; 0x02
    55ba:	fc 01       	movw	r30, r24
    55bc:	31 83       	std	Z+1, r19	; 0x01
    55be:	20 83       	st	Z, r18
			break;
    55c0:	00 00       	nop
		}
		// no default
	}
}
    55c2:	00 00       	nop
    55c4:	27 96       	adiw	r28, 0x07	; 7
    55c6:	0f b6       	in	r0, 0x3f	; 63
    55c8:	f8 94       	cli
    55ca:	de bf       	out	0x3e, r29	; 62
    55cc:	0f be       	out	0x3f, r0	; 63
    55ce:	cd bf       	out	0x3d, r28	; 61
    55d0:	df 91       	pop	r29
    55d2:	cf 91       	pop	r28
    55d4:	08 95       	ret

000055d6 <timer1EnablePwm>:

void timer1EnablePwm(Tcc1PwmOut pwmOut, uint16_t duty, int32_t microseconds) {
    55d6:	cf 93       	push	r28
    55d8:	df 93       	push	r29
    55da:	cd b7       	in	r28, 0x3d	; 61
    55dc:	de b7       	in	r29, 0x3e	; 62
    55de:	27 97       	sbiw	r28, 0x07	; 7
    55e0:	0f b6       	in	r0, 0x3f	; 63
    55e2:	f8 94       	cli
    55e4:	de bf       	out	0x3e, r29	; 62
    55e6:	0f be       	out	0x3f, r0	; 63
    55e8:	cd bf       	out	0x3d, r28	; 61
    55ea:	89 83       	std	Y+1, r24	; 0x01
    55ec:	7b 83       	std	Y+3, r23	; 0x03
    55ee:	6a 83       	std	Y+2, r22	; 0x02
    55f0:	2c 83       	std	Y+4, r18	; 0x04
    55f2:	3d 83       	std	Y+5, r19	; 0x05
    55f4:	4e 83       	std	Y+6, r20	; 0x06
    55f6:	5f 83       	std	Y+7, r21	; 0x07
	if (microseconds > 0) {
    55f8:	8c 81       	ldd	r24, Y+4	; 0x04
    55fa:	9d 81       	ldd	r25, Y+5	; 0x05
    55fc:	ae 81       	ldd	r26, Y+6	; 0x06
    55fe:	bf 81       	ldd	r27, Y+7	; 0x07
    5600:	18 16       	cp	r1, r24
    5602:	19 06       	cpc	r1, r25
    5604:	1a 06       	cpc	r1, r26
    5606:	1b 06       	cpc	r1, r27
    5608:	44 f4       	brge	.+16     	; 0x561a <timer1EnablePwm+0x44>
		timer1SetPeriod(microseconds);
    560a:	8c 81       	ldd	r24, Y+4	; 0x04
    560c:	9d 81       	ldd	r25, Y+5	; 0x05
    560e:	ae 81       	ldd	r26, Y+6	; 0x06
    5610:	bf 81       	ldd	r27, Y+7	; 0x07
    5612:	bc 01       	movw	r22, r24
    5614:	cd 01       	movw	r24, r26
    5616:	0e 94 a8 28 	call	0x5150	; 0x5150 <timer1SetPeriod>
	}
	switch (pwmOut) {
    561a:	89 81       	ldd	r24, Y+1	; 0x01
    561c:	88 2f       	mov	r24, r24
    561e:	90 e0       	ldi	r25, 0x00	; 0
    5620:	00 97       	sbiw	r24, 0x00	; 0
    5622:	19 f0       	breq	.+6      	; 0x562a <timer1EnablePwm+0x54>
    5624:	01 97       	sbiw	r24, 0x01	; 1
    5626:	a1 f0       	breq	.+40     	; 0x5650 <timer1EnablePwm+0x7a>
    5628:	26 c0       	rjmp	.+76     	; 0x5676 <timer1EnablePwm+0xa0>
		case TCC1_PWM_OUT_A: {
			// sets data direction register for pwm output pin
			TCC1_PWM_DDR |= _BV(TCC1_PWM_PIN_A);
    562a:	81 e3       	ldi	r24, 0x31	; 49
    562c:	90 e0       	ldi	r25, 0x00	; 0
    562e:	21 e3       	ldi	r18, 0x31	; 49
    5630:	30 e0       	ldi	r19, 0x00	; 0
    5632:	f9 01       	movw	r30, r18
    5634:	20 81       	ld	r18, Z
    5636:	20 62       	ori	r18, 0x20	; 32
    5638:	fc 01       	movw	r30, r24
    563a:	20 83       	st	Z, r18
			// activates the output pin
			TCCR1A |= _BV(COM1A1);
    563c:	8f e4       	ldi	r24, 0x4F	; 79
    563e:	90 e0       	ldi	r25, 0x00	; 0
    5640:	2f e4       	ldi	r18, 0x4F	; 79
    5642:	30 e0       	ldi	r19, 0x00	; 0
    5644:	f9 01       	movw	r30, r18
    5646:	20 81       	ld	r18, Z
    5648:	20 68       	ori	r18, 0x80	; 128
    564a:	fc 01       	movw	r30, r24
    564c:	20 83       	st	Z, r18
			break;
    564e:	13 c0       	rjmp	.+38     	; 0x5676 <timer1EnablePwm+0xa0>
		}
		case TCC1_PWM_OUT_B: {
			// sets data direction register for pwm output pin
			TCC1_PWM_DDR |= _BV(TCC1_PWM_PIN_B);
    5650:	81 e3       	ldi	r24, 0x31	; 49
    5652:	90 e0       	ldi	r25, 0x00	; 0
    5654:	21 e3       	ldi	r18, 0x31	; 49
    5656:	30 e0       	ldi	r19, 0x00	; 0
    5658:	f9 01       	movw	r30, r18
    565a:	20 81       	ld	r18, Z
    565c:	20 61       	ori	r18, 0x10	; 16
    565e:	fc 01       	movw	r30, r24
    5660:	20 83       	st	Z, r18
			// activates the output pin
			TCCR1A |= _BV(COM1B1);
    5662:	8f e4       	ldi	r24, 0x4F	; 79
    5664:	90 e0       	ldi	r25, 0x00	; 0
    5666:	2f e4       	ldi	r18, 0x4F	; 79
    5668:	30 e0       	ldi	r19, 0x00	; 0
    566a:	f9 01       	movw	r30, r18
    566c:	20 81       	ld	r18, Z
    566e:	20 62       	ori	r18, 0x20	; 32
    5670:	fc 01       	movw	r30, r24
    5672:	20 83       	st	Z, r18
			break;
    5674:	00 00       	nop
		}
		// no default
	}
	timer1SetPwmDuty(pwmOut, duty);
    5676:	8a 81       	ldd	r24, Y+2	; 0x02
    5678:	9b 81       	ldd	r25, Y+3	; 0x03
    567a:	bc 01       	movw	r22, r24
    567c:	89 81       	ldd	r24, Y+1	; 0x01
    567e:	0e 94 97 2a 	call	0x552e	; 0x552e <timer1SetPwmDuty>
	timer1Start();
    5682:	0e 94 77 28 	call	0x50ee	; 0x50ee <timer1Start>
}
    5686:	00 00       	nop
    5688:	27 96       	adiw	r28, 0x07	; 7
    568a:	0f b6       	in	r0, 0x3f	; 63
    568c:	f8 94       	cli
    568e:	de bf       	out	0x3e, r29	; 62
    5690:	0f be       	out	0x3f, r0	; 63
    5692:	cd bf       	out	0x3d, r28	; 61
    5694:	df 91       	pop	r29
    5696:	cf 91       	pop	r28
    5698:	08 95       	ret

0000569a <timer1DisablePwm>:

void timer1DisablePwm(Tcc1PwmOut pwmOut) {
    569a:	cf 93       	push	r28
    569c:	df 93       	push	r29
    569e:	1f 92       	push	r1
    56a0:	cd b7       	in	r28, 0x3d	; 61
    56a2:	de b7       	in	r29, 0x3e	; 62
    56a4:	89 83       	std	Y+1, r24	; 0x01
	switch (pwmOut) {
    56a6:	89 81       	ldd	r24, Y+1	; 0x01
    56a8:	88 2f       	mov	r24, r24
    56aa:	90 e0       	ldi	r25, 0x00	; 0
    56ac:	00 97       	sbiw	r24, 0x00	; 0
    56ae:	19 f0       	breq	.+6      	; 0x56b6 <timer1DisablePwm+0x1c>
    56b0:	01 97       	sbiw	r24, 0x01	; 1
    56b2:	59 f0       	breq	.+22     	; 0x56ca <timer1DisablePwm+0x30>
			TCCR1A &= ~_BV(COM1B1);
			break;
		}
	// no default
	}
}
    56b4:	14 c0       	rjmp	.+40     	; 0x56de <timer1DisablePwm+0x44>

void timer1DisablePwm(Tcc1PwmOut pwmOut) {
	switch (pwmOut) {
		case TCC1_PWM_OUT_A: {
			// deactivates the output pin
			TCCR1A &= ~_BV(COM1A1);
    56b6:	8f e4       	ldi	r24, 0x4F	; 79
    56b8:	90 e0       	ldi	r25, 0x00	; 0
    56ba:	2f e4       	ldi	r18, 0x4F	; 79
    56bc:	30 e0       	ldi	r19, 0x00	; 0
    56be:	f9 01       	movw	r30, r18
    56c0:	20 81       	ld	r18, Z
    56c2:	2f 77       	andi	r18, 0x7F	; 127
    56c4:	fc 01       	movw	r30, r24
    56c6:	20 83       	st	Z, r18
			break;
    56c8:	0a c0       	rjmp	.+20     	; 0x56de <timer1DisablePwm+0x44>
		}
		case TCC1_PWM_OUT_B: {
			// deactivates the output pin
			TCCR1A &= ~_BV(COM1B1);
    56ca:	8f e4       	ldi	r24, 0x4F	; 79
    56cc:	90 e0       	ldi	r25, 0x00	; 0
    56ce:	2f e4       	ldi	r18, 0x4F	; 79
    56d0:	30 e0       	ldi	r19, 0x00	; 0
    56d2:	f9 01       	movw	r30, r18
    56d4:	20 81       	ld	r18, Z
    56d6:	2f 7d       	andi	r18, 0xDF	; 223
    56d8:	fc 01       	movw	r30, r24
    56da:	20 83       	st	Z, r18
			break;
    56dc:	00 00       	nop
		}
	// no default
	}
}
    56de:	00 00       	nop
    56e0:	0f 90       	pop	r0
    56e2:	df 91       	pop	r29
    56e4:	cf 91       	pop	r28
    56e6:	08 95       	ret

000056e8 <timer1EnableInterrupt>:

void timer1EnableInterrupt(void) {
    56e8:	cf 93       	push	r28
    56ea:	df 93       	push	r29
    56ec:	cd b7       	in	r28, 0x3d	; 61
    56ee:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= _BV(TOIE1);
    56f0:	89 e5       	ldi	r24, 0x59	; 89
    56f2:	90 e0       	ldi	r25, 0x00	; 0
    56f4:	29 e5       	ldi	r18, 0x59	; 89
    56f6:	30 e0       	ldi	r19, 0x00	; 0
    56f8:	f9 01       	movw	r30, r18
    56fa:	20 81       	ld	r18, Z
    56fc:	24 60       	ori	r18, 0x04	; 4
    56fe:	fc 01       	movw	r30, r24
    5700:	20 83       	st	Z, r18
	timer1Start();
    5702:	0e 94 77 28 	call	0x50ee	; 0x50ee <timer1Start>
}
    5706:	00 00       	nop
    5708:	df 91       	pop	r29
    570a:	cf 91       	pop	r28
    570c:	08 95       	ret

0000570e <timer1DisableInterrupt>:

void timer1DisableInterrupt(void) {
    570e:	cf 93       	push	r28
    5710:	df 93       	push	r29
    5712:	cd b7       	in	r28, 0x3d	; 61
    5714:	de b7       	in	r29, 0x3e	; 62
	TIMSK &= ~_BV(TOIE1);
    5716:	89 e5       	ldi	r24, 0x59	; 89
    5718:	90 e0       	ldi	r25, 0x00	; 0
    571a:	29 e5       	ldi	r18, 0x59	; 89
    571c:	30 e0       	ldi	r19, 0x00	; 0
    571e:	f9 01       	movw	r30, r18
    5720:	20 81       	ld	r18, Z
    5722:	2b 7f       	andi	r18, 0xFB	; 251
    5724:	fc 01       	movw	r30, r24
    5726:	20 83       	st	Z, r18
}
    5728:	00 00       	nop
    572a:	df 91       	pop	r29
    572c:	cf 91       	pop	r28
    572e:	08 95       	ret

00005730 <timer1RegisterCallback>:

void timer1RegisterCallback(Timer1Callback *callback, void *userData) {
    5730:	cf 93       	push	r28
    5732:	df 93       	push	r29
    5734:	00 d0       	rcall	.+0      	; 0x5736 <timer1RegisterCallback+0x6>
    5736:	00 d0       	rcall	.+0      	; 0x5738 <timer1RegisterCallback+0x8>
    5738:	cd b7       	in	r28, 0x3d	; 61
    573a:	de b7       	in	r29, 0x3e	; 62
    573c:	9a 83       	std	Y+2, r25	; 0x02
    573e:	89 83       	std	Y+1, r24	; 0x01
    5740:	7c 83       	std	Y+4, r23	; 0x04
    5742:	6b 83       	std	Y+3, r22	; 0x03
	_timerCallback = callback;
    5744:	89 81       	ldd	r24, Y+1	; 0x01
    5746:	9a 81       	ldd	r25, Y+2	; 0x02
    5748:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <_timerCallback+0x1>
    574c:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <_timerCallback>
	_timer1CallbackUserData = userData;
    5750:	8b 81       	ldd	r24, Y+3	; 0x03
    5752:	9c 81       	ldd	r25, Y+4	; 0x04
    5754:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <_timer1CallbackUserData+0x1>
    5758:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <_timer1CallbackUserData>
}
    575c:	00 00       	nop
    575e:	0f 90       	pop	r0
    5760:	0f 90       	pop	r0
    5762:	0f 90       	pop	r0
    5764:	0f 90       	pop	r0
    5766:	df 91       	pop	r29
    5768:	cf 91       	pop	r28
    576a:	08 95       	ret

0000576c <timer1SetCallbackUserData>:

void timer1SetCallbackUserData(void *userData)  {
    576c:	cf 93       	push	r28
    576e:	df 93       	push	r29
    5770:	00 d0       	rcall	.+0      	; 0x5772 <timer1SetCallbackUserData+0x6>
    5772:	00 d0       	rcall	.+0      	; 0x5774 <timer1SetCallbackUserData+0x8>
    5774:	cd b7       	in	r28, 0x3d	; 61
    5776:	de b7       	in	r29, 0x3e	; 62
    5778:	9c 83       	std	Y+4, r25	; 0x04
    577a:	8b 83       	std	Y+3, r24	; 0x03
     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    577c:	8f e5       	ldi	r24, 0x5F	; 95
    577e:	90 e0       	ldi	r25, 0x00	; 0
    5780:	fc 01       	movw	r30, r24
    5782:	80 81       	ld	r24, Z
    5784:	8a 83       	std	Y+2, r24	; 0x02
    5786:	0e 94 59 28 	call	0x50b2	; 0x50b2 <__iCliRetVal>
    578a:	89 83       	std	Y+1, r24	; 0x01
    578c:	07 c0       	rjmp	.+14     	; 0x579c <timer1SetCallbackUserData+0x30>
		_timer1CallbackUserData = userData;
    578e:	8b 81       	ldd	r24, Y+3	; 0x03
    5790:	9c 81       	ldd	r25, Y+4	; 0x04
    5792:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <_timer1CallbackUserData+0x1>
    5796:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <_timer1CallbackUserData>
	_timerCallback = callback;
	_timer1CallbackUserData = userData;
}

void timer1SetCallbackUserData(void *userData)  {
     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    579a:	19 82       	std	Y+1, r1	; 0x01
    579c:	89 81       	ldd	r24, Y+1	; 0x01
    579e:	88 23       	and	r24, r24
    57a0:	b1 f7       	brne	.-20     	; 0x578e <timer1SetCallbackUserData+0x22>
    57a2:	ce 01       	movw	r24, r28
    57a4:	02 96       	adiw	r24, 0x02	; 2
    57a6:	0e 94 62 28 	call	0x50c4	; 0x50c4 <__iRestore>
		_timer1CallbackUserData = userData;
	}
}
    57aa:	00 00       	nop
    57ac:	0f 90       	pop	r0
    57ae:	0f 90       	pop	r0
    57b0:	0f 90       	pop	r0
    57b2:	0f 90       	pop	r0
    57b4:	df 91       	pop	r29
    57b6:	cf 91       	pop	r28
    57b8:	08 95       	ret

000057ba <__vector_9>:

ISR(TIMER1_OVF_vect) {
    57ba:	1f 92       	push	r1
    57bc:	0f 92       	push	r0
    57be:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    57c2:	0f 92       	push	r0
    57c4:	11 24       	eor	r1, r1
    57c6:	2f 93       	push	r18
    57c8:	3f 93       	push	r19
    57ca:	4f 93       	push	r20
    57cc:	5f 93       	push	r21
    57ce:	6f 93       	push	r22
    57d0:	7f 93       	push	r23
    57d2:	8f 93       	push	r24
    57d4:	9f 93       	push	r25
    57d6:	af 93       	push	r26
    57d8:	bf 93       	push	r27
    57da:	ef 93       	push	r30
    57dc:	ff 93       	push	r31
    57de:	cf 93       	push	r28
    57e0:	df 93       	push	r29
    57e2:	cd b7       	in	r28, 0x3d	; 61
    57e4:	de b7       	in	r29, 0x3e	; 62
	if (_timerCallback != NULL) {
    57e6:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <_timerCallback>
    57ea:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <_timerCallback+0x1>
    57ee:	89 2b       	or	r24, r25
    57f0:	51 f0       	breq	.+20     	; 0x5806 <__vector_9+0x4c>
		_timerCallback(_timer1CallbackUserData);
    57f2:	20 91 f3 01 	lds	r18, 0x01F3	; 0x8001f3 <_timerCallback>
    57f6:	30 91 f4 01 	lds	r19, 0x01F4	; 0x8001f4 <_timerCallback+0x1>
    57fa:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <_timer1CallbackUserData>
    57fe:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <_timer1CallbackUserData+0x1>
    5802:	f9 01       	movw	r30, r18
    5804:	09 95       	icall
	}
    5806:	00 00       	nop
    5808:	df 91       	pop	r29
    580a:	cf 91       	pop	r28
    580c:	ff 91       	pop	r31
    580e:	ef 91       	pop	r30
    5810:	bf 91       	pop	r27
    5812:	af 91       	pop	r26
    5814:	9f 91       	pop	r25
    5816:	8f 91       	pop	r24
    5818:	7f 91       	pop	r23
    581a:	6f 91       	pop	r22
    581c:	5f 91       	pop	r21
    581e:	4f 91       	pop	r20
    5820:	3f 91       	pop	r19
    5822:	2f 91       	pop	r18
    5824:	0f 90       	pop	r0
    5826:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    582a:	0f 90       	pop	r0
    582c:	1f 90       	pop	r1
    582e:	18 95       	reti

00005830 <__cmpsf2>:
    5830:	0e 94 be 2c 	call	0x597c	; 0x597c <__fp_cmp>
    5834:	08 f4       	brcc	.+2      	; 0x5838 <__cmpsf2+0x8>
    5836:	81 e0       	ldi	r24, 0x01	; 1
    5838:	08 95       	ret

0000583a <__divsf3>:
    583a:	0e 94 31 2c 	call	0x5862	; 0x5862 <__divsf3x>
    583e:	0c 94 f9 2c 	jmp	0x59f2	; 0x59f2 <__fp_round>
    5842:	0e 94 f2 2c 	call	0x59e4	; 0x59e4 <__fp_pscB>
    5846:	58 f0       	brcs	.+22     	; 0x585e <__divsf3+0x24>
    5848:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__fp_pscA>
    584c:	40 f0       	brcs	.+16     	; 0x585e <__divsf3+0x24>
    584e:	29 f4       	brne	.+10     	; 0x585a <__divsf3+0x20>
    5850:	5f 3f       	cpi	r21, 0xFF	; 255
    5852:	29 f0       	breq	.+10     	; 0x585e <__divsf3+0x24>
    5854:	0c 94 e2 2c 	jmp	0x59c4	; 0x59c4 <__fp_inf>
    5858:	51 11       	cpse	r21, r1
    585a:	0c 94 2d 2d 	jmp	0x5a5a	; 0x5a5a <__fp_szero>
    585e:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__fp_nan>

00005862 <__divsf3x>:
    5862:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__fp_split3>
    5866:	68 f3       	brcs	.-38     	; 0x5842 <__divsf3+0x8>

00005868 <__divsf3_pse>:
    5868:	99 23       	and	r25, r25
    586a:	b1 f3       	breq	.-20     	; 0x5858 <__divsf3+0x1e>
    586c:	55 23       	and	r21, r21
    586e:	91 f3       	breq	.-28     	; 0x5854 <__divsf3+0x1a>
    5870:	95 1b       	sub	r25, r21
    5872:	55 0b       	sbc	r21, r21
    5874:	bb 27       	eor	r27, r27
    5876:	aa 27       	eor	r26, r26
    5878:	62 17       	cp	r22, r18
    587a:	73 07       	cpc	r23, r19
    587c:	84 07       	cpc	r24, r20
    587e:	38 f0       	brcs	.+14     	; 0x588e <__divsf3_pse+0x26>
    5880:	9f 5f       	subi	r25, 0xFF	; 255
    5882:	5f 4f       	sbci	r21, 0xFF	; 255
    5884:	22 0f       	add	r18, r18
    5886:	33 1f       	adc	r19, r19
    5888:	44 1f       	adc	r20, r20
    588a:	aa 1f       	adc	r26, r26
    588c:	a9 f3       	breq	.-22     	; 0x5878 <__divsf3_pse+0x10>
    588e:	35 d0       	rcall	.+106    	; 0x58fa <__divsf3_pse+0x92>
    5890:	0e 2e       	mov	r0, r30
    5892:	3a f0       	brmi	.+14     	; 0x58a2 <__divsf3_pse+0x3a>
    5894:	e0 e8       	ldi	r30, 0x80	; 128
    5896:	32 d0       	rcall	.+100    	; 0x58fc <__divsf3_pse+0x94>
    5898:	91 50       	subi	r25, 0x01	; 1
    589a:	50 40       	sbci	r21, 0x00	; 0
    589c:	e6 95       	lsr	r30
    589e:	00 1c       	adc	r0, r0
    58a0:	ca f7       	brpl	.-14     	; 0x5894 <__divsf3_pse+0x2c>
    58a2:	2b d0       	rcall	.+86     	; 0x58fa <__divsf3_pse+0x92>
    58a4:	fe 2f       	mov	r31, r30
    58a6:	29 d0       	rcall	.+82     	; 0x58fa <__divsf3_pse+0x92>
    58a8:	66 0f       	add	r22, r22
    58aa:	77 1f       	adc	r23, r23
    58ac:	88 1f       	adc	r24, r24
    58ae:	bb 1f       	adc	r27, r27
    58b0:	26 17       	cp	r18, r22
    58b2:	37 07       	cpc	r19, r23
    58b4:	48 07       	cpc	r20, r24
    58b6:	ab 07       	cpc	r26, r27
    58b8:	b0 e8       	ldi	r27, 0x80	; 128
    58ba:	09 f0       	breq	.+2      	; 0x58be <__divsf3_pse+0x56>
    58bc:	bb 0b       	sbc	r27, r27
    58be:	80 2d       	mov	r24, r0
    58c0:	bf 01       	movw	r22, r30
    58c2:	ff 27       	eor	r31, r31
    58c4:	93 58       	subi	r25, 0x83	; 131
    58c6:	5f 4f       	sbci	r21, 0xFF	; 255
    58c8:	3a f0       	brmi	.+14     	; 0x58d8 <__divsf3_pse+0x70>
    58ca:	9e 3f       	cpi	r25, 0xFE	; 254
    58cc:	51 05       	cpc	r21, r1
    58ce:	78 f0       	brcs	.+30     	; 0x58ee <__divsf3_pse+0x86>
    58d0:	0c 94 e2 2c 	jmp	0x59c4	; 0x59c4 <__fp_inf>
    58d4:	0c 94 2d 2d 	jmp	0x5a5a	; 0x5a5a <__fp_szero>
    58d8:	5f 3f       	cpi	r21, 0xFF	; 255
    58da:	e4 f3       	brlt	.-8      	; 0x58d4 <__divsf3_pse+0x6c>
    58dc:	98 3e       	cpi	r25, 0xE8	; 232
    58de:	d4 f3       	brlt	.-12     	; 0x58d4 <__divsf3_pse+0x6c>
    58e0:	86 95       	lsr	r24
    58e2:	77 95       	ror	r23
    58e4:	67 95       	ror	r22
    58e6:	b7 95       	ror	r27
    58e8:	f7 95       	ror	r31
    58ea:	9f 5f       	subi	r25, 0xFF	; 255
    58ec:	c9 f7       	brne	.-14     	; 0x58e0 <__divsf3_pse+0x78>
    58ee:	88 0f       	add	r24, r24
    58f0:	91 1d       	adc	r25, r1
    58f2:	96 95       	lsr	r25
    58f4:	87 95       	ror	r24
    58f6:	97 f9       	bld	r25, 7
    58f8:	08 95       	ret
    58fa:	e1 e0       	ldi	r30, 0x01	; 1
    58fc:	66 0f       	add	r22, r22
    58fe:	77 1f       	adc	r23, r23
    5900:	88 1f       	adc	r24, r24
    5902:	bb 1f       	adc	r27, r27
    5904:	62 17       	cp	r22, r18
    5906:	73 07       	cpc	r23, r19
    5908:	84 07       	cpc	r24, r20
    590a:	ba 07       	cpc	r27, r26
    590c:	20 f0       	brcs	.+8      	; 0x5916 <__divsf3_pse+0xae>
    590e:	62 1b       	sub	r22, r18
    5910:	73 0b       	sbc	r23, r19
    5912:	84 0b       	sbc	r24, r20
    5914:	ba 0b       	sbc	r27, r26
    5916:	ee 1f       	adc	r30, r30
    5918:	88 f7       	brcc	.-30     	; 0x58fc <__divsf3_pse+0x94>
    591a:	e0 95       	com	r30
    591c:	08 95       	ret

0000591e <__fixunssfsi>:
    591e:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <__fp_splitA>
    5922:	88 f0       	brcs	.+34     	; 0x5946 <__fixunssfsi+0x28>
    5924:	9f 57       	subi	r25, 0x7F	; 127
    5926:	98 f0       	brcs	.+38     	; 0x594e <__fixunssfsi+0x30>
    5928:	b9 2f       	mov	r27, r25
    592a:	99 27       	eor	r25, r25
    592c:	b7 51       	subi	r27, 0x17	; 23
    592e:	b0 f0       	brcs	.+44     	; 0x595c <__fixunssfsi+0x3e>
    5930:	e1 f0       	breq	.+56     	; 0x596a <__fixunssfsi+0x4c>
    5932:	66 0f       	add	r22, r22
    5934:	77 1f       	adc	r23, r23
    5936:	88 1f       	adc	r24, r24
    5938:	99 1f       	adc	r25, r25
    593a:	1a f0       	brmi	.+6      	; 0x5942 <__fixunssfsi+0x24>
    593c:	ba 95       	dec	r27
    593e:	c9 f7       	brne	.-14     	; 0x5932 <__fixunssfsi+0x14>
    5940:	14 c0       	rjmp	.+40     	; 0x596a <__fixunssfsi+0x4c>
    5942:	b1 30       	cpi	r27, 0x01	; 1
    5944:	91 f0       	breq	.+36     	; 0x596a <__fixunssfsi+0x4c>
    5946:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <__fp_zero>
    594a:	b1 e0       	ldi	r27, 0x01	; 1
    594c:	08 95       	ret
    594e:	0c 94 2c 2d 	jmp	0x5a58	; 0x5a58 <__fp_zero>
    5952:	67 2f       	mov	r22, r23
    5954:	78 2f       	mov	r23, r24
    5956:	88 27       	eor	r24, r24
    5958:	b8 5f       	subi	r27, 0xF8	; 248
    595a:	39 f0       	breq	.+14     	; 0x596a <__fixunssfsi+0x4c>
    595c:	b9 3f       	cpi	r27, 0xF9	; 249
    595e:	cc f3       	brlt	.-14     	; 0x5952 <__fixunssfsi+0x34>
    5960:	86 95       	lsr	r24
    5962:	77 95       	ror	r23
    5964:	67 95       	ror	r22
    5966:	b3 95       	inc	r27
    5968:	d9 f7       	brne	.-10     	; 0x5960 <__fixunssfsi+0x42>
    596a:	3e f4       	brtc	.+14     	; 0x597a <__fixunssfsi+0x5c>
    596c:	90 95       	com	r25
    596e:	80 95       	com	r24
    5970:	70 95       	com	r23
    5972:	61 95       	neg	r22
    5974:	7f 4f       	sbci	r23, 0xFF	; 255
    5976:	8f 4f       	sbci	r24, 0xFF	; 255
    5978:	9f 4f       	sbci	r25, 0xFF	; 255
    597a:	08 95       	ret

0000597c <__fp_cmp>:
    597c:	99 0f       	add	r25, r25
    597e:	00 08       	sbc	r0, r0
    5980:	55 0f       	add	r21, r21
    5982:	aa 0b       	sbc	r26, r26
    5984:	e0 e8       	ldi	r30, 0x80	; 128
    5986:	fe ef       	ldi	r31, 0xFE	; 254
    5988:	16 16       	cp	r1, r22
    598a:	17 06       	cpc	r1, r23
    598c:	e8 07       	cpc	r30, r24
    598e:	f9 07       	cpc	r31, r25
    5990:	c0 f0       	brcs	.+48     	; 0x59c2 <__fp_cmp+0x46>
    5992:	12 16       	cp	r1, r18
    5994:	13 06       	cpc	r1, r19
    5996:	e4 07       	cpc	r30, r20
    5998:	f5 07       	cpc	r31, r21
    599a:	98 f0       	brcs	.+38     	; 0x59c2 <__fp_cmp+0x46>
    599c:	62 1b       	sub	r22, r18
    599e:	73 0b       	sbc	r23, r19
    59a0:	84 0b       	sbc	r24, r20
    59a2:	95 0b       	sbc	r25, r21
    59a4:	39 f4       	brne	.+14     	; 0x59b4 <__fp_cmp+0x38>
    59a6:	0a 26       	eor	r0, r26
    59a8:	61 f0       	breq	.+24     	; 0x59c2 <__fp_cmp+0x46>
    59aa:	23 2b       	or	r18, r19
    59ac:	24 2b       	or	r18, r20
    59ae:	25 2b       	or	r18, r21
    59b0:	21 f4       	brne	.+8      	; 0x59ba <__fp_cmp+0x3e>
    59b2:	08 95       	ret
    59b4:	0a 26       	eor	r0, r26
    59b6:	09 f4       	brne	.+2      	; 0x59ba <__fp_cmp+0x3e>
    59b8:	a1 40       	sbci	r26, 0x01	; 1
    59ba:	a6 95       	lsr	r26
    59bc:	8f ef       	ldi	r24, 0xFF	; 255
    59be:	81 1d       	adc	r24, r1
    59c0:	81 1d       	adc	r24, r1
    59c2:	08 95       	ret

000059c4 <__fp_inf>:
    59c4:	97 f9       	bld	r25, 7
    59c6:	9f 67       	ori	r25, 0x7F	; 127
    59c8:	80 e8       	ldi	r24, 0x80	; 128
    59ca:	70 e0       	ldi	r23, 0x00	; 0
    59cc:	60 e0       	ldi	r22, 0x00	; 0
    59ce:	08 95       	ret

000059d0 <__fp_nan>:
    59d0:	9f ef       	ldi	r25, 0xFF	; 255
    59d2:	80 ec       	ldi	r24, 0xC0	; 192
    59d4:	08 95       	ret

000059d6 <__fp_pscA>:
    59d6:	00 24       	eor	r0, r0
    59d8:	0a 94       	dec	r0
    59da:	16 16       	cp	r1, r22
    59dc:	17 06       	cpc	r1, r23
    59de:	18 06       	cpc	r1, r24
    59e0:	09 06       	cpc	r0, r25
    59e2:	08 95       	ret

000059e4 <__fp_pscB>:
    59e4:	00 24       	eor	r0, r0
    59e6:	0a 94       	dec	r0
    59e8:	12 16       	cp	r1, r18
    59ea:	13 06       	cpc	r1, r19
    59ec:	14 06       	cpc	r1, r20
    59ee:	05 06       	cpc	r0, r21
    59f0:	08 95       	ret

000059f2 <__fp_round>:
    59f2:	09 2e       	mov	r0, r25
    59f4:	03 94       	inc	r0
    59f6:	00 0c       	add	r0, r0
    59f8:	11 f4       	brne	.+4      	; 0x59fe <__fp_round+0xc>
    59fa:	88 23       	and	r24, r24
    59fc:	52 f0       	brmi	.+20     	; 0x5a12 <__fp_round+0x20>
    59fe:	bb 0f       	add	r27, r27
    5a00:	40 f4       	brcc	.+16     	; 0x5a12 <__fp_round+0x20>
    5a02:	bf 2b       	or	r27, r31
    5a04:	11 f4       	brne	.+4      	; 0x5a0a <__fp_round+0x18>
    5a06:	60 ff       	sbrs	r22, 0
    5a08:	04 c0       	rjmp	.+8      	; 0x5a12 <__fp_round+0x20>
    5a0a:	6f 5f       	subi	r22, 0xFF	; 255
    5a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    5a0e:	8f 4f       	sbci	r24, 0xFF	; 255
    5a10:	9f 4f       	sbci	r25, 0xFF	; 255
    5a12:	08 95       	ret

00005a14 <__fp_split3>:
    5a14:	57 fd       	sbrc	r21, 7
    5a16:	90 58       	subi	r25, 0x80	; 128
    5a18:	44 0f       	add	r20, r20
    5a1a:	55 1f       	adc	r21, r21
    5a1c:	59 f0       	breq	.+22     	; 0x5a34 <__fp_splitA+0x10>
    5a1e:	5f 3f       	cpi	r21, 0xFF	; 255
    5a20:	71 f0       	breq	.+28     	; 0x5a3e <__fp_splitA+0x1a>
    5a22:	47 95       	ror	r20

00005a24 <__fp_splitA>:
    5a24:	88 0f       	add	r24, r24
    5a26:	97 fb       	bst	r25, 7
    5a28:	99 1f       	adc	r25, r25
    5a2a:	61 f0       	breq	.+24     	; 0x5a44 <__fp_splitA+0x20>
    5a2c:	9f 3f       	cpi	r25, 0xFF	; 255
    5a2e:	79 f0       	breq	.+30     	; 0x5a4e <__fp_splitA+0x2a>
    5a30:	87 95       	ror	r24
    5a32:	08 95       	ret
    5a34:	12 16       	cp	r1, r18
    5a36:	13 06       	cpc	r1, r19
    5a38:	14 06       	cpc	r1, r20
    5a3a:	55 1f       	adc	r21, r21
    5a3c:	f2 cf       	rjmp	.-28     	; 0x5a22 <__fp_split3+0xe>
    5a3e:	46 95       	lsr	r20
    5a40:	f1 df       	rcall	.-30     	; 0x5a24 <__fp_splitA>
    5a42:	08 c0       	rjmp	.+16     	; 0x5a54 <__fp_splitA+0x30>
    5a44:	16 16       	cp	r1, r22
    5a46:	17 06       	cpc	r1, r23
    5a48:	18 06       	cpc	r1, r24
    5a4a:	99 1f       	adc	r25, r25
    5a4c:	f1 cf       	rjmp	.-30     	; 0x5a30 <__fp_splitA+0xc>
    5a4e:	86 95       	lsr	r24
    5a50:	71 05       	cpc	r23, r1
    5a52:	61 05       	cpc	r22, r1
    5a54:	08 94       	sec
    5a56:	08 95       	ret

00005a58 <__fp_zero>:
    5a58:	e8 94       	clt

00005a5a <__fp_szero>:
    5a5a:	bb 27       	eor	r27, r27
    5a5c:	66 27       	eor	r22, r22
    5a5e:	77 27       	eor	r23, r23
    5a60:	cb 01       	movw	r24, r22
    5a62:	97 f9       	bld	r25, 7
    5a64:	08 95       	ret

00005a66 <__gesf2>:
    5a66:	0e 94 be 2c 	call	0x597c	; 0x597c <__fp_cmp>
    5a6a:	08 f4       	brcc	.+2      	; 0x5a6e <__gesf2+0x8>
    5a6c:	8f ef       	ldi	r24, 0xFF	; 255
    5a6e:	08 95       	ret

00005a70 <__mulsf3>:
    5a70:	0e 94 4b 2d 	call	0x5a96	; 0x5a96 <__mulsf3x>
    5a74:	0c 94 f9 2c 	jmp	0x59f2	; 0x59f2 <__fp_round>
    5a78:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__fp_pscA>
    5a7c:	38 f0       	brcs	.+14     	; 0x5a8c <__mulsf3+0x1c>
    5a7e:	0e 94 f2 2c 	call	0x59e4	; 0x59e4 <__fp_pscB>
    5a82:	20 f0       	brcs	.+8      	; 0x5a8c <__mulsf3+0x1c>
    5a84:	95 23       	and	r25, r21
    5a86:	11 f0       	breq	.+4      	; 0x5a8c <__mulsf3+0x1c>
    5a88:	0c 94 e2 2c 	jmp	0x59c4	; 0x59c4 <__fp_inf>
    5a8c:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__fp_nan>
    5a90:	11 24       	eor	r1, r1
    5a92:	0c 94 2d 2d 	jmp	0x5a5a	; 0x5a5a <__fp_szero>

00005a96 <__mulsf3x>:
    5a96:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__fp_split3>
    5a9a:	70 f3       	brcs	.-36     	; 0x5a78 <__mulsf3+0x8>

00005a9c <__mulsf3_pse>:
    5a9c:	95 9f       	mul	r25, r21
    5a9e:	c1 f3       	breq	.-16     	; 0x5a90 <__mulsf3+0x20>
    5aa0:	95 0f       	add	r25, r21
    5aa2:	50 e0       	ldi	r21, 0x00	; 0
    5aa4:	55 1f       	adc	r21, r21
    5aa6:	62 9f       	mul	r22, r18
    5aa8:	f0 01       	movw	r30, r0
    5aaa:	72 9f       	mul	r23, r18
    5aac:	bb 27       	eor	r27, r27
    5aae:	f0 0d       	add	r31, r0
    5ab0:	b1 1d       	adc	r27, r1
    5ab2:	63 9f       	mul	r22, r19
    5ab4:	aa 27       	eor	r26, r26
    5ab6:	f0 0d       	add	r31, r0
    5ab8:	b1 1d       	adc	r27, r1
    5aba:	aa 1f       	adc	r26, r26
    5abc:	64 9f       	mul	r22, r20
    5abe:	66 27       	eor	r22, r22
    5ac0:	b0 0d       	add	r27, r0
    5ac2:	a1 1d       	adc	r26, r1
    5ac4:	66 1f       	adc	r22, r22
    5ac6:	82 9f       	mul	r24, r18
    5ac8:	22 27       	eor	r18, r18
    5aca:	b0 0d       	add	r27, r0
    5acc:	a1 1d       	adc	r26, r1
    5ace:	62 1f       	adc	r22, r18
    5ad0:	73 9f       	mul	r23, r19
    5ad2:	b0 0d       	add	r27, r0
    5ad4:	a1 1d       	adc	r26, r1
    5ad6:	62 1f       	adc	r22, r18
    5ad8:	83 9f       	mul	r24, r19
    5ada:	a0 0d       	add	r26, r0
    5adc:	61 1d       	adc	r22, r1
    5ade:	22 1f       	adc	r18, r18
    5ae0:	74 9f       	mul	r23, r20
    5ae2:	33 27       	eor	r19, r19
    5ae4:	a0 0d       	add	r26, r0
    5ae6:	61 1d       	adc	r22, r1
    5ae8:	23 1f       	adc	r18, r19
    5aea:	84 9f       	mul	r24, r20
    5aec:	60 0d       	add	r22, r0
    5aee:	21 1d       	adc	r18, r1
    5af0:	82 2f       	mov	r24, r18
    5af2:	76 2f       	mov	r23, r22
    5af4:	6a 2f       	mov	r22, r26
    5af6:	11 24       	eor	r1, r1
    5af8:	9f 57       	subi	r25, 0x7F	; 127
    5afa:	50 40       	sbci	r21, 0x00	; 0
    5afc:	9a f0       	brmi	.+38     	; 0x5b24 <__mulsf3_pse+0x88>
    5afe:	f1 f0       	breq	.+60     	; 0x5b3c <__mulsf3_pse+0xa0>
    5b00:	88 23       	and	r24, r24
    5b02:	4a f0       	brmi	.+18     	; 0x5b16 <__mulsf3_pse+0x7a>
    5b04:	ee 0f       	add	r30, r30
    5b06:	ff 1f       	adc	r31, r31
    5b08:	bb 1f       	adc	r27, r27
    5b0a:	66 1f       	adc	r22, r22
    5b0c:	77 1f       	adc	r23, r23
    5b0e:	88 1f       	adc	r24, r24
    5b10:	91 50       	subi	r25, 0x01	; 1
    5b12:	50 40       	sbci	r21, 0x00	; 0
    5b14:	a9 f7       	brne	.-22     	; 0x5b00 <__mulsf3_pse+0x64>
    5b16:	9e 3f       	cpi	r25, 0xFE	; 254
    5b18:	51 05       	cpc	r21, r1
    5b1a:	80 f0       	brcs	.+32     	; 0x5b3c <__mulsf3_pse+0xa0>
    5b1c:	0c 94 e2 2c 	jmp	0x59c4	; 0x59c4 <__fp_inf>
    5b20:	0c 94 2d 2d 	jmp	0x5a5a	; 0x5a5a <__fp_szero>
    5b24:	5f 3f       	cpi	r21, 0xFF	; 255
    5b26:	e4 f3       	brlt	.-8      	; 0x5b20 <__mulsf3_pse+0x84>
    5b28:	98 3e       	cpi	r25, 0xE8	; 232
    5b2a:	d4 f3       	brlt	.-12     	; 0x5b20 <__mulsf3_pse+0x84>
    5b2c:	86 95       	lsr	r24
    5b2e:	77 95       	ror	r23
    5b30:	67 95       	ror	r22
    5b32:	b7 95       	ror	r27
    5b34:	f7 95       	ror	r31
    5b36:	e7 95       	ror	r30
    5b38:	9f 5f       	subi	r25, 0xFF	; 255
    5b3a:	c1 f7       	brne	.-16     	; 0x5b2c <__mulsf3_pse+0x90>
    5b3c:	fe 2b       	or	r31, r30
    5b3e:	88 0f       	add	r24, r24
    5b40:	91 1d       	adc	r25, r1
    5b42:	96 95       	lsr	r25
    5b44:	87 95       	ror	r24
    5b46:	97 f9       	bld	r25, 7
    5b48:	08 95       	ret

00005b4a <__mulsi3>:
    5b4a:	db 01       	movw	r26, r22
    5b4c:	8f 93       	push	r24
    5b4e:	9f 93       	push	r25
    5b50:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <__muluhisi3>
    5b54:	bf 91       	pop	r27
    5b56:	af 91       	pop	r26
    5b58:	a2 9f       	mul	r26, r18
    5b5a:	80 0d       	add	r24, r0
    5b5c:	91 1d       	adc	r25, r1
    5b5e:	a3 9f       	mul	r26, r19
    5b60:	90 0d       	add	r25, r0
    5b62:	b2 9f       	mul	r27, r18
    5b64:	90 0d       	add	r25, r0
    5b66:	11 24       	eor	r1, r1
    5b68:	08 95       	ret

00005b6a <__udivmodhi4>:
    5b6a:	aa 1b       	sub	r26, r26
    5b6c:	bb 1b       	sub	r27, r27
    5b6e:	51 e1       	ldi	r21, 0x11	; 17
    5b70:	07 c0       	rjmp	.+14     	; 0x5b80 <__udivmodhi4_ep>

00005b72 <__udivmodhi4_loop>:
    5b72:	aa 1f       	adc	r26, r26
    5b74:	bb 1f       	adc	r27, r27
    5b76:	a6 17       	cp	r26, r22
    5b78:	b7 07       	cpc	r27, r23
    5b7a:	10 f0       	brcs	.+4      	; 0x5b80 <__udivmodhi4_ep>
    5b7c:	a6 1b       	sub	r26, r22
    5b7e:	b7 0b       	sbc	r27, r23

00005b80 <__udivmodhi4_ep>:
    5b80:	88 1f       	adc	r24, r24
    5b82:	99 1f       	adc	r25, r25
    5b84:	5a 95       	dec	r21
    5b86:	a9 f7       	brne	.-22     	; 0x5b72 <__udivmodhi4_loop>
    5b88:	80 95       	com	r24
    5b8a:	90 95       	com	r25
    5b8c:	bc 01       	movw	r22, r24
    5b8e:	cd 01       	movw	r24, r26
    5b90:	08 95       	ret

00005b92 <__divmodhi4>:
    5b92:	97 fb       	bst	r25, 7
    5b94:	07 2e       	mov	r0, r23
    5b96:	16 f4       	brtc	.+4      	; 0x5b9c <__divmodhi4+0xa>
    5b98:	00 94       	com	r0
    5b9a:	07 d0       	rcall	.+14     	; 0x5baa <__divmodhi4_neg1>
    5b9c:	77 fd       	sbrc	r23, 7
    5b9e:	09 d0       	rcall	.+18     	; 0x5bb2 <__divmodhi4_neg2>
    5ba0:	0e 94 b5 2d 	call	0x5b6a	; 0x5b6a <__udivmodhi4>
    5ba4:	07 fc       	sbrc	r0, 7
    5ba6:	05 d0       	rcall	.+10     	; 0x5bb2 <__divmodhi4_neg2>
    5ba8:	3e f4       	brtc	.+14     	; 0x5bb8 <__divmodhi4_exit>

00005baa <__divmodhi4_neg1>:
    5baa:	90 95       	com	r25
    5bac:	81 95       	neg	r24
    5bae:	9f 4f       	sbci	r25, 0xFF	; 255
    5bb0:	08 95       	ret

00005bb2 <__divmodhi4_neg2>:
    5bb2:	70 95       	com	r23
    5bb4:	61 95       	neg	r22
    5bb6:	7f 4f       	sbci	r23, 0xFF	; 255

00005bb8 <__divmodhi4_exit>:
    5bb8:	08 95       	ret

00005bba <__udivmodsi4>:
    5bba:	a1 e2       	ldi	r26, 0x21	; 33
    5bbc:	1a 2e       	mov	r1, r26
    5bbe:	aa 1b       	sub	r26, r26
    5bc0:	bb 1b       	sub	r27, r27
    5bc2:	fd 01       	movw	r30, r26
    5bc4:	0d c0       	rjmp	.+26     	; 0x5be0 <__udivmodsi4_ep>

00005bc6 <__udivmodsi4_loop>:
    5bc6:	aa 1f       	adc	r26, r26
    5bc8:	bb 1f       	adc	r27, r27
    5bca:	ee 1f       	adc	r30, r30
    5bcc:	ff 1f       	adc	r31, r31
    5bce:	a2 17       	cp	r26, r18
    5bd0:	b3 07       	cpc	r27, r19
    5bd2:	e4 07       	cpc	r30, r20
    5bd4:	f5 07       	cpc	r31, r21
    5bd6:	20 f0       	brcs	.+8      	; 0x5be0 <__udivmodsi4_ep>
    5bd8:	a2 1b       	sub	r26, r18
    5bda:	b3 0b       	sbc	r27, r19
    5bdc:	e4 0b       	sbc	r30, r20
    5bde:	f5 0b       	sbc	r31, r21

00005be0 <__udivmodsi4_ep>:
    5be0:	66 1f       	adc	r22, r22
    5be2:	77 1f       	adc	r23, r23
    5be4:	88 1f       	adc	r24, r24
    5be6:	99 1f       	adc	r25, r25
    5be8:	1a 94       	dec	r1
    5bea:	69 f7       	brne	.-38     	; 0x5bc6 <__udivmodsi4_loop>
    5bec:	60 95       	com	r22
    5bee:	70 95       	com	r23
    5bf0:	80 95       	com	r24
    5bf2:	90 95       	com	r25
    5bf4:	9b 01       	movw	r18, r22
    5bf6:	ac 01       	movw	r20, r24
    5bf8:	bd 01       	movw	r22, r26
    5bfa:	cf 01       	movw	r24, r30
    5bfc:	08 95       	ret

00005bfe <__divmodsi4>:
    5bfe:	05 2e       	mov	r0, r21
    5c00:	97 fb       	bst	r25, 7
    5c02:	1e f4       	brtc	.+6      	; 0x5c0a <__divmodsi4+0xc>
    5c04:	00 94       	com	r0
    5c06:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__negsi2>
    5c0a:	57 fd       	sbrc	r21, 7
    5c0c:	07 d0       	rcall	.+14     	; 0x5c1c <__divmodsi4_neg2>
    5c0e:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <__udivmodsi4>
    5c12:	07 fc       	sbrc	r0, 7
    5c14:	03 d0       	rcall	.+6      	; 0x5c1c <__divmodsi4_neg2>
    5c16:	4e f4       	brtc	.+18     	; 0x5c2a <__divmodsi4_exit>
    5c18:	0c 94 16 2e 	jmp	0x5c2c	; 0x5c2c <__negsi2>

00005c1c <__divmodsi4_neg2>:
    5c1c:	50 95       	com	r21
    5c1e:	40 95       	com	r20
    5c20:	30 95       	com	r19
    5c22:	21 95       	neg	r18
    5c24:	3f 4f       	sbci	r19, 0xFF	; 255
    5c26:	4f 4f       	sbci	r20, 0xFF	; 255
    5c28:	5f 4f       	sbci	r21, 0xFF	; 255

00005c2a <__divmodsi4_exit>:
    5c2a:	08 95       	ret

00005c2c <__negsi2>:
    5c2c:	90 95       	com	r25
    5c2e:	80 95       	com	r24
    5c30:	70 95       	com	r23
    5c32:	61 95       	neg	r22
    5c34:	7f 4f       	sbci	r23, 0xFF	; 255
    5c36:	8f 4f       	sbci	r24, 0xFF	; 255
    5c38:	9f 4f       	sbci	r25, 0xFF	; 255
    5c3a:	08 95       	ret

00005c3c <__tablejump2__>:
    5c3c:	ee 0f       	add	r30, r30
    5c3e:	ff 1f       	adc	r31, r31
    5c40:	05 90       	lpm	r0, Z+
    5c42:	f4 91       	lpm	r31, Z
    5c44:	e0 2d       	mov	r30, r0
    5c46:	09 94       	ijmp

00005c48 <__umulhisi3>:
    5c48:	a2 9f       	mul	r26, r18
    5c4a:	b0 01       	movw	r22, r0
    5c4c:	b3 9f       	mul	r27, r19
    5c4e:	c0 01       	movw	r24, r0
    5c50:	a3 9f       	mul	r26, r19
    5c52:	70 0d       	add	r23, r0
    5c54:	81 1d       	adc	r24, r1
    5c56:	11 24       	eor	r1, r1
    5c58:	91 1d       	adc	r25, r1
    5c5a:	b2 9f       	mul	r27, r18
    5c5c:	70 0d       	add	r23, r0
    5c5e:	81 1d       	adc	r24, r1
    5c60:	11 24       	eor	r1, r1
    5c62:	91 1d       	adc	r25, r1
    5c64:	08 95       	ret

00005c66 <__muluhisi3>:
    5c66:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <__umulhisi3>
    5c6a:	a5 9f       	mul	r26, r21
    5c6c:	90 0d       	add	r25, r0
    5c6e:	b4 9f       	mul	r27, r20
    5c70:	90 0d       	add	r25, r0
    5c72:	a4 9f       	mul	r26, r20
    5c74:	80 0d       	add	r24, r0
    5c76:	91 1d       	adc	r25, r1
    5c78:	11 24       	eor	r1, r1
    5c7a:	08 95       	ret

00005c7c <__muldi3>:
    5c7c:	df 93       	push	r29
    5c7e:	cf 93       	push	r28
    5c80:	1f 93       	push	r17
    5c82:	0f 93       	push	r16
    5c84:	9a 9d       	mul	r25, r10
    5c86:	f0 2d       	mov	r31, r0
    5c88:	21 9f       	mul	r18, r17
    5c8a:	f0 0d       	add	r31, r0
    5c8c:	8b 9d       	mul	r24, r11
    5c8e:	f0 0d       	add	r31, r0
    5c90:	8a 9d       	mul	r24, r10
    5c92:	e0 2d       	mov	r30, r0
    5c94:	f1 0d       	add	r31, r1
    5c96:	03 9f       	mul	r16, r19
    5c98:	f0 0d       	add	r31, r0
    5c9a:	02 9f       	mul	r16, r18
    5c9c:	e0 0d       	add	r30, r0
    5c9e:	f1 1d       	adc	r31, r1
    5ca0:	4e 9d       	mul	r20, r14
    5ca2:	e0 0d       	add	r30, r0
    5ca4:	f1 1d       	adc	r31, r1
    5ca6:	5e 9d       	mul	r21, r14
    5ca8:	f0 0d       	add	r31, r0
    5caa:	4f 9d       	mul	r20, r15
    5cac:	f0 0d       	add	r31, r0
    5cae:	7f 93       	push	r23
    5cb0:	6f 93       	push	r22
    5cb2:	bf 92       	push	r11
    5cb4:	af 92       	push	r10
    5cb6:	5f 93       	push	r21
    5cb8:	4f 93       	push	r20
    5cba:	d5 01       	movw	r26, r10
    5cbc:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <__umulhisi3>
    5cc0:	8b 01       	movw	r16, r22
    5cc2:	ac 01       	movw	r20, r24
    5cc4:	d7 01       	movw	r26, r14
    5cc6:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <__umulhisi3>
    5cca:	eb 01       	movw	r28, r22
    5ccc:	e8 0f       	add	r30, r24
    5cce:	f9 1f       	adc	r31, r25
    5cd0:	d6 01       	movw	r26, r12
    5cd2:	0e 94 8e 2e 	call	0x5d1c	; 0x5d1c <__muldi3_6>
    5cd6:	2f 91       	pop	r18
    5cd8:	3f 91       	pop	r19
    5cda:	d6 01       	movw	r26, r12
    5cdc:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <__umulhisi3>
    5ce0:	c6 0f       	add	r28, r22
    5ce2:	d7 1f       	adc	r29, r23
    5ce4:	e8 1f       	adc	r30, r24
    5ce6:	f9 1f       	adc	r31, r25
    5ce8:	af 91       	pop	r26
    5cea:	bf 91       	pop	r27
    5cec:	0e 94 8e 2e 	call	0x5d1c	; 0x5d1c <__muldi3_6>
    5cf0:	2f 91       	pop	r18
    5cf2:	3f 91       	pop	r19
    5cf4:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <__umulhisi3>
    5cf8:	c6 0f       	add	r28, r22
    5cfa:	d7 1f       	adc	r29, r23
    5cfc:	e8 1f       	adc	r30, r24
    5cfe:	f9 1f       	adc	r31, r25
    5d00:	d6 01       	movw	r26, r12
    5d02:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <__umulhisi3>
    5d06:	e6 0f       	add	r30, r22
    5d08:	f7 1f       	adc	r31, r23
    5d0a:	98 01       	movw	r18, r16
    5d0c:	be 01       	movw	r22, r28
    5d0e:	cf 01       	movw	r24, r30
    5d10:	11 24       	eor	r1, r1
    5d12:	0f 91       	pop	r16
    5d14:	1f 91       	pop	r17
    5d16:	cf 91       	pop	r28
    5d18:	df 91       	pop	r29
    5d1a:	08 95       	ret

00005d1c <__muldi3_6>:
    5d1c:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <__umulhisi3>
    5d20:	46 0f       	add	r20, r22
    5d22:	57 1f       	adc	r21, r23
    5d24:	c8 1f       	adc	r28, r24
    5d26:	d9 1f       	adc	r29, r25
    5d28:	08 f4       	brcc	.+2      	; 0x5d2c <__muldi3_6+0x10>
    5d2a:	31 96       	adiw	r30, 0x01	; 1
    5d2c:	08 95       	ret

00005d2e <__umoddi3>:
    5d2e:	68 94       	set
    5d30:	01 c0       	rjmp	.+2      	; 0x5d34 <__udivdi3_umoddi3>

00005d32 <__udivdi3>:
    5d32:	e8 94       	clt

00005d34 <__udivdi3_umoddi3>:
    5d34:	8f 92       	push	r8
    5d36:	9f 92       	push	r9
    5d38:	cf 93       	push	r28
    5d3a:	df 93       	push	r29
    5d3c:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <__udivmod64>
    5d40:	df 91       	pop	r29
    5d42:	cf 91       	pop	r28
    5d44:	9f 90       	pop	r9
    5d46:	8f 90       	pop	r8
    5d48:	08 95       	ret

00005d4a <__udivmod64>:
    5d4a:	88 24       	eor	r8, r8
    5d4c:	99 24       	eor	r9, r9
    5d4e:	f4 01       	movw	r30, r8
    5d50:	e4 01       	movw	r28, r8
    5d52:	b0 e4       	ldi	r27, 0x40	; 64
    5d54:	9f 93       	push	r25
    5d56:	aa 27       	eor	r26, r26
    5d58:	9a 15       	cp	r25, r10
    5d5a:	8b 04       	cpc	r8, r11
    5d5c:	9c 04       	cpc	r9, r12
    5d5e:	ed 05       	cpc	r30, r13
    5d60:	fe 05       	cpc	r31, r14
    5d62:	cf 05       	cpc	r28, r15
    5d64:	d0 07       	cpc	r29, r16
    5d66:	a1 07       	cpc	r26, r17
    5d68:	98 f4       	brcc	.+38     	; 0x5d90 <__udivmod64+0x46>
    5d6a:	ad 2f       	mov	r26, r29
    5d6c:	dc 2f       	mov	r29, r28
    5d6e:	cf 2f       	mov	r28, r31
    5d70:	fe 2f       	mov	r31, r30
    5d72:	e9 2d       	mov	r30, r9
    5d74:	98 2c       	mov	r9, r8
    5d76:	89 2e       	mov	r8, r25
    5d78:	98 2f       	mov	r25, r24
    5d7a:	87 2f       	mov	r24, r23
    5d7c:	76 2f       	mov	r23, r22
    5d7e:	65 2f       	mov	r22, r21
    5d80:	54 2f       	mov	r21, r20
    5d82:	43 2f       	mov	r20, r19
    5d84:	32 2f       	mov	r19, r18
    5d86:	22 27       	eor	r18, r18
    5d88:	b8 50       	subi	r27, 0x08	; 8
    5d8a:	31 f7       	brne	.-52     	; 0x5d58 <__udivmod64+0xe>
    5d8c:	bf 91       	pop	r27
    5d8e:	27 c0       	rjmp	.+78     	; 0x5dde <__udivmod64+0x94>
    5d90:	1b 2e       	mov	r1, r27
    5d92:	bf 91       	pop	r27
    5d94:	bb 27       	eor	r27, r27
    5d96:	22 0f       	add	r18, r18
    5d98:	33 1f       	adc	r19, r19
    5d9a:	44 1f       	adc	r20, r20
    5d9c:	55 1f       	adc	r21, r21
    5d9e:	66 1f       	adc	r22, r22
    5da0:	77 1f       	adc	r23, r23
    5da2:	88 1f       	adc	r24, r24
    5da4:	99 1f       	adc	r25, r25
    5da6:	88 1c       	adc	r8, r8
    5da8:	99 1c       	adc	r9, r9
    5daa:	ee 1f       	adc	r30, r30
    5dac:	ff 1f       	adc	r31, r31
    5dae:	cc 1f       	adc	r28, r28
    5db0:	dd 1f       	adc	r29, r29
    5db2:	aa 1f       	adc	r26, r26
    5db4:	bb 1f       	adc	r27, r27
    5db6:	8a 14       	cp	r8, r10
    5db8:	9b 04       	cpc	r9, r11
    5dba:	ec 05       	cpc	r30, r12
    5dbc:	fd 05       	cpc	r31, r13
    5dbe:	ce 05       	cpc	r28, r14
    5dc0:	df 05       	cpc	r29, r15
    5dc2:	a0 07       	cpc	r26, r16
    5dc4:	b1 07       	cpc	r27, r17
    5dc6:	48 f0       	brcs	.+18     	; 0x5dda <__udivmod64+0x90>
    5dc8:	8a 18       	sub	r8, r10
    5dca:	9b 08       	sbc	r9, r11
    5dcc:	ec 09       	sbc	r30, r12
    5dce:	fd 09       	sbc	r31, r13
    5dd0:	ce 09       	sbc	r28, r14
    5dd2:	df 09       	sbc	r29, r15
    5dd4:	a0 0b       	sbc	r26, r16
    5dd6:	b1 0b       	sbc	r27, r17
    5dd8:	21 60       	ori	r18, 0x01	; 1
    5dda:	1a 94       	dec	r1
    5ddc:	e1 f6       	brne	.-72     	; 0x5d96 <__udivmod64+0x4c>
    5dde:	2e f4       	brtc	.+10     	; 0x5dea <__udivmod64+0xa0>
    5de0:	94 01       	movw	r18, r8
    5de2:	af 01       	movw	r20, r30
    5de4:	be 01       	movw	r22, r28
    5de6:	cd 01       	movw	r24, r26
    5de8:	00 0c       	add	r0, r0
    5dea:	08 95       	ret

00005dec <__ashrdi3>:
    5dec:	97 fb       	bst	r25, 7
    5dee:	10 f8       	bld	r1, 0

00005df0 <__lshrdi3>:
    5df0:	16 94       	lsr	r1
    5df2:	00 08       	sbc	r0, r0
    5df4:	0f 93       	push	r16
    5df6:	08 30       	cpi	r16, 0x08	; 8
    5df8:	98 f0       	brcs	.+38     	; 0x5e20 <__lshrdi3+0x30>
    5dfa:	08 50       	subi	r16, 0x08	; 8
    5dfc:	23 2f       	mov	r18, r19
    5dfe:	34 2f       	mov	r19, r20
    5e00:	45 2f       	mov	r20, r21
    5e02:	56 2f       	mov	r21, r22
    5e04:	67 2f       	mov	r22, r23
    5e06:	78 2f       	mov	r23, r24
    5e08:	89 2f       	mov	r24, r25
    5e0a:	90 2d       	mov	r25, r0
    5e0c:	f4 cf       	rjmp	.-24     	; 0x5df6 <__lshrdi3+0x6>
    5e0e:	05 94       	asr	r0
    5e10:	97 95       	ror	r25
    5e12:	87 95       	ror	r24
    5e14:	77 95       	ror	r23
    5e16:	67 95       	ror	r22
    5e18:	57 95       	ror	r21
    5e1a:	47 95       	ror	r20
    5e1c:	37 95       	ror	r19
    5e1e:	27 95       	ror	r18
    5e20:	0a 95       	dec	r16
    5e22:	aa f7       	brpl	.-22     	; 0x5e0e <__lshrdi3+0x1e>
    5e24:	0f 91       	pop	r16
    5e26:	08 95       	ret

00005e28 <itoa>:
    5e28:	45 32       	cpi	r20, 0x25	; 37
    5e2a:	51 05       	cpc	r21, r1
    5e2c:	20 f4       	brcc	.+8      	; 0x5e36 <itoa+0xe>
    5e2e:	42 30       	cpi	r20, 0x02	; 2
    5e30:	10 f0       	brcs	.+4      	; 0x5e36 <itoa+0xe>
    5e32:	0c 94 1f 2f 	jmp	0x5e3e	; 0x5e3e <__itoa_ncheck>
    5e36:	fb 01       	movw	r30, r22
    5e38:	10 82       	st	Z, r1
    5e3a:	cb 01       	movw	r24, r22
    5e3c:	08 95       	ret

00005e3e <__itoa_ncheck>:
    5e3e:	bb 27       	eor	r27, r27
    5e40:	4a 30       	cpi	r20, 0x0A	; 10
    5e42:	31 f4       	brne	.+12     	; 0x5e50 <__itoa_ncheck+0x12>
    5e44:	99 23       	and	r25, r25
    5e46:	22 f4       	brpl	.+8      	; 0x5e50 <__itoa_ncheck+0x12>
    5e48:	bd e2       	ldi	r27, 0x2D	; 45
    5e4a:	90 95       	com	r25
    5e4c:	81 95       	neg	r24
    5e4e:	9f 4f       	sbci	r25, 0xFF	; 255
    5e50:	0c 94 2b 2f 	jmp	0x5e56	; 0x5e56 <__utoa_common>

00005e54 <__utoa_ncheck>:
    5e54:	bb 27       	eor	r27, r27

00005e56 <__utoa_common>:
    5e56:	fb 01       	movw	r30, r22
    5e58:	55 27       	eor	r21, r21
    5e5a:	aa 27       	eor	r26, r26
    5e5c:	88 0f       	add	r24, r24
    5e5e:	99 1f       	adc	r25, r25
    5e60:	aa 1f       	adc	r26, r26
    5e62:	a4 17       	cp	r26, r20
    5e64:	10 f0       	brcs	.+4      	; 0x5e6a <__utoa_common+0x14>
    5e66:	a4 1b       	sub	r26, r20
    5e68:	83 95       	inc	r24
    5e6a:	50 51       	subi	r21, 0x10	; 16
    5e6c:	b9 f7       	brne	.-18     	; 0x5e5c <__utoa_common+0x6>
    5e6e:	a0 5d       	subi	r26, 0xD0	; 208
    5e70:	aa 33       	cpi	r26, 0x3A	; 58
    5e72:	08 f0       	brcs	.+2      	; 0x5e76 <__utoa_common+0x20>
    5e74:	a9 5d       	subi	r26, 0xD9	; 217
    5e76:	a1 93       	st	Z+, r26
    5e78:	00 97       	sbiw	r24, 0x00	; 0
    5e7a:	79 f7       	brne	.-34     	; 0x5e5a <__utoa_common+0x4>
    5e7c:	b1 11       	cpse	r27, r1
    5e7e:	b1 93       	st	Z+, r27
    5e80:	11 92       	st	Z+, r1
    5e82:	cb 01       	movw	r24, r22
    5e84:	0c 94 5d 31 	jmp	0x62ba	; 0x62ba <strrev>

00005e88 <sprintf>:
    5e88:	ae e0       	ldi	r26, 0x0E	; 14
    5e8a:	b0 e0       	ldi	r27, 0x00	; 0
    5e8c:	ea e4       	ldi	r30, 0x4A	; 74
    5e8e:	ff e2       	ldi	r31, 0x2F	; 47
    5e90:	0c 94 15 32 	jmp	0x642a	; 0x642a <__prologue_saves__+0x1c>
    5e94:	0d 89       	ldd	r16, Y+21	; 0x15
    5e96:	1e 89       	ldd	r17, Y+22	; 0x16
    5e98:	86 e0       	ldi	r24, 0x06	; 6
    5e9a:	8c 83       	std	Y+4, r24	; 0x04
    5e9c:	1a 83       	std	Y+2, r17	; 0x02
    5e9e:	09 83       	std	Y+1, r16	; 0x01
    5ea0:	8f ef       	ldi	r24, 0xFF	; 255
    5ea2:	9f e7       	ldi	r25, 0x7F	; 127
    5ea4:	9e 83       	std	Y+6, r25	; 0x06
    5ea6:	8d 83       	std	Y+5, r24	; 0x05
    5ea8:	ae 01       	movw	r20, r28
    5eaa:	47 5e       	subi	r20, 0xE7	; 231
    5eac:	5f 4f       	sbci	r21, 0xFF	; 255
    5eae:	6f 89       	ldd	r22, Y+23	; 0x17
    5eb0:	78 8d       	ldd	r23, Y+24	; 0x18
    5eb2:	ce 01       	movw	r24, r28
    5eb4:	01 96       	adiw	r24, 0x01	; 1
    5eb6:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <vfprintf>
    5eba:	ef 81       	ldd	r30, Y+7	; 0x07
    5ebc:	f8 85       	ldd	r31, Y+8	; 0x08
    5ebe:	e0 0f       	add	r30, r16
    5ec0:	f1 1f       	adc	r31, r17
    5ec2:	10 82       	st	Z, r1
    5ec4:	2e 96       	adiw	r28, 0x0e	; 14
    5ec6:	e4 e0       	ldi	r30, 0x04	; 4
    5ec8:	0c 94 31 32 	jmp	0x6462	; 0x6462 <__epilogue_restores__+0x1c>

00005ecc <vfprintf>:
    5ecc:	ab e0       	ldi	r26, 0x0B	; 11
    5ece:	b0 e0       	ldi	r27, 0x00	; 0
    5ed0:	ec e6       	ldi	r30, 0x6C	; 108
    5ed2:	ff e2       	ldi	r31, 0x2F	; 47
    5ed4:	0c 94 07 32 	jmp	0x640e	; 0x640e <__prologue_saves__>
    5ed8:	6c 01       	movw	r12, r24
    5eda:	7b 01       	movw	r14, r22
    5edc:	8a 01       	movw	r16, r20
    5ede:	fc 01       	movw	r30, r24
    5ee0:	17 82       	std	Z+7, r1	; 0x07
    5ee2:	16 82       	std	Z+6, r1	; 0x06
    5ee4:	83 81       	ldd	r24, Z+3	; 0x03
    5ee6:	81 ff       	sbrs	r24, 1
    5ee8:	cc c1       	rjmp	.+920    	; 0x6282 <vfprintf+0x3b6>
    5eea:	ce 01       	movw	r24, r28
    5eec:	01 96       	adiw	r24, 0x01	; 1
    5eee:	3c 01       	movw	r6, r24
    5ef0:	f6 01       	movw	r30, r12
    5ef2:	93 81       	ldd	r25, Z+3	; 0x03
    5ef4:	f7 01       	movw	r30, r14
    5ef6:	93 fd       	sbrc	r25, 3
    5ef8:	85 91       	lpm	r24, Z+
    5efa:	93 ff       	sbrs	r25, 3
    5efc:	81 91       	ld	r24, Z+
    5efe:	7f 01       	movw	r14, r30
    5f00:	88 23       	and	r24, r24
    5f02:	09 f4       	brne	.+2      	; 0x5f06 <vfprintf+0x3a>
    5f04:	ba c1       	rjmp	.+884    	; 0x627a <vfprintf+0x3ae>
    5f06:	85 32       	cpi	r24, 0x25	; 37
    5f08:	39 f4       	brne	.+14     	; 0x5f18 <vfprintf+0x4c>
    5f0a:	93 fd       	sbrc	r25, 3
    5f0c:	85 91       	lpm	r24, Z+
    5f0e:	93 ff       	sbrs	r25, 3
    5f10:	81 91       	ld	r24, Z+
    5f12:	7f 01       	movw	r14, r30
    5f14:	85 32       	cpi	r24, 0x25	; 37
    5f16:	29 f4       	brne	.+10     	; 0x5f22 <vfprintf+0x56>
    5f18:	b6 01       	movw	r22, r12
    5f1a:	90 e0       	ldi	r25, 0x00	; 0
    5f1c:	0e 94 6d 31 	call	0x62da	; 0x62da <fputc>
    5f20:	e7 cf       	rjmp	.-50     	; 0x5ef0 <vfprintf+0x24>
    5f22:	91 2c       	mov	r9, r1
    5f24:	21 2c       	mov	r2, r1
    5f26:	31 2c       	mov	r3, r1
    5f28:	ff e1       	ldi	r31, 0x1F	; 31
    5f2a:	f3 15       	cp	r31, r3
    5f2c:	d8 f0       	brcs	.+54     	; 0x5f64 <vfprintf+0x98>
    5f2e:	8b 32       	cpi	r24, 0x2B	; 43
    5f30:	79 f0       	breq	.+30     	; 0x5f50 <vfprintf+0x84>
    5f32:	38 f4       	brcc	.+14     	; 0x5f42 <vfprintf+0x76>
    5f34:	80 32       	cpi	r24, 0x20	; 32
    5f36:	79 f0       	breq	.+30     	; 0x5f56 <vfprintf+0x8a>
    5f38:	83 32       	cpi	r24, 0x23	; 35
    5f3a:	a1 f4       	brne	.+40     	; 0x5f64 <vfprintf+0x98>
    5f3c:	23 2d       	mov	r18, r3
    5f3e:	20 61       	ori	r18, 0x10	; 16
    5f40:	1d c0       	rjmp	.+58     	; 0x5f7c <vfprintf+0xb0>
    5f42:	8d 32       	cpi	r24, 0x2D	; 45
    5f44:	61 f0       	breq	.+24     	; 0x5f5e <vfprintf+0x92>
    5f46:	80 33       	cpi	r24, 0x30	; 48
    5f48:	69 f4       	brne	.+26     	; 0x5f64 <vfprintf+0x98>
    5f4a:	23 2d       	mov	r18, r3
    5f4c:	21 60       	ori	r18, 0x01	; 1
    5f4e:	16 c0       	rjmp	.+44     	; 0x5f7c <vfprintf+0xb0>
    5f50:	83 2d       	mov	r24, r3
    5f52:	82 60       	ori	r24, 0x02	; 2
    5f54:	38 2e       	mov	r3, r24
    5f56:	e3 2d       	mov	r30, r3
    5f58:	e4 60       	ori	r30, 0x04	; 4
    5f5a:	3e 2e       	mov	r3, r30
    5f5c:	2a c0       	rjmp	.+84     	; 0x5fb2 <vfprintf+0xe6>
    5f5e:	f3 2d       	mov	r31, r3
    5f60:	f8 60       	ori	r31, 0x08	; 8
    5f62:	1d c0       	rjmp	.+58     	; 0x5f9e <vfprintf+0xd2>
    5f64:	37 fc       	sbrc	r3, 7
    5f66:	2d c0       	rjmp	.+90     	; 0x5fc2 <vfprintf+0xf6>
    5f68:	20 ed       	ldi	r18, 0xD0	; 208
    5f6a:	28 0f       	add	r18, r24
    5f6c:	2a 30       	cpi	r18, 0x0A	; 10
    5f6e:	40 f0       	brcs	.+16     	; 0x5f80 <vfprintf+0xb4>
    5f70:	8e 32       	cpi	r24, 0x2E	; 46
    5f72:	b9 f4       	brne	.+46     	; 0x5fa2 <vfprintf+0xd6>
    5f74:	36 fc       	sbrc	r3, 6
    5f76:	81 c1       	rjmp	.+770    	; 0x627a <vfprintf+0x3ae>
    5f78:	23 2d       	mov	r18, r3
    5f7a:	20 64       	ori	r18, 0x40	; 64
    5f7c:	32 2e       	mov	r3, r18
    5f7e:	19 c0       	rjmp	.+50     	; 0x5fb2 <vfprintf+0xe6>
    5f80:	36 fe       	sbrs	r3, 6
    5f82:	06 c0       	rjmp	.+12     	; 0x5f90 <vfprintf+0xc4>
    5f84:	8a e0       	ldi	r24, 0x0A	; 10
    5f86:	98 9e       	mul	r9, r24
    5f88:	20 0d       	add	r18, r0
    5f8a:	11 24       	eor	r1, r1
    5f8c:	92 2e       	mov	r9, r18
    5f8e:	11 c0       	rjmp	.+34     	; 0x5fb2 <vfprintf+0xe6>
    5f90:	ea e0       	ldi	r30, 0x0A	; 10
    5f92:	2e 9e       	mul	r2, r30
    5f94:	20 0d       	add	r18, r0
    5f96:	11 24       	eor	r1, r1
    5f98:	22 2e       	mov	r2, r18
    5f9a:	f3 2d       	mov	r31, r3
    5f9c:	f0 62       	ori	r31, 0x20	; 32
    5f9e:	3f 2e       	mov	r3, r31
    5fa0:	08 c0       	rjmp	.+16     	; 0x5fb2 <vfprintf+0xe6>
    5fa2:	8c 36       	cpi	r24, 0x6C	; 108
    5fa4:	21 f4       	brne	.+8      	; 0x5fae <vfprintf+0xe2>
    5fa6:	83 2d       	mov	r24, r3
    5fa8:	80 68       	ori	r24, 0x80	; 128
    5faa:	38 2e       	mov	r3, r24
    5fac:	02 c0       	rjmp	.+4      	; 0x5fb2 <vfprintf+0xe6>
    5fae:	88 36       	cpi	r24, 0x68	; 104
    5fb0:	41 f4       	brne	.+16     	; 0x5fc2 <vfprintf+0xf6>
    5fb2:	f7 01       	movw	r30, r14
    5fb4:	93 fd       	sbrc	r25, 3
    5fb6:	85 91       	lpm	r24, Z+
    5fb8:	93 ff       	sbrs	r25, 3
    5fba:	81 91       	ld	r24, Z+
    5fbc:	7f 01       	movw	r14, r30
    5fbe:	81 11       	cpse	r24, r1
    5fc0:	b3 cf       	rjmp	.-154    	; 0x5f28 <vfprintf+0x5c>
    5fc2:	98 2f       	mov	r25, r24
    5fc4:	9f 7d       	andi	r25, 0xDF	; 223
    5fc6:	95 54       	subi	r25, 0x45	; 69
    5fc8:	93 30       	cpi	r25, 0x03	; 3
    5fca:	28 f4       	brcc	.+10     	; 0x5fd6 <vfprintf+0x10a>
    5fcc:	0c 5f       	subi	r16, 0xFC	; 252
    5fce:	1f 4f       	sbci	r17, 0xFF	; 255
    5fd0:	9f e3       	ldi	r25, 0x3F	; 63
    5fd2:	99 83       	std	Y+1, r25	; 0x01
    5fd4:	0d c0       	rjmp	.+26     	; 0x5ff0 <vfprintf+0x124>
    5fd6:	83 36       	cpi	r24, 0x63	; 99
    5fd8:	31 f0       	breq	.+12     	; 0x5fe6 <vfprintf+0x11a>
    5fda:	83 37       	cpi	r24, 0x73	; 115
    5fdc:	71 f0       	breq	.+28     	; 0x5ffa <vfprintf+0x12e>
    5fde:	83 35       	cpi	r24, 0x53	; 83
    5fe0:	09 f0       	breq	.+2      	; 0x5fe4 <vfprintf+0x118>
    5fe2:	59 c0       	rjmp	.+178    	; 0x6096 <vfprintf+0x1ca>
    5fe4:	21 c0       	rjmp	.+66     	; 0x6028 <vfprintf+0x15c>
    5fe6:	f8 01       	movw	r30, r16
    5fe8:	80 81       	ld	r24, Z
    5fea:	89 83       	std	Y+1, r24	; 0x01
    5fec:	0e 5f       	subi	r16, 0xFE	; 254
    5fee:	1f 4f       	sbci	r17, 0xFF	; 255
    5ff0:	88 24       	eor	r8, r8
    5ff2:	83 94       	inc	r8
    5ff4:	91 2c       	mov	r9, r1
    5ff6:	53 01       	movw	r10, r6
    5ff8:	13 c0       	rjmp	.+38     	; 0x6020 <vfprintf+0x154>
    5ffa:	28 01       	movw	r4, r16
    5ffc:	f2 e0       	ldi	r31, 0x02	; 2
    5ffe:	4f 0e       	add	r4, r31
    6000:	51 1c       	adc	r5, r1
    6002:	f8 01       	movw	r30, r16
    6004:	a0 80       	ld	r10, Z
    6006:	b1 80       	ldd	r11, Z+1	; 0x01
    6008:	36 fe       	sbrs	r3, 6
    600a:	03 c0       	rjmp	.+6      	; 0x6012 <vfprintf+0x146>
    600c:	69 2d       	mov	r22, r9
    600e:	70 e0       	ldi	r23, 0x00	; 0
    6010:	02 c0       	rjmp	.+4      	; 0x6016 <vfprintf+0x14a>
    6012:	6f ef       	ldi	r22, 0xFF	; 255
    6014:	7f ef       	ldi	r23, 0xFF	; 255
    6016:	c5 01       	movw	r24, r10
    6018:	0e 94 52 31 	call	0x62a4	; 0x62a4 <strnlen>
    601c:	4c 01       	movw	r8, r24
    601e:	82 01       	movw	r16, r4
    6020:	f3 2d       	mov	r31, r3
    6022:	ff 77       	andi	r31, 0x7F	; 127
    6024:	3f 2e       	mov	r3, r31
    6026:	16 c0       	rjmp	.+44     	; 0x6054 <vfprintf+0x188>
    6028:	28 01       	movw	r4, r16
    602a:	22 e0       	ldi	r18, 0x02	; 2
    602c:	42 0e       	add	r4, r18
    602e:	51 1c       	adc	r5, r1
    6030:	f8 01       	movw	r30, r16
    6032:	a0 80       	ld	r10, Z
    6034:	b1 80       	ldd	r11, Z+1	; 0x01
    6036:	36 fe       	sbrs	r3, 6
    6038:	03 c0       	rjmp	.+6      	; 0x6040 <vfprintf+0x174>
    603a:	69 2d       	mov	r22, r9
    603c:	70 e0       	ldi	r23, 0x00	; 0
    603e:	02 c0       	rjmp	.+4      	; 0x6044 <vfprintf+0x178>
    6040:	6f ef       	ldi	r22, 0xFF	; 255
    6042:	7f ef       	ldi	r23, 0xFF	; 255
    6044:	c5 01       	movw	r24, r10
    6046:	0e 94 47 31 	call	0x628e	; 0x628e <strnlen_P>
    604a:	4c 01       	movw	r8, r24
    604c:	f3 2d       	mov	r31, r3
    604e:	f0 68       	ori	r31, 0x80	; 128
    6050:	3f 2e       	mov	r3, r31
    6052:	82 01       	movw	r16, r4
    6054:	33 fc       	sbrc	r3, 3
    6056:	1b c0       	rjmp	.+54     	; 0x608e <vfprintf+0x1c2>
    6058:	82 2d       	mov	r24, r2
    605a:	90 e0       	ldi	r25, 0x00	; 0
    605c:	88 16       	cp	r8, r24
    605e:	99 06       	cpc	r9, r25
    6060:	b0 f4       	brcc	.+44     	; 0x608e <vfprintf+0x1c2>
    6062:	b6 01       	movw	r22, r12
    6064:	80 e2       	ldi	r24, 0x20	; 32
    6066:	90 e0       	ldi	r25, 0x00	; 0
    6068:	0e 94 6d 31 	call	0x62da	; 0x62da <fputc>
    606c:	2a 94       	dec	r2
    606e:	f4 cf       	rjmp	.-24     	; 0x6058 <vfprintf+0x18c>
    6070:	f5 01       	movw	r30, r10
    6072:	37 fc       	sbrc	r3, 7
    6074:	85 91       	lpm	r24, Z+
    6076:	37 fe       	sbrs	r3, 7
    6078:	81 91       	ld	r24, Z+
    607a:	5f 01       	movw	r10, r30
    607c:	b6 01       	movw	r22, r12
    607e:	90 e0       	ldi	r25, 0x00	; 0
    6080:	0e 94 6d 31 	call	0x62da	; 0x62da <fputc>
    6084:	21 10       	cpse	r2, r1
    6086:	2a 94       	dec	r2
    6088:	21 e0       	ldi	r18, 0x01	; 1
    608a:	82 1a       	sub	r8, r18
    608c:	91 08       	sbc	r9, r1
    608e:	81 14       	cp	r8, r1
    6090:	91 04       	cpc	r9, r1
    6092:	71 f7       	brne	.-36     	; 0x6070 <vfprintf+0x1a4>
    6094:	e8 c0       	rjmp	.+464    	; 0x6266 <vfprintf+0x39a>
    6096:	84 36       	cpi	r24, 0x64	; 100
    6098:	11 f0       	breq	.+4      	; 0x609e <vfprintf+0x1d2>
    609a:	89 36       	cpi	r24, 0x69	; 105
    609c:	41 f5       	brne	.+80     	; 0x60ee <vfprintf+0x222>
    609e:	f8 01       	movw	r30, r16
    60a0:	37 fe       	sbrs	r3, 7
    60a2:	07 c0       	rjmp	.+14     	; 0x60b2 <vfprintf+0x1e6>
    60a4:	60 81       	ld	r22, Z
    60a6:	71 81       	ldd	r23, Z+1	; 0x01
    60a8:	82 81       	ldd	r24, Z+2	; 0x02
    60aa:	93 81       	ldd	r25, Z+3	; 0x03
    60ac:	0c 5f       	subi	r16, 0xFC	; 252
    60ae:	1f 4f       	sbci	r17, 0xFF	; 255
    60b0:	08 c0       	rjmp	.+16     	; 0x60c2 <vfprintf+0x1f6>
    60b2:	60 81       	ld	r22, Z
    60b4:	71 81       	ldd	r23, Z+1	; 0x01
    60b6:	07 2e       	mov	r0, r23
    60b8:	00 0c       	add	r0, r0
    60ba:	88 0b       	sbc	r24, r24
    60bc:	99 0b       	sbc	r25, r25
    60be:	0e 5f       	subi	r16, 0xFE	; 254
    60c0:	1f 4f       	sbci	r17, 0xFF	; 255
    60c2:	f3 2d       	mov	r31, r3
    60c4:	ff 76       	andi	r31, 0x6F	; 111
    60c6:	3f 2e       	mov	r3, r31
    60c8:	97 ff       	sbrs	r25, 7
    60ca:	09 c0       	rjmp	.+18     	; 0x60de <vfprintf+0x212>
    60cc:	90 95       	com	r25
    60ce:	80 95       	com	r24
    60d0:	70 95       	com	r23
    60d2:	61 95       	neg	r22
    60d4:	7f 4f       	sbci	r23, 0xFF	; 255
    60d6:	8f 4f       	sbci	r24, 0xFF	; 255
    60d8:	9f 4f       	sbci	r25, 0xFF	; 255
    60da:	f0 68       	ori	r31, 0x80	; 128
    60dc:	3f 2e       	mov	r3, r31
    60de:	2a e0       	ldi	r18, 0x0A	; 10
    60e0:	30 e0       	ldi	r19, 0x00	; 0
    60e2:	a3 01       	movw	r20, r6
    60e4:	0e 94 a9 31 	call	0x6352	; 0x6352 <__ultoa_invert>
    60e8:	88 2e       	mov	r8, r24
    60ea:	86 18       	sub	r8, r6
    60ec:	45 c0       	rjmp	.+138    	; 0x6178 <vfprintf+0x2ac>
    60ee:	85 37       	cpi	r24, 0x75	; 117
    60f0:	31 f4       	brne	.+12     	; 0x60fe <vfprintf+0x232>
    60f2:	23 2d       	mov	r18, r3
    60f4:	2f 7e       	andi	r18, 0xEF	; 239
    60f6:	b2 2e       	mov	r11, r18
    60f8:	2a e0       	ldi	r18, 0x0A	; 10
    60fa:	30 e0       	ldi	r19, 0x00	; 0
    60fc:	25 c0       	rjmp	.+74     	; 0x6148 <vfprintf+0x27c>
    60fe:	93 2d       	mov	r25, r3
    6100:	99 7f       	andi	r25, 0xF9	; 249
    6102:	b9 2e       	mov	r11, r25
    6104:	8f 36       	cpi	r24, 0x6F	; 111
    6106:	c1 f0       	breq	.+48     	; 0x6138 <vfprintf+0x26c>
    6108:	18 f4       	brcc	.+6      	; 0x6110 <vfprintf+0x244>
    610a:	88 35       	cpi	r24, 0x58	; 88
    610c:	79 f0       	breq	.+30     	; 0x612c <vfprintf+0x260>
    610e:	b5 c0       	rjmp	.+362    	; 0x627a <vfprintf+0x3ae>
    6110:	80 37       	cpi	r24, 0x70	; 112
    6112:	19 f0       	breq	.+6      	; 0x611a <vfprintf+0x24e>
    6114:	88 37       	cpi	r24, 0x78	; 120
    6116:	21 f0       	breq	.+8      	; 0x6120 <vfprintf+0x254>
    6118:	b0 c0       	rjmp	.+352    	; 0x627a <vfprintf+0x3ae>
    611a:	e9 2f       	mov	r30, r25
    611c:	e0 61       	ori	r30, 0x10	; 16
    611e:	be 2e       	mov	r11, r30
    6120:	b4 fe       	sbrs	r11, 4
    6122:	0d c0       	rjmp	.+26     	; 0x613e <vfprintf+0x272>
    6124:	fb 2d       	mov	r31, r11
    6126:	f4 60       	ori	r31, 0x04	; 4
    6128:	bf 2e       	mov	r11, r31
    612a:	09 c0       	rjmp	.+18     	; 0x613e <vfprintf+0x272>
    612c:	34 fe       	sbrs	r3, 4
    612e:	0a c0       	rjmp	.+20     	; 0x6144 <vfprintf+0x278>
    6130:	29 2f       	mov	r18, r25
    6132:	26 60       	ori	r18, 0x06	; 6
    6134:	b2 2e       	mov	r11, r18
    6136:	06 c0       	rjmp	.+12     	; 0x6144 <vfprintf+0x278>
    6138:	28 e0       	ldi	r18, 0x08	; 8
    613a:	30 e0       	ldi	r19, 0x00	; 0
    613c:	05 c0       	rjmp	.+10     	; 0x6148 <vfprintf+0x27c>
    613e:	20 e1       	ldi	r18, 0x10	; 16
    6140:	30 e0       	ldi	r19, 0x00	; 0
    6142:	02 c0       	rjmp	.+4      	; 0x6148 <vfprintf+0x27c>
    6144:	20 e1       	ldi	r18, 0x10	; 16
    6146:	32 e0       	ldi	r19, 0x02	; 2
    6148:	f8 01       	movw	r30, r16
    614a:	b7 fe       	sbrs	r11, 7
    614c:	07 c0       	rjmp	.+14     	; 0x615c <vfprintf+0x290>
    614e:	60 81       	ld	r22, Z
    6150:	71 81       	ldd	r23, Z+1	; 0x01
    6152:	82 81       	ldd	r24, Z+2	; 0x02
    6154:	93 81       	ldd	r25, Z+3	; 0x03
    6156:	0c 5f       	subi	r16, 0xFC	; 252
    6158:	1f 4f       	sbci	r17, 0xFF	; 255
    615a:	06 c0       	rjmp	.+12     	; 0x6168 <vfprintf+0x29c>
    615c:	60 81       	ld	r22, Z
    615e:	71 81       	ldd	r23, Z+1	; 0x01
    6160:	80 e0       	ldi	r24, 0x00	; 0
    6162:	90 e0       	ldi	r25, 0x00	; 0
    6164:	0e 5f       	subi	r16, 0xFE	; 254
    6166:	1f 4f       	sbci	r17, 0xFF	; 255
    6168:	a3 01       	movw	r20, r6
    616a:	0e 94 a9 31 	call	0x6352	; 0x6352 <__ultoa_invert>
    616e:	88 2e       	mov	r8, r24
    6170:	86 18       	sub	r8, r6
    6172:	fb 2d       	mov	r31, r11
    6174:	ff 77       	andi	r31, 0x7F	; 127
    6176:	3f 2e       	mov	r3, r31
    6178:	36 fe       	sbrs	r3, 6
    617a:	0d c0       	rjmp	.+26     	; 0x6196 <vfprintf+0x2ca>
    617c:	23 2d       	mov	r18, r3
    617e:	2e 7f       	andi	r18, 0xFE	; 254
    6180:	a2 2e       	mov	r10, r18
    6182:	89 14       	cp	r8, r9
    6184:	58 f4       	brcc	.+22     	; 0x619c <vfprintf+0x2d0>
    6186:	34 fe       	sbrs	r3, 4
    6188:	0b c0       	rjmp	.+22     	; 0x61a0 <vfprintf+0x2d4>
    618a:	32 fc       	sbrc	r3, 2
    618c:	09 c0       	rjmp	.+18     	; 0x61a0 <vfprintf+0x2d4>
    618e:	83 2d       	mov	r24, r3
    6190:	8e 7e       	andi	r24, 0xEE	; 238
    6192:	a8 2e       	mov	r10, r24
    6194:	05 c0       	rjmp	.+10     	; 0x61a0 <vfprintf+0x2d4>
    6196:	b8 2c       	mov	r11, r8
    6198:	a3 2c       	mov	r10, r3
    619a:	03 c0       	rjmp	.+6      	; 0x61a2 <vfprintf+0x2d6>
    619c:	b8 2c       	mov	r11, r8
    619e:	01 c0       	rjmp	.+2      	; 0x61a2 <vfprintf+0x2d6>
    61a0:	b9 2c       	mov	r11, r9
    61a2:	a4 fe       	sbrs	r10, 4
    61a4:	0f c0       	rjmp	.+30     	; 0x61c4 <vfprintf+0x2f8>
    61a6:	fe 01       	movw	r30, r28
    61a8:	e8 0d       	add	r30, r8
    61aa:	f1 1d       	adc	r31, r1
    61ac:	80 81       	ld	r24, Z
    61ae:	80 33       	cpi	r24, 0x30	; 48
    61b0:	21 f4       	brne	.+8      	; 0x61ba <vfprintf+0x2ee>
    61b2:	9a 2d       	mov	r25, r10
    61b4:	99 7e       	andi	r25, 0xE9	; 233
    61b6:	a9 2e       	mov	r10, r25
    61b8:	09 c0       	rjmp	.+18     	; 0x61cc <vfprintf+0x300>
    61ba:	a2 fe       	sbrs	r10, 2
    61bc:	06 c0       	rjmp	.+12     	; 0x61ca <vfprintf+0x2fe>
    61be:	b3 94       	inc	r11
    61c0:	b3 94       	inc	r11
    61c2:	04 c0       	rjmp	.+8      	; 0x61cc <vfprintf+0x300>
    61c4:	8a 2d       	mov	r24, r10
    61c6:	86 78       	andi	r24, 0x86	; 134
    61c8:	09 f0       	breq	.+2      	; 0x61cc <vfprintf+0x300>
    61ca:	b3 94       	inc	r11
    61cc:	a3 fc       	sbrc	r10, 3
    61ce:	11 c0       	rjmp	.+34     	; 0x61f2 <vfprintf+0x326>
    61d0:	a0 fe       	sbrs	r10, 0
    61d2:	06 c0       	rjmp	.+12     	; 0x61e0 <vfprintf+0x314>
    61d4:	b2 14       	cp	r11, r2
    61d6:	88 f4       	brcc	.+34     	; 0x61fa <vfprintf+0x32e>
    61d8:	28 0c       	add	r2, r8
    61da:	92 2c       	mov	r9, r2
    61dc:	9b 18       	sub	r9, r11
    61de:	0e c0       	rjmp	.+28     	; 0x61fc <vfprintf+0x330>
    61e0:	b2 14       	cp	r11, r2
    61e2:	60 f4       	brcc	.+24     	; 0x61fc <vfprintf+0x330>
    61e4:	b6 01       	movw	r22, r12
    61e6:	80 e2       	ldi	r24, 0x20	; 32
    61e8:	90 e0       	ldi	r25, 0x00	; 0
    61ea:	0e 94 6d 31 	call	0x62da	; 0x62da <fputc>
    61ee:	b3 94       	inc	r11
    61f0:	f7 cf       	rjmp	.-18     	; 0x61e0 <vfprintf+0x314>
    61f2:	b2 14       	cp	r11, r2
    61f4:	18 f4       	brcc	.+6      	; 0x61fc <vfprintf+0x330>
    61f6:	2b 18       	sub	r2, r11
    61f8:	02 c0       	rjmp	.+4      	; 0x61fe <vfprintf+0x332>
    61fa:	98 2c       	mov	r9, r8
    61fc:	21 2c       	mov	r2, r1
    61fe:	a4 fe       	sbrs	r10, 4
    6200:	10 c0       	rjmp	.+32     	; 0x6222 <vfprintf+0x356>
    6202:	b6 01       	movw	r22, r12
    6204:	80 e3       	ldi	r24, 0x30	; 48
    6206:	90 e0       	ldi	r25, 0x00	; 0
    6208:	0e 94 6d 31 	call	0x62da	; 0x62da <fputc>
    620c:	a2 fe       	sbrs	r10, 2
    620e:	17 c0       	rjmp	.+46     	; 0x623e <vfprintf+0x372>
    6210:	a1 fc       	sbrc	r10, 1
    6212:	03 c0       	rjmp	.+6      	; 0x621a <vfprintf+0x34e>
    6214:	88 e7       	ldi	r24, 0x78	; 120
    6216:	90 e0       	ldi	r25, 0x00	; 0
    6218:	02 c0       	rjmp	.+4      	; 0x621e <vfprintf+0x352>
    621a:	88 e5       	ldi	r24, 0x58	; 88
    621c:	90 e0       	ldi	r25, 0x00	; 0
    621e:	b6 01       	movw	r22, r12
    6220:	0c c0       	rjmp	.+24     	; 0x623a <vfprintf+0x36e>
    6222:	8a 2d       	mov	r24, r10
    6224:	86 78       	andi	r24, 0x86	; 134
    6226:	59 f0       	breq	.+22     	; 0x623e <vfprintf+0x372>
    6228:	a1 fe       	sbrs	r10, 1
    622a:	02 c0       	rjmp	.+4      	; 0x6230 <vfprintf+0x364>
    622c:	8b e2       	ldi	r24, 0x2B	; 43
    622e:	01 c0       	rjmp	.+2      	; 0x6232 <vfprintf+0x366>
    6230:	80 e2       	ldi	r24, 0x20	; 32
    6232:	a7 fc       	sbrc	r10, 7
    6234:	8d e2       	ldi	r24, 0x2D	; 45
    6236:	b6 01       	movw	r22, r12
    6238:	90 e0       	ldi	r25, 0x00	; 0
    623a:	0e 94 6d 31 	call	0x62da	; 0x62da <fputc>
    623e:	89 14       	cp	r8, r9
    6240:	38 f4       	brcc	.+14     	; 0x6250 <vfprintf+0x384>
    6242:	b6 01       	movw	r22, r12
    6244:	80 e3       	ldi	r24, 0x30	; 48
    6246:	90 e0       	ldi	r25, 0x00	; 0
    6248:	0e 94 6d 31 	call	0x62da	; 0x62da <fputc>
    624c:	9a 94       	dec	r9
    624e:	f7 cf       	rjmp	.-18     	; 0x623e <vfprintf+0x372>
    6250:	8a 94       	dec	r8
    6252:	f3 01       	movw	r30, r6
    6254:	e8 0d       	add	r30, r8
    6256:	f1 1d       	adc	r31, r1
    6258:	80 81       	ld	r24, Z
    625a:	b6 01       	movw	r22, r12
    625c:	90 e0       	ldi	r25, 0x00	; 0
    625e:	0e 94 6d 31 	call	0x62da	; 0x62da <fputc>
    6262:	81 10       	cpse	r8, r1
    6264:	f5 cf       	rjmp	.-22     	; 0x6250 <vfprintf+0x384>
    6266:	22 20       	and	r2, r2
    6268:	09 f4       	brne	.+2      	; 0x626c <vfprintf+0x3a0>
    626a:	42 ce       	rjmp	.-892    	; 0x5ef0 <vfprintf+0x24>
    626c:	b6 01       	movw	r22, r12
    626e:	80 e2       	ldi	r24, 0x20	; 32
    6270:	90 e0       	ldi	r25, 0x00	; 0
    6272:	0e 94 6d 31 	call	0x62da	; 0x62da <fputc>
    6276:	2a 94       	dec	r2
    6278:	f6 cf       	rjmp	.-20     	; 0x6266 <vfprintf+0x39a>
    627a:	f6 01       	movw	r30, r12
    627c:	86 81       	ldd	r24, Z+6	; 0x06
    627e:	97 81       	ldd	r25, Z+7	; 0x07
    6280:	02 c0       	rjmp	.+4      	; 0x6286 <vfprintf+0x3ba>
    6282:	8f ef       	ldi	r24, 0xFF	; 255
    6284:	9f ef       	ldi	r25, 0xFF	; 255
    6286:	2b 96       	adiw	r28, 0x0b	; 11
    6288:	e2 e1       	ldi	r30, 0x12	; 18
    628a:	0c 94 23 32 	jmp	0x6446	; 0x6446 <__epilogue_restores__>

0000628e <strnlen_P>:
    628e:	fc 01       	movw	r30, r24
    6290:	05 90       	lpm	r0, Z+
    6292:	61 50       	subi	r22, 0x01	; 1
    6294:	70 40       	sbci	r23, 0x00	; 0
    6296:	01 10       	cpse	r0, r1
    6298:	d8 f7       	brcc	.-10     	; 0x6290 <strnlen_P+0x2>
    629a:	80 95       	com	r24
    629c:	90 95       	com	r25
    629e:	8e 0f       	add	r24, r30
    62a0:	9f 1f       	adc	r25, r31
    62a2:	08 95       	ret

000062a4 <strnlen>:
    62a4:	fc 01       	movw	r30, r24
    62a6:	61 50       	subi	r22, 0x01	; 1
    62a8:	70 40       	sbci	r23, 0x00	; 0
    62aa:	01 90       	ld	r0, Z+
    62ac:	01 10       	cpse	r0, r1
    62ae:	d8 f7       	brcc	.-10     	; 0x62a6 <strnlen+0x2>
    62b0:	80 95       	com	r24
    62b2:	90 95       	com	r25
    62b4:	8e 0f       	add	r24, r30
    62b6:	9f 1f       	adc	r25, r31
    62b8:	08 95       	ret

000062ba <strrev>:
    62ba:	dc 01       	movw	r26, r24
    62bc:	fc 01       	movw	r30, r24
    62be:	67 2f       	mov	r22, r23
    62c0:	71 91       	ld	r23, Z+
    62c2:	77 23       	and	r23, r23
    62c4:	e1 f7       	brne	.-8      	; 0x62be <strrev+0x4>
    62c6:	32 97       	sbiw	r30, 0x02	; 2
    62c8:	04 c0       	rjmp	.+8      	; 0x62d2 <strrev+0x18>
    62ca:	7c 91       	ld	r23, X
    62cc:	6d 93       	st	X+, r22
    62ce:	70 83       	st	Z, r23
    62d0:	62 91       	ld	r22, -Z
    62d2:	ae 17       	cp	r26, r30
    62d4:	bf 07       	cpc	r27, r31
    62d6:	c8 f3       	brcs	.-14     	; 0x62ca <strrev+0x10>
    62d8:	08 95       	ret

000062da <fputc>:
    62da:	0f 93       	push	r16
    62dc:	1f 93       	push	r17
    62de:	cf 93       	push	r28
    62e0:	df 93       	push	r29
    62e2:	fb 01       	movw	r30, r22
    62e4:	23 81       	ldd	r18, Z+3	; 0x03
    62e6:	21 fd       	sbrc	r18, 1
    62e8:	03 c0       	rjmp	.+6      	; 0x62f0 <fputc+0x16>
    62ea:	8f ef       	ldi	r24, 0xFF	; 255
    62ec:	9f ef       	ldi	r25, 0xFF	; 255
    62ee:	2c c0       	rjmp	.+88     	; 0x6348 <fputc+0x6e>
    62f0:	22 ff       	sbrs	r18, 2
    62f2:	16 c0       	rjmp	.+44     	; 0x6320 <fputc+0x46>
    62f4:	46 81       	ldd	r20, Z+6	; 0x06
    62f6:	57 81       	ldd	r21, Z+7	; 0x07
    62f8:	24 81       	ldd	r18, Z+4	; 0x04
    62fa:	35 81       	ldd	r19, Z+5	; 0x05
    62fc:	42 17       	cp	r20, r18
    62fe:	53 07       	cpc	r21, r19
    6300:	44 f4       	brge	.+16     	; 0x6312 <fputc+0x38>
    6302:	a0 81       	ld	r26, Z
    6304:	b1 81       	ldd	r27, Z+1	; 0x01
    6306:	9d 01       	movw	r18, r26
    6308:	2f 5f       	subi	r18, 0xFF	; 255
    630a:	3f 4f       	sbci	r19, 0xFF	; 255
    630c:	31 83       	std	Z+1, r19	; 0x01
    630e:	20 83       	st	Z, r18
    6310:	8c 93       	st	X, r24
    6312:	26 81       	ldd	r18, Z+6	; 0x06
    6314:	37 81       	ldd	r19, Z+7	; 0x07
    6316:	2f 5f       	subi	r18, 0xFF	; 255
    6318:	3f 4f       	sbci	r19, 0xFF	; 255
    631a:	37 83       	std	Z+7, r19	; 0x07
    631c:	26 83       	std	Z+6, r18	; 0x06
    631e:	14 c0       	rjmp	.+40     	; 0x6348 <fputc+0x6e>
    6320:	8b 01       	movw	r16, r22
    6322:	ec 01       	movw	r28, r24
    6324:	fb 01       	movw	r30, r22
    6326:	00 84       	ldd	r0, Z+8	; 0x08
    6328:	f1 85       	ldd	r31, Z+9	; 0x09
    632a:	e0 2d       	mov	r30, r0
    632c:	09 95       	icall
    632e:	89 2b       	or	r24, r25
    6330:	e1 f6       	brne	.-72     	; 0x62ea <fputc+0x10>
    6332:	d8 01       	movw	r26, r16
    6334:	16 96       	adiw	r26, 0x06	; 6
    6336:	8d 91       	ld	r24, X+
    6338:	9c 91       	ld	r25, X
    633a:	17 97       	sbiw	r26, 0x07	; 7
    633c:	01 96       	adiw	r24, 0x01	; 1
    633e:	17 96       	adiw	r26, 0x07	; 7
    6340:	9c 93       	st	X, r25
    6342:	8e 93       	st	-X, r24
    6344:	16 97       	sbiw	r26, 0x06	; 6
    6346:	ce 01       	movw	r24, r28
    6348:	df 91       	pop	r29
    634a:	cf 91       	pop	r28
    634c:	1f 91       	pop	r17
    634e:	0f 91       	pop	r16
    6350:	08 95       	ret

00006352 <__ultoa_invert>:
    6352:	fa 01       	movw	r30, r20
    6354:	aa 27       	eor	r26, r26
    6356:	28 30       	cpi	r18, 0x08	; 8
    6358:	51 f1       	breq	.+84     	; 0x63ae <__ultoa_invert+0x5c>
    635a:	20 31       	cpi	r18, 0x10	; 16
    635c:	81 f1       	breq	.+96     	; 0x63be <__ultoa_invert+0x6c>
    635e:	e8 94       	clt
    6360:	6f 93       	push	r22
    6362:	6e 7f       	andi	r22, 0xFE	; 254
    6364:	6e 5f       	subi	r22, 0xFE	; 254
    6366:	7f 4f       	sbci	r23, 0xFF	; 255
    6368:	8f 4f       	sbci	r24, 0xFF	; 255
    636a:	9f 4f       	sbci	r25, 0xFF	; 255
    636c:	af 4f       	sbci	r26, 0xFF	; 255
    636e:	b1 e0       	ldi	r27, 0x01	; 1
    6370:	3e d0       	rcall	.+124    	; 0x63ee <__ultoa_invert+0x9c>
    6372:	b4 e0       	ldi	r27, 0x04	; 4
    6374:	3c d0       	rcall	.+120    	; 0x63ee <__ultoa_invert+0x9c>
    6376:	67 0f       	add	r22, r23
    6378:	78 1f       	adc	r23, r24
    637a:	89 1f       	adc	r24, r25
    637c:	9a 1f       	adc	r25, r26
    637e:	a1 1d       	adc	r26, r1
    6380:	68 0f       	add	r22, r24
    6382:	79 1f       	adc	r23, r25
    6384:	8a 1f       	adc	r24, r26
    6386:	91 1d       	adc	r25, r1
    6388:	a1 1d       	adc	r26, r1
    638a:	6a 0f       	add	r22, r26
    638c:	71 1d       	adc	r23, r1
    638e:	81 1d       	adc	r24, r1
    6390:	91 1d       	adc	r25, r1
    6392:	a1 1d       	adc	r26, r1
    6394:	20 d0       	rcall	.+64     	; 0x63d6 <__ultoa_invert+0x84>
    6396:	09 f4       	brne	.+2      	; 0x639a <__ultoa_invert+0x48>
    6398:	68 94       	set
    639a:	3f 91       	pop	r19
    639c:	2a e0       	ldi	r18, 0x0A	; 10
    639e:	26 9f       	mul	r18, r22
    63a0:	11 24       	eor	r1, r1
    63a2:	30 19       	sub	r19, r0
    63a4:	30 5d       	subi	r19, 0xD0	; 208
    63a6:	31 93       	st	Z+, r19
    63a8:	de f6       	brtc	.-74     	; 0x6360 <__ultoa_invert+0xe>
    63aa:	cf 01       	movw	r24, r30
    63ac:	08 95       	ret
    63ae:	46 2f       	mov	r20, r22
    63b0:	47 70       	andi	r20, 0x07	; 7
    63b2:	40 5d       	subi	r20, 0xD0	; 208
    63b4:	41 93       	st	Z+, r20
    63b6:	b3 e0       	ldi	r27, 0x03	; 3
    63b8:	0f d0       	rcall	.+30     	; 0x63d8 <__ultoa_invert+0x86>
    63ba:	c9 f7       	brne	.-14     	; 0x63ae <__ultoa_invert+0x5c>
    63bc:	f6 cf       	rjmp	.-20     	; 0x63aa <__ultoa_invert+0x58>
    63be:	46 2f       	mov	r20, r22
    63c0:	4f 70       	andi	r20, 0x0F	; 15
    63c2:	40 5d       	subi	r20, 0xD0	; 208
    63c4:	4a 33       	cpi	r20, 0x3A	; 58
    63c6:	18 f0       	brcs	.+6      	; 0x63ce <__ultoa_invert+0x7c>
    63c8:	49 5d       	subi	r20, 0xD9	; 217
    63ca:	31 fd       	sbrc	r19, 1
    63cc:	40 52       	subi	r20, 0x20	; 32
    63ce:	41 93       	st	Z+, r20
    63d0:	02 d0       	rcall	.+4      	; 0x63d6 <__ultoa_invert+0x84>
    63d2:	a9 f7       	brne	.-22     	; 0x63be <__ultoa_invert+0x6c>
    63d4:	ea cf       	rjmp	.-44     	; 0x63aa <__ultoa_invert+0x58>
    63d6:	b4 e0       	ldi	r27, 0x04	; 4
    63d8:	a6 95       	lsr	r26
    63da:	97 95       	ror	r25
    63dc:	87 95       	ror	r24
    63de:	77 95       	ror	r23
    63e0:	67 95       	ror	r22
    63e2:	ba 95       	dec	r27
    63e4:	c9 f7       	brne	.-14     	; 0x63d8 <__ultoa_invert+0x86>
    63e6:	00 97       	sbiw	r24, 0x00	; 0
    63e8:	61 05       	cpc	r22, r1
    63ea:	71 05       	cpc	r23, r1
    63ec:	08 95       	ret
    63ee:	9b 01       	movw	r18, r22
    63f0:	ac 01       	movw	r20, r24
    63f2:	0a 2e       	mov	r0, r26
    63f4:	06 94       	lsr	r0
    63f6:	57 95       	ror	r21
    63f8:	47 95       	ror	r20
    63fa:	37 95       	ror	r19
    63fc:	27 95       	ror	r18
    63fe:	ba 95       	dec	r27
    6400:	c9 f7       	brne	.-14     	; 0x63f4 <__ultoa_invert+0xa2>
    6402:	62 0f       	add	r22, r18
    6404:	73 1f       	adc	r23, r19
    6406:	84 1f       	adc	r24, r20
    6408:	95 1f       	adc	r25, r21
    640a:	a0 1d       	adc	r26, r0
    640c:	08 95       	ret

0000640e <__prologue_saves__>:
    640e:	2f 92       	push	r2
    6410:	3f 92       	push	r3
    6412:	4f 92       	push	r4
    6414:	5f 92       	push	r5
    6416:	6f 92       	push	r6
    6418:	7f 92       	push	r7
    641a:	8f 92       	push	r8
    641c:	9f 92       	push	r9
    641e:	af 92       	push	r10
    6420:	bf 92       	push	r11
    6422:	cf 92       	push	r12
    6424:	df 92       	push	r13
    6426:	ef 92       	push	r14
    6428:	ff 92       	push	r15
    642a:	0f 93       	push	r16
    642c:	1f 93       	push	r17
    642e:	cf 93       	push	r28
    6430:	df 93       	push	r29
    6432:	cd b7       	in	r28, 0x3d	; 61
    6434:	de b7       	in	r29, 0x3e	; 62
    6436:	ca 1b       	sub	r28, r26
    6438:	db 0b       	sbc	r29, r27
    643a:	0f b6       	in	r0, 0x3f	; 63
    643c:	f8 94       	cli
    643e:	de bf       	out	0x3e, r29	; 62
    6440:	0f be       	out	0x3f, r0	; 63
    6442:	cd bf       	out	0x3d, r28	; 61
    6444:	09 94       	ijmp

00006446 <__epilogue_restores__>:
    6446:	2a 88       	ldd	r2, Y+18	; 0x12
    6448:	39 88       	ldd	r3, Y+17	; 0x11
    644a:	48 88       	ldd	r4, Y+16	; 0x10
    644c:	5f 84       	ldd	r5, Y+15	; 0x0f
    644e:	6e 84       	ldd	r6, Y+14	; 0x0e
    6450:	7d 84       	ldd	r7, Y+13	; 0x0d
    6452:	8c 84       	ldd	r8, Y+12	; 0x0c
    6454:	9b 84       	ldd	r9, Y+11	; 0x0b
    6456:	aa 84       	ldd	r10, Y+10	; 0x0a
    6458:	b9 84       	ldd	r11, Y+9	; 0x09
    645a:	c8 84       	ldd	r12, Y+8	; 0x08
    645c:	df 80       	ldd	r13, Y+7	; 0x07
    645e:	ee 80       	ldd	r14, Y+6	; 0x06
    6460:	fd 80       	ldd	r15, Y+5	; 0x05
    6462:	0c 81       	ldd	r16, Y+4	; 0x04
    6464:	1b 81       	ldd	r17, Y+3	; 0x03
    6466:	aa 81       	ldd	r26, Y+2	; 0x02
    6468:	b9 81       	ldd	r27, Y+1	; 0x01
    646a:	ce 0f       	add	r28, r30
    646c:	d1 1d       	adc	r29, r1
    646e:	0f b6       	in	r0, 0x3f	; 63
    6470:	f8 94       	cli
    6472:	de bf       	out	0x3e, r29	; 62
    6474:	0f be       	out	0x3f, r0	; 63
    6476:	cd bf       	out	0x3d, r28	; 61
    6478:	ed 01       	movw	r28, r26
    647a:	08 95       	ret

0000647c <_exit>:
    647c:	f8 94       	cli

0000647e <__stop_program>:
    647e:	ff cf       	rjmp	.-2      	; 0x647e <__stop_program>
